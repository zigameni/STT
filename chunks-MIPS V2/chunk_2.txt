
# Prevođenje programa u HEX format

Da bismo dobili HEX fajl, neophodno nam je da imamo ELF fajl koji možemo pretvoriti u odgovarajući HEX fajl. Zato ćemo prvo krenuti od pisanja jednostavnog programa koji ćemo prevesti u objektni format, odnosno u ELF format, a zatim ćemo taj ELF fajl pretvoriti u Intel Hex format.

## Kreiranje direktorijuma i pisanje programa

Prvo ćemo napraviti zaseban direktorijum u koji ćemo smestiti fajlove vezane za pravljenje HEX fajla. Taj direktorijum možemo nazvati `main`, i u okviru njega ćemo napisati naš prvi jednostavni program. Program će se sastojati od nekoliko promenljivih:

- Jedna celobrojna promenljiva (`int`) sa vrednošću 7.
- Jedna nepromenljiva vrednost (`const`) sa vrednošću 6.
- Jedna makro promenljiva sa vrednošću 5.
- Jedna neinicijalizovana promenljiva koja nema početnu vrednost.

Program će biti krajnje jednostavan i sastojaće se samo od dodele vrednosti neinicializovanoj promenljivoj, koristeći vrednosti ostalih promenljivih. Ovaj fajl ćemo sačuvati u direktorijumu `main` pod nazivom `main.c`.

## Prevođenje programa u objektni fajl

Sada ćemo pokušati da prevedemo fajl `main.c` u objektni fajl. To ćemo uraditi tako što ćemo prevesti i asemblovati `main.c` bez povezivanja, a zatim ćemo od rezultujućeg objektnog fajla napraviti HEX fajl.

Da bismo to postigli, koristićemo GCC prevodilac. Otvorićemo terminal i pozvaćemo GCC sa odgovarajućim opcijama. Pošto ćemo prevoditi kod za ARM arhitekturu, koristićemo cross-compiler `arm-none-eabi-gcc`. Argumenti koje treba da prosledimo su sledeći:

- `-c`: Da bismo izvršili samo prevođenje i asembliranje bez povezivanja.
- `-mcpu=cortex-m3`: Da bismo naznačili da se radi o Cortex-M3 jezgru koje se koristi na ovom kursu.
- `-o main.o`: Da bismo definisali izlazni fajl kao `main.o`, dok je ulazni fajl `main.c`.

Nakon prevođenja, rezultat će biti objektni fajl u ELF formatu, koji ćemo zatim pretvoriti u HEX fajl.

## Pretvaranje ELF u HEX format

Za pretvaranje ELF fajla u HEX format, koristićemo alat `arm-none-eabi-objcopy`. Sintaksa za ovu komandu je sledeća:

```bash
arm-none-eabi-objcopy -O ihex main.o main.hex
```

Ova komanda će pretvoriti `main.o` u `main.hex` koristeći Intel Hex format. Nakon izvršavanja ove komande, trebalo bi da imamo napravljen HEX fajl.

## Analiza HEX fajla

U HEX fajlu možemo prepoznati neke elemente našeg programa. Na primer, mašinski kod koji predstavlja instrukcije za sabiranje, kao i vrednosti promenljivih (7 i 6). Međutim, primetićemo da se neke od ovih vrednosti nalaze na istim adresama, što je posledica toga što nismo definisali odgovarajuću linkersku skriptu niti smo pozvali linker koji bi odredio gde treba smestiti pojedine sekcije.

## Sledeći koraci: Linkerska skripta

Pre nego što pređemo na pisanje prve linkerske skripte, proći ćemo kroz proces prevođenja korak po korak kako bismo bolje razumeli kako GCC prevodi izvorni kod u asemblerski kod. To će nam pomoći da prepoznamo osnovne jedinice sa kojima možemo baratati u linkeru.

## Predprocesiranje izvornog koda

Prvi korak u lancu prevođenja je predprocesiranje izvornog koda. Za to ćemo koristiti sledeću komandu:

```bash
arm-none-eabi-gcc -E main.c -o main.i
```

Ova komanda će izvršiti samo predprocesiranje i rezultat će biti smešten u `main.i`. Nakon predprocesiranja, očekujemo da će makroi biti ekspandirani, što će rezultirati jednostavnijim kodom.

## Nastavak prevođenja

Nakon predprocesiranja, sledeći korak je prevođenje predprocesiranog koda u asemblerski kod, a zatim u objektni fajl. Ovaj proces ćemo detaljno analizirati kako bismo bolje razumeli kako se izvorni kod pretvara u mašinski kod.

---

Ovim smo završili prvi deo procesa prevođenja i pripreme za pravljenje HEX fajla. U narednim koracima ćemo se fokusirati na pisanje linkerske skripte i dalju analizu procesa prevođenja.
