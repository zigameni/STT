 Na predkodnom predavanju smo nešto ispričali o cezarovoj šifri i tada smo videli da je to šifra, to je klasična substitucijna šifra, da je se jedan karakter originovog teksta menja, neki jednim karakterom šifrovog teksta. I ono što smo videli da je mana cezarovoj šifra, što zapravo postoji veoma mali broj ključeva, ključeva ima 25, zato što ima 25 različitih pomer, zada engleske ABCD koja može da se ostvari preslikavanje originovog teksta u neki različiti šifrovani tekst. I videli ste na slajdu koji je preo ovoga da pisanjem veoma kratkog programa koji praktično u trenutku može da vam izbac i sve moguće deshifrovane tekstove, i možete napraviti brute force napad i da na taj način vidite ovaj algoritm. Dakle, mana cezarovoj šifra je to što je prostor ključeva jako mali i što nekoko zna kako funkcioniš algoritama, to smo tako će disputovali na prošom predavanju. Dakle, danas kada se govorio simetričnim algoritmima koristiće se oni algoritmi koji su dobro poznati i koje svi znamo. Znači kada neko zna da se koristi cezarovoj šifra, onda će na potluno tribijala način raditi brute force napad, a neko rištiči ovste velike računerske resurse. E, onda su ljudi razmišeli i rekli, pa dobro, ako je cezarovoj šifra loša, zato što ima svega 25 u engleskom alfabetu, ima svega 25 različstih pomereja, zašto ne bi smo napravili malost loženi u šifru, tako što će šifrstvjav algoritm da bude bilo koja permutacija orygilne ABC. I ovde imate na ovom slajdu jedan takap primjer, znači to je ovo ovde, i kod ovog primjera, svako slovo a iz oryginalnog teksta će se zameniti slovom q u šifrovanom tekstu i to možete da vidite u ovim ovdje tačkama u šifrovanom tekstu. Dakle, ovo je takođe substitucijno šifra, zato što jedan karakter, odnosno jedno slovo oryginalnog teksta, ovdje ovo je zameđeno nekim drugim slovom šifrovanom tekstu ali zrazliku od cezarove šifre, kod koji imamo samo one pomerea je ulevo ili desna, odnosno imamo to ro tiranje ABC-de, tako da mogu da postoji maksmalno n minus jedan pomerea za ABC-du koja ima n slova u sebi. Ovde može da se napravili bilo kakva permutacija o oryginalnog alfobeta. Kada kažemo permutacija, da sva kod ovih slova u šifromu na alfabetu mesme, naravno da se ponavlja, i takvih različitih permutacija ima 26 faktorijeli. I to smo videli sa duvoči časa na tabelik koja je na slajdu 9 do ovih prezentaciji, da je ta i broj 26 faktorijeli jako veliki, da je to je broj koji je redav rječivnje 4 x 10, 26. Što znači da ako bi se koristila monoalphabetska šifra, da broj potencijalnih pljučevo, odnosno boj potencijalnih različitih preslikavanja jedne ABCD u šifrovanovo ABCD-u je 26 faktorijel. Ako bi neko hteo da sada pokluša brute force napad na tako šifru, onda bi morao da šifrovani tekst, tekst koji je šifrovano monoalphabetskom šifrom, morao bi da proba da urodi 26 faktorijel desifrovanja ili možda nešto manje, u koliko je srećen, pa brzo dobije origini tekst koji prepozna da je zaista tekst koji ima smisla. Ali u svakom slučaju morao bi da izdaš jako veliki broj takvih desifrovanja da bi brute force napadom došao do origini polike. I neko bi sada mogao da pomisli da je to, košta je taj prostor klučevo zaista veliki i u koliko imamo na padaček koji ima na primer jedan račuver, to bi za njega bila praktično nekaj mostiva prepreka, odnosno bilo bi mu potrebno jako mnogo vremena da dođe to origini polike, mogli bi smo da pomistimo da smo sigurni. Međutim, ovakva šifra, dakle, monoalphabetska šifra, istina, ovo što ću sad reći važi i za cezarovo šifru, ali ovde je to možda drastičnije, kao primer da vam ukraže na problemu algoritmu, monoalphabetska šifra pati od jednog drugu problema, a to je da frekvencija pojavljivanja nekog šifravanog slova će biti istaka o frekvenciju odgovarejućeg origini ljubog slova u origini ljubom tekstu. Dakle, ako imamo slovo e u origini ljubom tekstu, ono šta je frekvencija pojavljivanja slova e u origini ljubom tekstu, istata takva će biti frekvencija pojavljivanja slova s u šifravanom tekstu, znači da gde god je e u origini ljubom tekstu imaćemo s u šifravanom tekstu, odnosno, koliko ima slova e u origini ljubom tekstu, ono će biti slova s u šifravanom tekstu. Esat, zašto je ovo bitno? Ovo je bitno, zato što danas postoje i već dugo postoje dobro analizirane osobi ne svih mogućih prirodnih jezika, pa se tako zna da u engleskom jeziku je najčešći slovo e i zna se tačno sa kojem frekvencijem se koja javljio, to ćemo sad viditi na jednom od narodnih slajdova. I to je sada način na koji će dobar kryptoanalitičer pokušati da napadne ovakav algoritm. Dakle, kada zna kako funkcioniš ove algoritm, algoritm funkcioniš kao monovlfabijicka šifra, ima jednu opciju da uradi Brutforce napad i da proba 26 faktorijel različitih permutacija ABCD, što je privečno složim postav, a sa druge strane zna da statistička osobi na šifravonog teksta, odnosno da frekvencije pojavljivanje slova u šifravonog teksta tačno odgovora frekvencije slova u originun teksta. I ako zna u kom jezik koji je pisan originun i tekstca, jedne strane, i ako zna sa druge strane frekvenciju pojavljivanje slova, onda njegom zadatak za kryptoanalizuje daleko lakši nego da pokuša da radi ovih 26 faktorijel isprobavanje različitih permutacija ABCD. Dakle, se ošlo sam mispličaj bilo na pretvednim slajdovima, a ono što hoći odli da vam pokažem, to je kako izleda učestano slova u engleskom jeziku. Znači u engleskom jeziku najčešće je slovo e i ono se pojavljuje negde sa 12.072% naravno ove procente nemorati da pamitite, ali je onako ka ruk kurizite tijesti, interesantno, sate koje je slovo najčešće. Pa onda nakon toga se pojavlje slovo t i što je nekakoologično zato što ako razmislite malo šta se dosta često sreći o engleskom jeziku to je o neć slano d i to su reči kao što je diz, deti, tako dalje, odnosno ne diz ali det. I den reči koje imaju te kombinacije t i e i takođe u kombinaciji sa slovom h, tako da ni iznenađenje recimo i da je slovo h dosta često u engleskom jeziku. U svakom su učaju ovakva raspudjena učestanosti pojavljivanje slova u nekom teksu se relativno lako napravi, dakle, to biste mogli čak i da napravite veoma prosto aplikaciju koja će uzeti neki veliki tekst koji je pisan na engleskom, način, neku knjigu, naprimer. I da po broji učestanosti ih slova i baš bilo interesantni da se vidi, da li u nekoj knjizi ili u nekom velikom tekstu koji ste vi našli će se poklopiti učestanosti sa ovim učestanostima. Eset naravno, ono što morate da budete svesni, ono su ono čegu morate da budete svesni, je to da ova frekvencija neće u svakom tekstu biti iista. Posebno će ove učestanosti pojevljivanje slova u nekom tekstu varirati u poli koji tekst kratak. I recimo, ako se vratimo na ovaj predhodni primer koji se vam pokazao, recimo u tom predhodnom primeru mi imamo dva puta slovo e, ali imamo i dva puta slovo a. Dakle, u ovom malom primeru koji se zove napadi u podne, koji i isti napise na srpskom jeziku, ali vidićemo nešto tasnije i kako su frekvencije na srpskom jeziku. Recimo, mogli biste zakvičiti da je frekvencija pojevljivanja slova a iista kao frekvencija pojevljivanja slova e. Što nije tačno? I ona jednaka pojevljivanju slova d, što je još manje tačno. Znači ako je tekst kratak, onda je vrlo velika verovatnoće da on neće ispoljiti te statisticka subine jezika u kojom je pisan, već jo ti mako je tekst iole dužija, to znači da imate na primjer makar jednu stranu teksta, onda možete da dobijete približno ove frekvencije. I sad ćemo vidjeti jedan primjer koji može da vam pokaže i da vam da neku ideju kako bi mogla se izvrši kryptavnaliza nekog teksta koji je sifronu on monoalphabetskom sifrom, no pre toga ide sada vam da vidimo kako izdaj da učestano slovo u srpskom jeziku. Dakle, za razliklau degralskog jeziku u srpskom jeziku tu učestano koje nešto veći od 12% ima slovo a, a kako što možete da vidjeti i da sada toga ide slovo o pa i pa e koje su negde sa tu nešto oko 9%, odnosno, izm. 10 i 9% pojebljive. A videli ste o normalnom primjeru, nemalo rečenici da smo dobili da slova a i slovo a, slovo e i slovo d imaju vistu učestanost pojebljivinje. Što bi trebalo da vam ukreže na to da nije sve jedno koliko je dužinu teksta, odnosno da što je tekst duži, to će moći da se umapira na ovako jednu, na ovako jednu raspodelu učestanosti pojebljivanja slova. Dakle, monofabetska šifra bi bilo primjer šifre koja ima veliki prostor pljučeva, zato što postoji veliki broj permutacija originele ABCD koje možete da se napravi različito šifrovanje originalog teksta. Međutim, monofabetska šifra ima u sebi strukturni problem. A taj strukturni problem
 u monofabetskoj šifri, što bi smo mogli da kažemo kolokvijalnu rupa u algoritmu. Strukturni problem u monofabetskoj šifri je taj da monofabetska šifra prenosi statistiku upojeljivanje slova iz originalnu teksta u šifrovani tekst. I da onda to predstavlja tu rupu algoritmu, odnosno rupu u metodi, koja će onom na padaču koji zna kako funkcioniše algoritam, odostu koji se algoritem koristi, to će omogućiti na padaču da na relativno jednostava način dođe do originalne poruke. E sad mi naravno ovde nemovo vremeno da se bavimo dešifrovanjen takih tekstova, to bi ste mogli vidi da pokušate da se poigrate, ovde imate na ovom slajdu, brovi 23, imate jedan primer šifrovano teksta, to je ovaj ovde tekst za koji se zna da je šifrovano monofabetskom šifrom i ono što takođe ovde imate, to je frekvencija pojeljivanje slova u tom šifrovano tekstu. I ovde upravo možete da vidite ono što sam rekao. Dakle, naravno neće sve frekvencije pojeljivanje slova biti isti kao, tekst je ovaj na engleskom jaziku, neće biti isti kao u engleskom jaziku, zato što kao što možemo da vidimo, ovde najčešće slovo ima frekvenciju odnoslučestnom spoljeljivanju 13.3%, što je više od oni k 12.7, što imamo za slovo e u engleskom alfabetu, međutim, ono što sad mi možemo sa velikom sigurnošju da predpostavimo, to je da je svako slovo p u ovom ovde šifrovano tekstu koje se nalazi na dosta mesta, da je to zapravo slovo e, znači da je to ono slovo koje se najčešće pojavljio. Pa onda, sljedeće stvar, opet sad analizu mojih frekvencija, narodno slovo je slovo z i mogli bismo da predpostavimo da je svako slovo z zapravo slovo t. I onda ako se pronadži, recimo, ova struktura z v p, da je postoji t i e, a znamo da se u engleskom često pojavljio taj trigram t h e, onda možemo dodođemo i do slova h i tako dalje, tako dalje, i da ovako jedno analizom možemo da deo po deo ovog šifrovano teksta odkrivamo, da odkrivamo neke strukture koje imaju smisla i na kraju ono što biste mogli da dobijete, ako biste mogli da isprobate, tu me to bih da vidite, da obiti s našljeste time, ili da napravite neki program koji bićak mogalo da pokuša da ovako nešto radi, da bude dovoj na inteligentan, recimo da ima rečnik svih mogućih engleskih reči, da prepozna kada neka rečku stoji, da kaže to je verovatno to, trebalo bi do dobijete ovakav orignalni tekst. Dakle, ovo je primjer jednog algoritma, a to je monofabijutska šifra koja teorecki gledano bi trebalo da je dobra, koja ima veliki prostruk jučeva, gde brute force napad zahteva jako mnogovremena i puno procesirarske snagi, učetim to je primjer algoritma koju se bi ima rubu, odnosno ima problem, zato što sam šifrovani tekst odkriva dost informacije o tome kakav je orignalni tekst, ide može analizim tog šifrovani teksta da se dođe do orignalne poruke. E sad onda su ljudi razmišljali, pošto je ovo delalo kao dobar pristup, onda su ljudi pokušali da pronađu neke druge metode kojima bi se pobodžila u demonofabrijski šifre i jedna metoda za koji je gaos čvrsto veroval da je metoda koja ovej mehanizam čini neprobojenim je metoda da se ona slova koje imaju veliku učestanost pojavljivanja, da se ona ne predstave jednim simbolom, nego da se predstave sa nekoliko simbolom. Primjera rad je ovdje imate iz one tabele, imate verovatnoći pojavljivanje slova e, 12.7%, imate verovatnoći pojavljivanja slova l u engleskom jeziku koje je 4%. I sad šta tu može da bude ideja? Ideja može da bude da kažemo da ćemo slovo e kodovati različitim simbolima. E sad pošto ako hoćemo da jedno slovo kodovimo sa više simbovala, onda ono što će se desiti, to je da nam u običnoj abcd i nedostaćenan simboli, moramo da izvađemo izvan same abcd i da se slovo iz origina na abcd koduju i nekim drugim simbolima kao što su znak pitanja, znak n, tačka, zapeta ili svičo. I recimo možemo da odlučimo da slovo e šifrovjamo naizmenično pomoću slova a, pomoću znaka pitanja i pomoću ovog znaka n. Šta će se desiti u šifrovanom tekstu? Tekstu koji je šifrovana taj način, u šifrovanom tekstu slovo a neće imati učestanost od 12.7% koju ima slovo e u origina u tekstu, nego će imati 3 puta manju učestanost, zato što slovo a će biti zapravo svako 3. slovo e iz origina u tekstu. Odnosno, verovatno će pojavljivanja svakog od ova 3 simbola ovdje će biti negde oko 4%. Znači, približno 4%. E, našto mi pisanja ne idio, dobra. Dobro. Znači, negde oko 4%. Što to znači? To znači da će recimo slovo a u šifrovanom tekstu, imati približno istu učestanost pojavljivanja kao i kodovano slovo L iz origina u tekstu. A ovo znači da mi na ovaj način korišćenjem ove gausove metode možemo da u šifrovanom tekstu raspurimo i pokvarimo onu statisticku strukturu koja postojeva u origina u tekstu i da na neki način je sakrimo i to pre svega možemo dobro da uredimo sa onim slovima koja se često pojavljuju. Znači, ti mešli ćemo jedno slovo prikazati sa više različitih simbola, sa n različitih simbola, mi ćemo to slovo verovatnoću u njegovog pojavljivanju u šifrovanom tekstu smanjiti n put. I onda na ta način možemo da ispeglamo i da izravnamo onu grafik učestanosti pojavljivanja različitih slova u određenom jeziku. E sad Gauss je ovo napravio i predložio i on je smatrao da je to jako dobro metoda koja ne može da bude probijena, međutim ono što se pokazalo kasnije, to je da čak i kada se ovo metoda koristi, opet ako je tekst malo duži, ono što će se desiti, to je da će frekvencije pojavljivanja sada nekih kombinacija od po 2 i po 3 slova koja se zovu digram i odnosno 3 gram. Da će njihova frekvencija pojavljivanja ostati, očuvana i da će na osnovu toga moći da se dođe do orignonog teksta. Dakle Gauss nije bio bašu pravu, zakašto ovo jeste resilo problem pojedinačnih slova, ali nije resilo problem tih nekih mišanslovnih kombinacija slova, a vidićete nešto kasnije u ovej prezentaciji, to ću vam isto pokazati. Dakle mošete danas da preuzmete tabele za veliki broj poznatih sveckih jezika, tabele učestanosti pojavljivanja digrama, 3 grama, tetragramova, dakle tih razvečitih slovnih kombinacija, što onda kasnije može nekome da pomogne u dešifrovanju ovako pisano teksta. Oračo je Gauss dobro pokušao da uradi, to je da je on hteo da ostori nešto što jeste jedan da tako kažem ideal, a to je da se u šifrovanjem tekstu, da se taj šifrovanje tekst napravi tako da frekvencije pojavljivanja simbola u šifrovanjem tekstu budu približno jednaki, jer ako su približno jednake učestanosti pojavljivanja svih simbola u šifrovanjem tekstu onda one napadače nema zašta da se uhati. Već u tim ako postoji bilo kako variranje, on će uspeti da se uhati za nešto i to variranje ćemo ukazati na to i moćići da napravi neki proboj kroz sam algorita. Uzgred Gauss sad naravno znati kadi živeo, živeo je pre 200 godina, u to njegovo vreme pošto su tekstu vi svi bili pisani rukom ili na papiru, nije imao o mnogo simbola koje moga da koristi. Danas namo sa računarima ne bi bilo nikakav problem da izrađemo iz nekog alfabeta i da umestu nekog slova stavimo neki drugi aski ili unipod simbol i da na taj način šifrojamo tekst. Dakle to ovaj sa računarima danas ne bi bilo problem. Pitanje ja sad ne znam zaista, tačno do koje mere je on išao u tom pokušaju razbijenja statističke strukture i originalno tekst. Jer sa druge strane ako malo bolje razmistite to nije baš lako da se ostvarje, obrati ćemo se još jednom na ove učestanosti u engliskom jaziku. Šta je problem? Problem je što je učestanost recimo ovog ovde slova e 12,7%, a učestanost recimo slova x je 0,15%. To znači da postoji obseg ili čak još manji, slovo zed je 0,07%. Postoji obseg, verovatno će pojeljivanje različtih slova koji je više od to puta. To znači ako bih te o sva slova da svede recimo na slovo zed, onda bi ovo ove slovo e moralo da se koduje sa 100 različtih simbola, da onda i ova ostala slova bi morala da se koduju sa jako velikim drujem različtih simbola i jasno je da gaus u svoje vreme kada su tekstovi bili pisani na nekim mašinama ili rukom, da nije imao dovoljne simbola. Ja prepostaj, da vidim...
 danas moglo da se dobije tako nešto, ali ako mogao bi neko da proba da izračuna koliko bi moralo da se koristi različnih simbola u engleskoj ABCD-i, kako bi se sviti simboli u šifrovavnom tekstu sveli na verovatnoći pojevđivanja u Slovazet. Tada bi se napravila odično monofabicka šifra, verovatno da bi taj postopog bio prevečno složno. No dobro, nadam se da vam je ovo za sada bilo jasno i da ste razumeli što su monofabicki šifre i koji je tljučni problem sa monofabickim šifrem. E sada došli smo s tom istorijom simetričnog kriptografije, odnosno načinu na koji su djudi razmišario kriptograzkim algoritmima negde do 19. veka i pošto su djudi svatili tada već problem monofabickih šifara i toga da se očuvava statisticka stutura, origenalno teksta u kome pisana određena poruka. Ono što je bio sledeći pokušaj to je da se ne radi više šifrovanje slovo po slovo, neko da se radi šifrovanje po nekoliko slova od jedno. I prvi takav algoritm koji se koristio i to je algoritm koji se koristio negde u drugu i polovinji 19. veka od prvike do prvog svetskog rata je algoritm koji se zove PlayFer. Pa ćemo se malo posvetiti PlayFer algoritm ispricisimo kakom funkcioniše detegno pa ćemo onda videti i koje su njegove mane odnosno zašto je i on kasnije bio zanime. Prvo ćemo vam pokazati, prvo ćemo videti kako funkcioniše PlayFer algoritm na engleskom alfabetu pa ćemo postavititi neku generalizaciju na Srpštji. Kašnijećemo se PlayFer algoritm koji radi šifrovanje teksta u parovima slova. Znači dva po dva slova se šifrova. Vidite ćemo nešto kasnije postoji tako zvanje hilova algoritm i njega ćemo detađnu raditi. To je algoritm koji može da radi šifrovanje 3 po 3 slova, 4 po 4 slova ili čak n po n slova. Dakle može da radi i po šifrovanje većih blokova slova. Ali ovdje PlayFer algoritm i ono koji pokušao da reši ovoj prvi ključni problem monoalfabeti šifara, to je da frekvencija slova ostaje očuvana u šifronu tekstu. E sad engleski jezik njegovabće da ima 26 slova, što je dosta nezgodnina, zato što 26 može da se prikaže jedino kao 2 x 13. Pa su onda kada su napravili PlayFer algoritm za engleski jezik, odlučili da se u tekstu slovo i i je predstavljaju kao jedno jedino slovo. Neće postojati dva slova za i i je, nego je jedno da ta dva ukinuta. Odnosno ukinuta je slovo i je kao manje verovatno na engleskom jeziku. Zmatra se da engleski alfabet ima 25 slova u kome nema slova i, a slovo i predstavlja i i je. I na kraju neko kada bi napisao neku reč koja ima slovo je, na primer padam i napadam je treća jason, adiacent, da čak je ako bi ste videli da piše adiacent bez jeva da bi ste razumeli šta znači takva reča. E dobra, znači ideja sa PlayFer algoritmom je da se englesk ABC da napiše u matricu koja je veričine 5 x 5, zato što ta modifikovan englesk ABC da ima 25 slova. I u okviru PlayFer algoritmu se koristi tako zvani ključ. U ovom primjeru kojim vam sad pokazujem koristi se kao ključ reč monarki, monarki. Ova reč je zgodna zato što ova reč ima sva slova koja su različita. Prodisputova ćemo malo šta bi se desilo ako bi se neka slova ponavlja, lama da mislim da ćete svatiti sada iz načinu na koji se formira ova matric. Dakle, uzmise ta ključ na reč. I ta ključ na reč se napiše u ovu matricu onako redom kako idu. Svih njenih osam slova pošto se ne ponavljaju, možemo da napiše moci celu. U ostatak matrice, istim ovim redom, dakle horizontalno po redovima, se piše ostatak engleske ABCD, s tim što ona slova koja su veću ključu neće biti napisan. Nako što smo napisali ključ, naravno, kažem, treba da pišemo celo ABCD, a međutim slovo a postoji u ključu i postoji veći u ovaj ovde matrici. Tako da slovo a neće biti pisano, nego će biti napisan o slovo b, pa onda bi trebalo da ide slovo c, međutim slovo c je veću ključu, tako da će ići slovo d. I tako dalje, i tako dalje, znači biće napisan o statak engleske ABCD, ali tako da budu izbačena ona slova koja se veći nalaze u ključu. Mi mislim da je to jasno. Ideja sa ovo matricom je da matrica ima, da se ni jednu slovo u toj ABCD ne ponavlja, a da sama matrica bude napisana tako da jedna početku taj ključ, koji određuje kako će izgledati forma ostatka ove matrici. E dobra, nadam se da evo je proces pisanja, pisanja ove matric je jasan. Ako bi se recimo desilo da je ključ neka reč koja je ima dva slova, na primer recimo ovako nešto, onda bi se matrica formirala, tako što bi se napisalo d o r s, pa bi sledaće slovo bilo a, kao prvo slovo ABCD, dakle ne bi smelno da se ponavi ovo slovo o upisanju same matrici. I onda bi naravno ovdje išlo dalje, d, d, i tako dalje, tako dalje, kako već treba da se napisio o matrici. Nadam se da je to jasno. A u krajnje lini mislim da ćete i navrešvamo raditi više takvih primjera. PlayFer algorithm, kao što reko, je nešto što može da vam dođe na i bolimo da vam damo da se poigakaj, malo sa tim algorithma da vidimo, da vjedeš da nam učili kako funkcijanišu. E dobro, dakle, nadam se da je jasno kako je formirana matrica. Svac je postavlja pitanja šta će namavati matrici, odmastno šta mi to treba da raditi sa ovom matricom. Evo, tu istu matrico sam prenevo i na ovaj ovde slide. E sad, ono što sam rekao da PlayFer algorithm radi, dakle, PlayFer algorithm šifru je tekst 2 po 2 slova. E sad šta to dalje znači? To znači da ako je tekst sa neparnim grojem slova, treba da se doda neku slovo za ispunu. I kao slovo za ispunu se običo stavlja neku slovo koje se rjetko pojravljuje. Ovde imate konvenciju da je slovo X u pitanju, ma da bi neku mogao da se dogovori da bude slovo Z, neće ništa promeniti sa njog u riti. E sad primer je sledeći, dakle, imamo slovo, izvinjam, zimamo reč koji koćemo da šifroje mobile-lun koja se ovako piše. Pak rekli smo da se ova reč šifroje na taj način da se šifruje 2 po 2 slova. Znači šifrova će se prvo slovo B i A. E sad, dnako na toga bi trebalo da se šifruje 2 slovala E, ovvo u samom algoritmu nije dozvoljeno, nego ono što treba da se uvradi, to je da se između ova 2 slova koje su jedna, kada se ubac je to slovo za ispunu. Tako da će ova reč biti napisana, tako što će biti, ovse će ovo malo da se ovako poigram, ubačeno slovo za ispun i x, pa će onda dalje biti napisana ostatak reči, znači ovdje ovo Lx će biti sledeći par slova, pa sledeći par slova će biti L-O. E sad vidite ovde, recimo, jako u orignalne reče se mi imao 2 slova O jednu do drugog, ja ovde ne moram da stavljam izpunu, zato što ta 2 slova O pripadaju razlečitim digramima, odnosno nisu u istom digramu i onda poslednji digram koji treba da se obradi je On. I samom ovom ispunom koji sam stavio u sredinu, nače ovo Lx je učinilo da ova reč sada ima 8 slova, tako da ne bih morao na kraju reći da dodam neku ispunu, kako bi se dobila reč sa parnim brojem slova. E dobro, nadam se da je i ovaj del jasem, a ono što sad ostate to je da vidimo koje su to pravila, koje važe i način na koji se vrše šifrovanje ovo tekst. Pa sada ovde imate sada pravila napisa na ovde u okuru ovih bulita, imamo 3 moguće varjante, a to je da su slova u istom redu, da su slova u istoj koloni ili da slova nisu nji u istom redu, nji u istoj koloni. Pa sada ako slova pripadaju u istom redu, to je ovde primer ovo AR, da imam digram AR koji treba da šifrojam, šifrovanje u tom slučaju se vrši tako što se vrši rotacije u destno. Odnosno šifrovanje tekst ovo AR bi se šifrovalo u rm, znači rotacijom u destno. Uzila bi se slovo r kao početno i slovo m kao nešto što je rotirano u destno. Z druge strane ako imam slova koje su u istoj koloni, na primer ovde imate primer digrama m u, sluvo m se nalazi ovde, a sluvo u se nalazi ovde. Onda se opet vrši rotacija slovom ispod, m u slovo m će preći u slovo c, a sluvo uće u ono koje je ispod, ali pošto ispod nema ništa, onda je to slovo m. Znači m uće se preslikati u c. Naravno proces desifrovanje je supratan i to ne bi trebalo da bude neki problem. Dakle, ovoj situacija kada imamo dva slova koje se nalazi u istoj koloni i imamo poslednju situaciju, a to je kada slova nisu nisu...
 u istom redu nji u istoj koloni, a to je primar hsa, takle, slovo h je ovde, a slovo s je ovde. E sada ovde možete da primetite, da slovo h i s formiraju jedan pravog onik ili kvadrat ili kakog godu. Pravilo koje važi za ovaku situaciju kada slova formiraju neki pravog onik, to je da će se slova preslikati u ono slova koja se nalaze u istom redu, ali na drugim temenima ovog pravog onik. Hse će se preslikati u bp. To je treća varijanta, hse ide u bp, zato što slovo h će se preslikati u slovo b koje se nalazi u istom redu, a na drugom temeno ovog pravog onika, a slovo s će se preslikati u slovo p koje se nalazi u istom redu, a na drugom temenu ovog pravog onika. I to su so pravila koja važe u okruplej fer algoritma, tako da, aha, super sve sam obrisio sve, moguš to da vratim. Tako da ono što je ostalo, to je sada, ajde da propošamo da se poigra, malo joj sa ovim balonom da vidimo šta tu treba da se uroditi, samo da ovo obrišem ovde da mi ovo nekvari sreću. Znači što se tiče ovog balona, prva dva slova su slovo b i a, i šta smo tu rekli da se radi u tako situaciji, znači b i a, to su dva slova koje pripada i isto i koloni, b a će biti šifrovano u dva slova koje su ispod, znači u ib, a nalaze se u istoj to i koloni. Pa onda nakon toga imamo lx, l se nalazi ovde, x se nalazi ovde, lx formiraju pravo ugaonik i ovo lx će se preslikati u su. Znači slovo l će se preslikati u slovo s koje se nalazi u drugom temenu to pravo ugaoniku u istom redu, a slovo x će se preslikati u slovo u. I tako dalje, i tako dalje možete da iznošite šifrovanje, ono što možete da primjetite, to je da ako biste sad posmatrali šifrovani tekst i dobijete recimo slovo, da biti ovu kombinaciju ib, pošto ste kod šifrovaniya radili to da se u istoj koloni uzmu slova koje su ispod, ude šifrovanju morate da uzmete slova koje su iznad, znači ib će se pretvoriti u ba, a sa druge strane ova kombinacija su, znači ovu ovde su i u, će se pretvoriti u ona slova koje su u istim reduvima samo na drugim temenima ovog ravogonika. Tako je stvarno nije težak algoritem i verujem da ako dobijete ovakav zdatak da kada naučete par ovih pravima, da će vam biti jasno, na koji način se vrši i šifrovani i desifrovani, ćete umeti to da izvedete, a u krajnju lini na vežbama ćete raditi još takvih primera i mislim da to ne bi trebalo u ude nikakak problem. E sad što se tiče sigurati playfer algoritma, ona je popravljena odnosno na monoalfabričku šifru zato što se više frekvencije pojavljivanja pojedinočnih slova neće preneti u šifrovani tekst, međutim ono što je problem sa playfer algoritm i ono što je problem što su ljudi tada uočili da pored osnovne karakteristike nekog jezika to je frekvencije pojavljivanja pojedinočnih slova bi moglo da se analizira kako je frekvencija pojavljivanja digrama u tim jezicima, odnosno dvostlavnih kombinacija slova, a pošto tih digrama čak i nema mnogo, znači u engleskom alfabriku je to 676, pod nas bi to bilo 900, znači 30 puta 30. I postoje takve frekvencije digrama kao što rekao, to će vam pokazati na drugom času, onda je zapravo analiza playfer algoritma, odnosno od ešifrovanje playfer algoritma se svela na to da treba da se uzma je analizira tekst 2 po 2 slova kako bi se došlo opet do te statisniške stupkure teksta i kako bi se izvršilo razbijenje. Međutim ovaj algoritm ako ste zapantili na prvom slajdu on je nastav 1.854. godine, a kao što možete da videte široko je primeljivan tokom dugu perioda i čak vojske velike Britani i sjednjeh hemejskih država su bi koristiti u prvom sredskom ratu, da bi koristili se tokom 60. godine i tokom 60. godina se smatrao za vrlo dobar algoritm koji zadovoljava potreba i koji nisu mogli protivnici da razbije. Danas, vreme trajanje danasnih tipogorstvih algoritama je kraće i recimo taj des algoritam, on je bio standardizovan algoritam može tokom 20. godina i njegovu trajanje je istekla. Slušete već o njemu. Dobro, nadam se da je ovo, ova priča o play-haru algoritmu bila jasna, ono što može da vas zadesi, a to je da vam da mu zdatak u kome bi se koristila čiriliča play-fair matrica, da je bi priča bila potpuno ista i sva pravila bi samog algoritma bila ista kao kod engleske play-fair matrice, čak je naš jezik zgodan zato što ima 30 slova. Tako da može da se napravili lepo matrica 5 x 6 ili 6 x 5 i opet, naravno, morala bi da se koristi azbuka. I ja se svećem pre par godina kad smo dalji vašim kolegama ovakr zadatak da u svim salama u kojima je rađeno, a je bilo studenata koji nisu znali azbuka. E sad pošto azbuka se uči u prvom razgostnum na škole i nije obavezno da se zna na fakultetu, mi smo im tada dalji azbuku, ali bi bilo lepo ako dobijeti takr zadatak na kolu koji mi ili ne ispitu da vas ipak to ne pitan, zato što bi to ipak trebalo da zna. E sad slediće stvar, to su tako zvanje polijalfabijski algoritmi i sad ja preporučujem možda da ovde napravimo pauzu, sad je 6 minuta do 5 da ne krenem u to pa da moram da prekitam, tako da ja preporučujem da sad napravimo pauzu, ja ću to ostaviti snimanje. Dakle, na prethodom času smo videli kako funkcionišu monoalfabijski algoritmi i videli smo jedan primer potencijalno grješenje za problem monoalfabijskih algoritma, ali su za problemu očuvanja u potpunešnoj frekvenciji pojavljivanja slova iz oregijunovog teksta, ušifrovanom tekstu. Drugi način kako su ljudi razmišelili da se reši ovej problem je da se uvedo tako zvanje polijalfabijski algoritmi. E sad što bi bili polijalfabijski algoritmi? Ako su monoalfabijski algoritmi, algoritmi kod kojih se pravi jedna permutacija originljana, abecedena, abecedena, originljana jezika i teksta, kod polijalfabijski algoritma bi se koristilo više različitih permutacija. Na primer, prvo slovo bi se koristila jedna permutacija, z drugo slovo bi se koristila neka druga permutacija i tako dalje, i tako dalje. E sad kako to organizovati i na koji način to je implementirati, ćemo vidjeti na jednom jednostavnom primeru. Prvi takav algoritm je tako zvanji vižnerov algoritm. To je algoritm koji se stoji od više cezarovi šifara, pošto svaka cezarova šifa prestavlja jednu permutaciju. Onda je sam vižnerov algoritm polijalfabijski algoritm. Ne sad ćemo da u vižnerovom algoritmo se koristi jedna ovakva tablica, to ćemo objasniti šta je i u krajnju linii to i vama ne bi trebalo da bude problem. To je vižnerov algoritm, s precimo imali na posljednjem roku u fevrloru, či to je nešto što se im može da vam se pojavi na ispitima. Kod polijalfabijski algoritmom postoji naravnu ključ i ta je ključ je zapisan kao neka reč, nam či kao određenik konečom broj karaktera. I ukoliko je poruka koja se šalje, plain text poruka, ako je duža od ključa, onda ključ treba da se ponovio nuliku puta koliko je potrebno da bi dužina ključa bila jednaka dužini poruki. Svako slovo u ključu određuje koja će se cezarova šifra primeni. Dakle, za prvo slovo, ovo slovo w u originom tekstu se koristi ključ d. Da bi smo razume li šta se tu dešava, sada ću se prebaciti, imam da će ostati ovom na žurnjan, ali prebacit ću se na preethodni slide. I rekli smo da je u pitanju ključ d za originon i tekst w. Ove pogledam ove tablici gde se nalazi ključ d, to je ovaj ovde red. I pogledam u koje je originalno slovo, originalno slovo je w. U preseku ove kolone i ovog reda ćemo dobiti slovo z. Tako da ako se sad vratimo na ovaj šifrovani tekst, ono što možemo da vidimo, znači za slovo w osnovnog teksta i ključ d se dobija šifrovano slovo z. Zatim sledeće imamo ključ e i šifrovano slovo e. Pa ako se vratimo opet u ovu ovde tablicu i pogledano ključ e i šifrovano slovo e. U preseku tog reda i te kolone se dobije slovo i. Inače ako malo bolje pogledate kakva je struktura ove vižnerove tablici, ono što možete da vidite, to je.
 da zapravo svaki red u vižnerovoj tablici predstavlja različnu cesarovu šifru, najime drugi red počinja od slova B i završava se slovom A, treći red počinja slovom C i završava se slovom B. Dakle, u drugom redu imamo ABCD-u englesku koje levo rotirana za jednom mestu, u drugom redu imamo englesko ABCD-u koje levo rotirana za dva meste i tako dalje, tako dalje dok se ne popuni kompletno tabela. Tako da ovo biste čak im mogli da zapišate i matematičke, ako se setete kako su zapisivane cesarovu šifru sa onim modulanim zapisom, pa da onda kada dođi zadate kada ne morate crdati celu tabelu, jer ako biste volili ovo da nacrdate bilo bi dosta poslac samo fizičku da se to izvede, a ovaj nego biste mogli da probate matematički da rešite ovaj problem. Elemda se vratimo, dakle, odmisi da je ja sam princip šta se ovde radi i zapravo kroz ovosti mogli da vidite zbog čega se vizžneroval algoritm smatra za tako zvanim polialfabetski algoritm. On je polialfabetski algoritm, zato što u onoj reći, odnosno u onom tekstu koji smo šifrovali, prvi, prvo slovo je šifrovano sa ključem D, odnosno šifrovano sa cesarovom šifrom od koji je izvršem pomere iz-a 3, dok i drugo slovo šifrovano slovom E, odnosno šifrovano na cesarovom šifrom koji je izvršem pomere iz-a 4. Pa ako pogledamo narjedno, narjedno u reći ono je šifrovano slovom C, pa pose toga slovom E, pa slovom P, pa slovom T i tako dalje, i tako dalje. Dakle, svako narjedno slovo je šifrovano nekom drugom cesarovom šifrom. Mi sad ovde baš izbor ovo ključo nije možda najsrećniji, zato što u ovaj reći diseptiv se slovo E ponavlja 3 puta, tako da u suštini odmestu da imamo 9 slovo u ključu, zapravo imamo 2 manje, imamo 7 slova koje su različita, tako da imamo 7 različitih cesarovih šifara koje se ovde koristim. I ova višnerova šifra je bolja od monofabijskih šifara, zato što ako pogledamo slovo E u originalnom tekstu koje je najčešće slovo u englijskom jeziku, ono će u jednom trenutku biti šifrovano kao slovo I, međutim u nekom drugom trenutku će to slovo E biti šifrovano kao slovo T, u nekom trećim trenutku će slovo E biti šifrovano kao slovo G. A što to znači? To znači da frekvencija slova E iz originalnom teksta neće biti preneta u šifrovani tekst, odnosno biće pokvarene te frekvencije, odnosno ako bi neko analizira ovaj tekst slovo po slovo ne bi dobio one frekvencije koje odgovaraju frekvencijama slova u originalnom tekstu. Ma da vidjet ćemo pokazati u jedan grafikman koji pokazuje kvalitet ovih različitih algoritama čak i koji kod višnerovog algoritmu postoji i dalje očuvanje određene strukture teksta. Eset što je problem kod višnerovog algoritma? Problem kod višnerovog algoritma, kod ovoga oblika višnerovog algoritma, je taj što je ključ konacne dužine. Znači ovo ovde je jedan ključ. Šta je napad na ovaj algoritm? Napad na ovaj algoritm je, naravno, a da to nije brute force napad na ključ, zato što bi brute force napad na ključ gdje nešto što zašto bi bilo potrebno dosta vremena, napad na ovaj algoritm je sledeći. Da se analizira šifrovani tekst i da se pronođu evento kombinacije slova, koje su iste u šifrovanom tekstu, i da se pogleda sa kojim razmakom se one nalaze. Naravno, ovaj ovde je tekst koji imamo i kratak, ali sa druge strane, ono što je interesantno, to je da razmak izmeđi ove dve kombinacije vtd. w je tačno 9 slova. Neće uvek da se desi ovako nešto, i neće se uvek pojaviti te dvostovne kombinacije slova koje su razmaknuti 9 slova, ali ono što može da se desi ako tekst nešto duži, to je da ćete pronaći o akvistične kombinacije koje su naprimene u udanjenje neki od njih 9, neki 18, neki 27 slova. I kada tako nešto vidite, to onda može da ukaže na to koliko je dužina ključa u tekstu. E sad, ako neko znak polika je dužina ključa koja se koristi u ovom tekstu, onda napad na vižnero algoritm postaje mnogojednostavniji. A zašto postaje mnogojednostavniji? Ako znamo da u ovom tekstu je dužina ključa 9, onda znamo da će svako deset o slovo, znači ovo ovde slovo broj 1, pa onda ovo ovde slovo broj 10, pa onda ovo ovde slovo broj 19, ta slova su šifrovana istim ključa. I ono što takođe znamo da ova slova šifrovanog teksta su dobijena šifrovanjem istim ključa. Znači ako znamo da je ključ dužina 9, šta možemo da uredimo? Možemo da uzuvimo i izvučemo svako slovo koje je šifrovanog istim slovom ključa i da izvučemo i da napravimo toga poseban tekst. Taj tekst, ako bi smo izvukli sva ova slova koja su šifrovana slovom d, taj tekst je ustvari šifrovan monofabetskog šifra. I onda taj tekst možemo da analiziramo kao monofabetski tekst, odnosno sva ta slova koja su dobiju, koja su šifrovana istim slovom ključa, će u potpunosti sačuvati frekvenciju i sturu originalog teksta. Dakle, napad na vižnerovalgoritam, opet nije brute force napad i opet i vižnerovalgoritam ima taj neki strukturni problem, napad je takav da se otkrije dužina ključa i da se onda kada se otkrije dužina ključa, ako je dužina ključa n, da se taj šifrovan i tekst podeli u n tekstova, od kojih je svaki šifrovan istim slovom tog ključa. Čak ove, ovde imamo drugi problem, znači kao što sam reka, ovaj ključ paš nije dobar, zato što se tri puta ponavlja slovo je, ako bi neko čak i to mogao da ustavlja, a novi, i onda bi mogao da uroditi drugu stvar, mogao bi i mogo lakše da dođe, tako što bi uzav sve delove koje su šifrovan i slovom je, a oni su šifrovan i zapravo istom monoalphabetskom šifrov, da izvuče to i to je mnogo veći broj slova, nego u drugom slučaju i da napravio bodljaju se tisniško analizu, nego u slučaju ovih ostalih slova u samom ključu. Dobro, nadam se da je jasno kako funkcioniše vižnera algoritm, opot kažem i to ćete raditi na vežvama neki primer, da nešto šifrojte i da je šifrojte, pa bi trebalo da vam bude jasno nakon toga kako funkcioniše, i takođe nadam se da vam je jasno koje su manje ovog algoritma, i nače sam algoritm ne bio populavan i koristio se takođe, to je period 19. veka, pa su djudi koristili ovako neke pomoćne alate, da je taj slovo učinit veče, da je pustuje, recimo, ova dva diska, crveni i plavi koji su od drveta napravljeni, da bi nekako mogao brže da šifroje tekst. Način u ovom slučaju imate, u ovom slučaju koji vam je opisan sa ove ovde dve slike, datove da je ključ o, način ključe slovo o, i onda se ovaj unutrašnji disc namesti, tako da slovo o dođe na slovo a, u onoj tabeli koji sam pokazao pre nekoliko minuta, i onda u koliko je osnovni tekst e, šifrovani tekst je s, tako da na taj način su ljudi dolazili do toga da brzo mogu da šifruju tekst, da ne gledaj o ovnu tablicu, nego da imaju ovakav je dan alat, a isto to imate i ovde sa ovim klizačem koji vam to isto pokazuje, da koji način može da se jednostavno šifruje, ako moramo za slaku slavu da pomeramo i da napravimo različit vič. Međutim kao što ste videli čak i ovaj algoritam nije baš savršen, dakle ima strukturni problem i on. E, ovo je taj grafik koji sam steo da vam pokazam, koji pokazuje zapravo kvalitet različitih algoritama, o kojima smo malo prepričali, odnosno, tokom ovog danesih predavanja. Pa ono što je ovde urođeno, ovo ovde je plain tekst linija, dakle, ovo puna linija, pokazuje frekvenciju pojavljivanja, relativnu frekvenciju pojavljivanja slovo u englijskom jeziku, gde je na prvo mesto stavljeno slovo E, dakle, ovaj normalizovan grafik, na prvo mesto je stavljeno slovo E i ono ima 100% a onda u odnosno slovo E, dakle, ako imamo neko slavu koje se pojavlja sa 8% verovatnočem, a slovo E sa 12% verovatnočem, za to slovo važi 8% kroz 12% odnosno tomu dođe koliko, dve trećine, tako, način, nekdo oko 66% naredno slovo koje postoji ovde, dakle, drugo slovo i tako, dadje je formiranja ovaj grafik, koji pokazuje relativne frekvencije pojavljivanja svih slova u englijskom jeziku. I ako je u potpunosti u šifrovanom tekstu očuvana statisticka struktura teksta, onda će ono imati grafik koji je sličan ovom ovde plain tekstu. Ako se koristi playfer šifra, rekli smo, tu se razbija ona monoalfabijicka struktura, znači neće svako slovo imati iste frekvencije, međutim i dadje će ostati različite frekvencije slova, odnosno, takriva će biti malo zaravnjena, ako se koristi vižnjerov algoritm, onda će takriva biti još bolja, ali i dalje, i sa vižnjerovim algoritmom, takriva neće da bude ono što je ideal, a ideal je da dobijemo da sva slova, da će dobijemo ovaj slučajni...
 i slučajnu polij afabetsku šifru, a to je da sva slova u šifrovnom tekstu imaju jedno kurovotnoće. Ako sva slova u šifrovnom tekstu imaju jedno kurovotnoće po ljavljivine, onda kryptoanalitičer absolutno nema zašta da se uhvati i ne može da pronađe nikakopravilo na oslagu koji bi moga oddođi do oregionomom tekstu. A upravo ovaj grafik bi trebalo da vam ukražem na to zašto svi ovih algoritmi kao što su PlayFerry ljubižner nisu algoritmi zapravo koji su danas obstali i koji se i danas koriste. Postoji ovoj metoda kako da se pronađe dužina ključe koji sam malo pripričao se zove kasiski metoda, a postoji jedno poblišanje vižnerovog algoritma, a to je tako zvanje autokij algoritm. Razlika u odnosu na klasičom bižnerovog algoritm je samo tada se ključ koji je kraći od oreginalno teksta neće ponavljati, nego će nakon ključa da se piše oreginalni tekst. Ovo ovde kao što možete vidite Viag Discovery, Save Yourself, to se prebacuju ključa. Šta se postiža ovim? Postiža se to da sada neće više postojati periodičnost u ključu, odnosno više ne može da se izbrši onaj napad da sad gledamo svako n-to slovo ako dužina ključa n-1 i da izlučemo ta slova i da dobijemo monoalphabetski šifre. Ovde je stvar složenije, zato što nema periodičnosti nikakve. Međutim, z druge strane, takođe se pokazuje ako bi se napravio opet one grafikoje vivanja, frepencija različnih slova sa autokimetodom da čak je u takom tekstu nije ona kriva postala horizontalna, nego da i dalje postoji neka sta cisiška stultura koja će da odkriva i dalje osobinje oreginalno tekst. Ali ono što treba zapunčiti, to je kako funkcioniše ova autokivariacija ovog algoritma, da napravite, napravište neki primer, pošto, kažem, to smo važdaali u febroru da jedan šifrovani tekst da se na ispitu deshifruje. E sada ono što sam takođe najavio, to je i pomenuvo sam na predstavnom času, to je ovo tako zvana hillova šifra, a hillova šifra, za razlik od playferala šifre koja radi sa digramima, hillova šifra radi sa engramima, odnosno sa skupovima slova, sukcesivnih slova koje su dužine n. Primjer koji će vam pokazati, ja ovde, je primer koji radi sa 3 gramima, odnosno radi sa kombinacijem od 3 slova, mislim da ćete na vežvama raditi neki primer, recimo, koji radi sa digramima, zato što, kao što može viditi, iz ovoga stoji malo matematike, pa ako bi vam neko daval na ispitu nešto što je veće matrice 2 x 2 ili 3 x 3, to bi bilo dosti složeno, ali ono što treba da zapam tito, to je kako funkcioniše ove algoritme, zato što, ono što takođe možemo da vas pitano o toj koje su manje ovog algoritma, ja to da biste mogli odgovoriti uspešno, a pak o nešto treba da znate kako ove algoritme funkcioniše. Kako što vidite, ove algoritam koristi linearnu algebru, odnosno koristi sistemi linearnih jednačina, jedino što naravno za razlik od običnih linearnih jednačina, za kako smo se sretali rani i o matematici, ono što ovde mora da se desi, to je da ove jednačine budu takve, da rezultat ove jednačine bude uvek u okviru onog skupa vrednosti koja predstavlja BCD. Izbog toga su ove linearne jednačine uvek po modulu 26 i sada ćemo da vidimo kako ovej algoritam radi. Ineče, ovo ovde što je napisano u razvijenom ovdiku, bi smo mogli da napišamo i u formi nekih matrica, dakle da imamo, da je šifrovani tekst C1, C2, C3, odnosno 1, 3 gram, jednak jednom vektoru P1, P2, P3, to su slova originalno tekst, taj 3 gram, puta ova matrica K koja je ima 9 elementa K1, K1, K2, K3 i tako dađe, tako dađe. Ovo je klasično množenje matrica, razvečitvih dimenzija, to se malo posjetite kako funkcioniše, nije pretrano teško. I ovde imate kako se vrše šifrovani, znači šifrovani 3 gram, se dobije kao proizvod originalnog 3 grama, puta matrica K, po modulu 26. To znači da u tom šifrovanom vektoru koji ćemo dobijemo, nije jedna vrednost ne može da izvađe izvama obsega 0 do 25. A isto tako i ova slova koja je ubacujemo kao originalni tekst, su slova koje su numerise na 0 do 25 na one načine na koje smo ove to pokazane na predstavnu predavanju za C2 u šifru. Što se tiče inverzna operacija, odnosno, da je šifrovanja, oveči, originalni tekst se dobija kao šifrovani vektor, oveči, originalni 3 gram da budem precisni, se dobija kao šifrovani 3 gram, puta inverzna matrica i opet po modulu 26. E sad, sad ćemo da pogledamo jedan primer kako to funkcioniše i da vam ispričam malo šta su tu neke začkoljice koje postoje kod hilove šifre, zato što ovo nije klasično linja na algebre, već je modular na algebre, pa tu su stoje neke razlike u odnosnu na klasičnu temati. E lemo, ovo je jedan primer, ovdje je data jedna takva matrica, naravno i svikoj eficienti ovi matrici ne mogu da budu veći od 25, nači mora da zdovolj je princip modularna, da budu između 0 i 25. I sad ako imamo jedan 3 gram u kome se nalazi reč u, to je y o u, slovo y nje je broj 24, slovo ovo je broj 14 i slovo u je broj 20. Onda se šifrovani tekst, nači prvo slovo šifrovno teksta dobije, kao pa sad to možete se početite kako ide množenja, koja ovo vektor puta ovdje matrica, nači 24 puta 3, plus 14 puta 23, plus 20 puta 13. I sve to po modulu 26, dakle to je 654 po modulu 26, to je 4. I to 4 je odgovara slovu e. Pa onda na ta isti način se dobija šifrovano slovo 2 i šifrovano slovo 3 i zapravo kada izvršimo šifrovanje ovog teksta u, dobijemo kombinaciju ek i y. Ono što će Hilov algoritm da uradi, on će 1 3 g oriđenog teksta da pretvori u 1 3 g šifrovano teksta koristići ovu ovde matematicku operaciju. Ja predpostojno da ovo nije pretreno teško da se razume kako funkcioniš, a ovom se lakodaj izprogramirati, kako da napravite nešto što će šifrovat i određim tekst, pomoću Hilov-e šifre. E sad ono da je, kažem, imamo malo začkoljica, to je na koji način napraviti inversno matricu. E sad davno beše ta matematika, pos toga još seća, ali ja se nadam da je nešto baro ostalo v glavi. A ako se sećete kako beše formula za inversno matricu, inversno matrico se dobije kao 1 kroz determinanta od matric K, puta adjungola na matric K. E sad tu ima ono što je tu možda najčudnija stvar ovde, to je ta 1 kroz determinanta, zato što je to nešto što treba da bude po modulu 26. Prva stvar treba si začuna koliko je determinanta od K, to možete da izračunate na osobno volne mat, nadam se da se sećete makar kako se računate determinante, i dobit ćete nešto ovako, znači minus 6.335 po modulu 26, što ima vrednost 9. E sad ono što treba da se pronođe, to je determinanta od K na minus 1, odnosno treba da se pronođe, inversni element za noženje, za broj 9 po modulu 26. E sad ne znam koliko to sad zvuči komplikovo, nadam se da nije sve izvetretlo iz glave. Znači ako imamo ovako situaciju, ako imamo operaciju množenja, imamo dva broja koja se množe, i ako je njihova vrednost 1, onda možemo da kažemo da je b inversni element za množenje za ovo a, odnosno to b je jednako a na minus 1. Odnosno inversni element, nekog broja a, je onaj broj čin množenjem tog broja a dobijamo jedinicu. E sad, naravno, ovo kad napišete ovako 9 na minus 1 po modulu 26, pa to sad ispada 1,9 po modulu 26, to zvuči čudno i to je nešto što bio vas odvelo na stramputicu, zapravo treba razmišati na drugi način. Znači, inversna determinanta, inversna vrednost ovaj determinanti od k, je zapravo onaj broj koji im kada se pomnoži broj 9, dobije takav broj koji po modulu 26 da je 1. I sad pošto broj 3 kada pomnožimo brojom 9, dobijemo 27, a 27 po modulu 26, 1. Onda zapravo determinanta od k na minus 1 je ima vrednost 3. I to je ono što je možda najčudnije i da je, ako neko hoći da napravi inversnu matricu, će malo potrošiti vremena, zato što praviču treba nabadati te vrednosti, da bi se došlo do toga koji je invers za određenu matricu, pri čemu nemaju čakni sve matricu.
 matrice svoj imvezni element, odnosno sve urednosti detegimante nemoji svoj imvezni element, al dobro da sad ne ulezim u te detali. U svakom slučaju, kada se odredi ta determinanta od k na minus prvi, onda se odredi adjungovan na matric, a sad ne zadova se toga sećete, al to početite se malo kako se to, šta beše adjungovan na matric, znači ako ovom ovde mestu će biti determinanta od ovog ovde ostapka, ako se sećete, pa tu ima nekih pluseva i minuse, ovo to se malo početite. I u svakom slučaju, kada se primeni ta matematika koji se on sad opisao, za onu matricu koje je napisan na na predhodnom primjelu će se dobiti ovakva inverzna matrica. Znači, ajde, vrati ću samo na predhodni slajd da vidite, znači, malo nažvortjano, ali ova matrica 325, 426, 15, 13, 17, 21, ta matrica ima ovu ovde dole matricu koje je njena inverzna matrica. E, kada je određena inverzna matrica, znači, tu malo ima posleda se određa inverzna matrica, kada je određena inverzna matrica, onda na potpuno isti način, kako šta smo vršili šifrovanje, sada vršimo desifrovanje i to opet možete da proverite, da li se dobijaju ove vrednosti, a onda kad se već to uradili, mi smo ovde ostavili nek poruku za vas, pa ako vas ne imarzi, možete probati da ovu poruku desifruete, da vidite šta smo mi to napisali. A ono što znate da ta poruka počinja sa ju, dakle, berovatno je napisana na engleskom jeziku. Dobro, nadam se da je ovo jasno. E sad šta je mana hilove šifre? Pa prva mana hilove šifre je što radi sa tim engramima, tako zvanim, a već sam rekao i sad ću vam pokazati kroz koji slajde da postoje tabele i trigrama i tetragramova i pentagramova. Ja čak mislim, za većinu najpoznatijih jezika prigrudnih koji se koriste danas u svetu, čak ja, ajde da vam to pokažem. Evo ovde, možete da vidite kako izdodaju frekvencije trigrama, levo je za engleski jezik, desno je za francoski jezik. I kao što možete da vidite, čak je te frekvencije trigrama se dosta među sobnu razlikima nekih koje su mnogo češće odostali, a togo engleskom jeziku posebno ovotahve, zato što ima i u više reći se pojavljuje, a ne samo to nego i kao čuan je vrlo često u engleskom jeziku. Znači ako pogledate neki tekst koji šifrovam hilovom šifrom i vidjeti da se neki trigram izdvaja, taj trigram koji se izdvaja ako znate da je pise na engleskim jeziku, to je verovatn trigram t-h-e. I onda to može da vam pomogne, onda imate par šifrovano teksta i originalno teksta, pa možete da vam pomogne ude šifrovanju i u razbijenju hilova šifra. To je jedna mana hilova šifra. Druga mana hilova šifra je sama činica da je hilova šifra sistem jednačin. I ono što napadač ne zna, znači napadač zna koji je algoritm u pitanju i napadač na primer zna da se koriste trigrami, ali ono što napadač ne zna, to je koji su koje eficijenti ovih matrica za šifrovanje i deshifro. I to je ono što vam hoće da odreća. E sad, kao što možete da vidite, ovo ovde ako se govori o trigramima, ono što napadaču treba, napadaču treba 9 ovih koje eficijena. Ako im treba 9 koje eficijenata, njemu zapravo treba 9 različitih linujarnih jednačina. Odnosno ono što napadaču treba, to je 9 parova, orignalni tekst i šifrovanju tekst. A to znači da ako napadač na neki način, može da utiče na to kakav će biti orignalni tekst ili zna neki orignalni tekst koji je njegovog odgovarit će šifrovni tekst. Napadaču svega treba minimalo 27 slova šifrovanih da bi moglo da napravi sistem jednačina kojem će da dođe do ovih koje eficijenata u hilovanj algoritm. I to hilovanj algoritm nečini preterano sigurnim i nečiniga nečim što je široko korišćeno, mada u nekom trenutku, prestutina godine, jeste bio algoritm koji se razmatral kao da kažem dosta dobar algoritm. I sve ovo što vam pričavam ukazuje na to da vidite što znači loš design algoritm. Znači s jedne strane neko može da osmislite algoritm koji deluje na prvi pogled da je siguran i koji ima veliki prostor pretragiti učeva. Međutim ako pogledate na neki nekonvencionan na način kako ta algoritm radi ili malo bolje proanalizirate šta se dobijet im algoritmom, onda mogu da se pronađu neki rupe u design. Oni algoritmi koji se danas koristi koji ćete slušati u okrug predneta, dakle pre svega AS algoritm koji i sad koristimo da trenosimo ovu videokonferenciju, toga algoritm koji već 15 godina stoji na javnom uvidu svih mogućih kryptoanalitiča i niko nije pronašao neki takav prolaz kroz AS algoritm, odnosno neku takv strukturni problem koji će da om mogući na padaču da kada vidi šifravani tekst da dođi doori tekst. Dobro, e sad dolazimo do posloznik 100 godina i do nekih interesantnih stvari. Prvi algoritm koji je bio interesantan koji se pojavio 1918 godina je tako zoni vernamo algoritm, on je značajan zvok toga što je to prvi algoritm koji je bio predležim da radi nad binarnim operacija na koji radi, vernamo algoritm je priječno prost, jedan bit plain teksta, to je ovu PI se dovodi na eksklusivno ili ključa i tog bita ključa i ono što se dobija, to je it bit šifrovano tekst. Da bi se od šifrovano teksta dobio plain tekst, da bi se dobio ovaj isti bit PI, ono što ovdje mora da se dovede na eksklusivno ili je isti taj bit ključa. Ono što mora da se desi, to je da ako imamo originlnu poruku koja je zapisana kao niz bita, da bi ona bila desifrovana na druge strani, mora da se tačno svaki bit originlne poruke da odgovaraćim bitu ključ i ti ključe vi moraju da budu u potpunosti sinfronizovanje. Ono što je značeno ko dovol' gvernamo u algoritme je to što koristi operaciju eksklusivno ili i vidjet ćemo da i neki moderni algoritmi koriste ovo eksklusivno ili, a operacija eksklusivno ili je zgodna za to što ona kao što možete vidite istom operacijom se istim ključom vi idete iz originlnu tekstu u šifrovani tekst i dračite se nazav. Ono što je vernam tada zamišljala, to je vreme pre, nego što su postojali rečunari, to je vreme kada su postojali neki telegraf i kada se kutkala morze o azbu ka i sliče stvari, on je predložio da se taj nis bita napiše tako što će se na neku dugačku traku ako se to nekad gledali bušiti rupe i onda se na taj način prebaci ključu na drugu stranu. E dobro otvriki u toj isto vreme kada je nastav overnamo algoritem nastav je algoritem koji se zove bezvuslovna sigurnost. A je sad da opet će osmalo pocititi na prvom času sa vam pomenu da postoje dve vrste sigurnosti koje pružaju kriptografski algoritmi. Jedna vrste sigurnosti su tako zvanja bezvuslovna sigurnost koja kaže da nipod kojim uslovima nikada napadač koji ima samo šifrovani tekst ne može da dođe do originlni tekst. A sa druge strane postoje ono što se zove račnost na sigurnost za koji se kaže da napadač može da dođe iz šifrovom tekst do originlni tekst. Posle određenog broja pokušaja, znači postoji mogućnost brute force napada samo što su to algoritmi koji su napravljeni tako da je na to napadaču potrebno ne praktično u nogo vremena da dođe do originlni tekst. Prosto trebujem i mnogo resursa, trebujem i mnogo vremena jer je potrebno iznošiti jako veliki broj operacije. Eset postoje se pitanje, pa kakav je to zašto mi, ako već postoji, taj one time pad i ako on pruža bezvuslovno sigurno zašto mi to ne bi smo koristili. Pa evo svaćemo da vidimo kako funkcioniše one time pad. I ono je uvrstveno, da se je uvrstveno, da se je uvrstveno, da se je uvrstveno, i onda ćemo pokušati da napravimo neku discusi, da vidimo u čemu se krije njegovu sigurnost i zašto on ne može u praksiji da se primim. Ovde imamo u donjem delu ovog slajda, imamo primjer jednog šifrovanoj teksta i u oba slučaja i gore i dole je isti šifrovani tekst. Ono što pretpostavljemo, to je da se koristi ključ i da se koristi polijel-fabetski algoritm odpogada ovaj ključ ima potpunoslučaja niz slova i da je taj ključ dugačak u naliku koliko je dugačka poruka, odnosno potencijalno je beskonačno. Kluč je potpunoslučajena, nema nikako pravila kako se formira ključ. Nema ni reči kojem se formira ključ, a nema ni reči plus autokik, da se sad orignalna poruka stavlja u ključ. To znači da ključ praktično može da bude bilo šta zato što je ključ potpunoslučaja. Ako ključ može da bude bilo šta, onda možete da izmislite jedan ključ koji će vam dati ovaj plain text. Mr. Master with the Candle Stick in the Hall. A možete da izmislite neki drugi ključ koji će vam dati ovaj ovde tekst. Miss. Scarlet with the Knife in the Library.
 i izborom različitih ključeva da dobijete više rečenica koje mogu da imaju i po taxi, i po značenju mogu da budu napisani na bilokom jeziku, o ovom slučaju na englijskom jeziku, i mogu da imaju bilo kak po značenju, po značenju može da ima smisla. Vi takođe, ovde vi ste mogli da napišite rečenicu iz ovog šifrovana teksta, mogli biti se zapronođite takav ključ koji će vam dati rečenicu profesor Pavle Buletić, Drži Predaavanji zašte poje, ne znam da li mi suklopilo pod užini u ovom, ali biste mogli da započnite takvu rečenicu. E što se to znači? To znači da iz ovog šifrovana teksta, izborom ključa, može da se dobije praktično bilo kakva rečenica ove dužine koje može da ima smisla. A onda se postavlja pitanje, pa dobro, ako napadač dobije takav šifrovani tekst, kako će onda on znati šta je zapravo poruka? Zato što poruka može da bude, napadač je početi sutra u 8 časova, a može poruka da bude, napadač je početi prek sutra u 9 časova i napadač neće počiti nikada. Znači sve te rečenice mogu da se dobiju iz ovog šifrovana teksta. Ono na čemu One Time Pad zastimva svoju sigurnost je činica da je ključ potpunno slučajan, nema nikakog upravila kako je formirana, nema nikakog struktura u njemu, sa jedne strane, a sa druge strane da je dugačak on liko koliko je dugačka poruka, odnosno potencijalo da može da bude bez konacem. Ajde da razmistlimo malo koje su posledi se toga. Jedna stvar je, recimo, da vi šifrojete nešto ovako kratku, da šifrojete, recimo, vašu lozim. I za tako nešto bi moglo da se napravi neki algoritm koji je equivalent o One Time Pad. Vi ću ti možete sa svim legitimna stvar koja se radi. Tu je da vi kada odete neki website, recimo, hoćete sada da skinete operativni sistem u Ubuntu i odlazite na website u Ubuntu i kliknite tamo na download, on će se skidati sa neku Http site-a, dakle biće kriptovanu i vi ćete tim ključem i tim kriptogrstkim algoritmom skinuti FILE koji ima na primjer 3-4-5 gigabytea. E sada, tako FILE koji ima 5 gigabytea da bi bio šifrovamo One Time Pad-om, mi treba da imamo na isti način stvoren isti taj slučenik ključ koji je istete veličine, koji ima 4-5-6 gigabytea, iste veličine kao originalna poruka. Ovo čini mekanizam nepraktični, a druga stvari problem o kako krirati takav ogroman slučenik ključ, ali da bude stvarno slučajan, jer on, ako to stoji, neko pravilo kako se formina, onda on više nije slučajan. Znači, kako ćemo da učinimo da dve strane od kojih se jedna nalazi u Rusiji a druga se nalazi u Keniji, recimo da one stvore isti slučajan ključ na obje strane. Znači, tu postoji mnog od tih, da tako kažem logistickih problema i to je razlog zašto One Time Pad nije primenji, znači, da se pristimo zašto One Time Pad ne može da se koristi za upraksi i zašto se ne koristi i zašto svi algoritmi, o koji imaćete slušati tokom ovog ovdje kursa, ne pružaju bezuznovno sigurnos, nego pružaju samo računsku sigurnos. Ali ono što je jako važno to je da svacite koncept kako funkcioniše One Time Pad i da razumete šta je ono na čemu pločiva tanjegova bezuznovna sigurnos. Ovde u zadnjem bulletu vam stoji nešto number radio stations, kako ste nekad čuli za to šta je, to su radio stanice koje su jedno od taktih recimo postoji u Britelskoj vojidnoj baziji na Kiprup, a postoji recimo i takav ruski service, koji nonstop na kratkim talasi ima emituje samo neke brojeve. Znači imate glas koji onako monotonimo izgovara neke brojeve. E sad ne zna se nikonikada nije do kraja razjasnio šta radete radio stanice koje emituje brojeve, ali ono što se predpostavlja i što se možda sa pravom predpostavlja, to je da recimo ta radio stanice emituje ključ, neki koji možda se koriti za neko šifrovanje, gde sada onaj tamo neki špijon koji se nalazi udaljeno i nekoj zemlji zna da mora da se javi tog i tog danu u to i to vreme i onda počinje od određenog prinutka da beleži te brojeve i to njemu može da predstavlja ključ i to može da bude način za distribuciju ključeva. Pa kakav radio prenost nije baš u duhu interneta koji imamo i ne može baš da se koristi zaštitu poetaka u računarstvim sistemi. No dobro, nadam se da vam jovo jasno razmeste malo o tome kako funkcioniše One Time Pedi i zašto ne može da se očifrovanje poruki nikada dođi do neporuki koje origino. Sada ćemo još kratko malo da se pozabavimo transpozicijenim algoritmima i tu ćemo da se zavustavimo za danas. Transpozicijen algoritmi su druga velika grupa algoritama. Prva grupa algoritama su substitucije algoritmi, to smo videli, to su algoritmi koji jednostav o originalno teksta meni u nekim drugim slovom, a transpozicijen algoritmi su algoritmi koji rada nešto drugo, oni premeštaju redosted slova. I ovdje imate primer opet ove reći Avala u kojoj je napravljeno pravilo da se prvo slovo premešta na drugo mestu, drugo slovo na treće mestu, treće slovo na prvo mestu i u stvari od reći Avala se dobije šifrovana reć A-Aval, koja može a ne mora da odkriva originluporukove suviše prosto, ako da bi mogla neko i da predpostavite koje reć. Ali u svakom stvu, čli transpozicija, znači, premeštajne redosteda simbola, odnosno slova u nekom tekstu. Šta ovo znači? Ako imamo transpozicijne algoritma, šta će u šifrovanom tekstu osvide si? U šifrovanom tekstu će da bude u potpunosti opet očuvana struktura originalno teksta, u smislu da će frekvencije pojeljivanje slova A u originanom tekstu biti jedna ka frekvencije pojeljivanje slova A u šifrovanom tekstu, odnosno da čak za razlik od monoalfabijski šifara da će slova biti mapirana u neka druga, ovdje će imati ta baš slova iz originalnoj teksta koje će biti u istim onim frekvencijama, s kojem je originalno nastav tekst. Tako da transpozicijne algoritme se relativno lako prepoznaju, ako nije radžene neka druga manipulacija nad njih. I ovde imate neke trivialne primjere transpozicijonih algoritama, recimo ovaj, tako zanih rail fence algoritam, gde se ova rečenica vozide po pruzi piše u tri reda, tako što se piše svaku slovo u različiti reda, ako u cik cak, a onda kada treba da se šifruje, da tako kažem, onda se se čita redom vdp i o i rz p u i dobije se ovakav šifrovani tekst koji zaista ne ukazuje na to kakva je šta je originalna poruka, ali z druge strane, uz predpostavku da se zna da je poznat algoritm, ovo je potuno trivialno zakryptoanalizu. Jedan drugi algoritm koji postoji, to je tako zvanje rail transpozicijon algoritm, kod koga postoji ključ. On funkcioniš na sleći način. Originalna poruka, u ovom slučaju ta originalna poruka je o poruka zanimljive informacije, se piše redom, ako je ključ dužine 7, a ovdje je ključ dužine 7, ovih 7 brojela prestavio ključ, i ključe dužine 7, onda se ta poruka piše u redovima, gde maksimalno ima po 7 slova, pojavde je zgodno da ova zanimljiva informacija ima 21 slovo, ali jasno je kako je napisana. Kad se vrši šifrovanje ovog teksta, onda se o nim redom, kako ukazuju brojevi, prvo broj 1, čita vertikalno n, a, i, i, c, i tako dalje, i tako dalje, a, v, m, i dobije se šifrovanje teksta. I ovo isto nije pretrno teško za desifrovanje, međutim, ovdje ima jednu druga stvar, je interesantna i na koje bih teo da vam ukazim, a to je da vidimo šta bi si desilo, ako bi smo korišljenjem ovog istog ključa, znači šifrovali smo zanimljivu informaciju, korišljenjem istog ključa i dobili smo ovo na i, c, a, v, m, z, ako bi smo primenili row transpozišnog algoritm još jednom. Ako bi smo primenili row transpozišnog algoritm još jednom, dobili bi smo opet reč koja je jednako nama ovako na prvi pogled nerazumljiva, dobili bi smo reč u kojoj bi u potpunosti opet bila očuvana statistička osobina i frekvencije pojavljivanja svih slova u orignalnom tekstu, međutim, ovo što je interesantno, to je prikazano na ovom slajdu. Na ovom slajdu možete da vidite napisane redne brojave slova u orignalnom tekstu, u tekstu nakon jedne transpozicije i u tekstu nakon dve transpozicije. Nakon jedne transpozicije, kao što možete da ovo liči na neke testove inteligencije, uhvatite pattern po kojom je ovo formirano, ono što je jasno, to je da grupamo od po 3 slova, su slova sa razmakom od 7. I može da se uhvatite neko pravilo kako se ova slova meni. Međutim, ako pogledamo, ovo je ovde drugu transpoziciju, ovde ne postoje jasno definisano pravilo kako su ispremešta na ova slova. E, ovo je upravo nešto što treba da vam ukaže na to, zašto je struktura tiktogluzkih algoritama koji se danas koriste onako kako jeste. A struktura tiktogluzkih algoritama je taka,
 Da, se sastoje iz najzmeničnih transpozicija i substitucija i da se transpozicija i substitucije ponavljaju više puta. Videćete kada budete radili desa algoritem, desa algoritem imate nekih 16 rundi, dakle 16 puta se ponavlja ista operacija, a uopiru te operacije imate i transpozicije i substitucije, a zašto se to radi, pa to se radi kako bi se ta i originoni tekst dobro izmješao sa ključem da tako kažem i kako bi ono što se dobije na izlazu imalo taku karakteristiku da je verovatno će pojevljivanje svih simbola u tom izlaznom tekstu jednak. Ali o tom potom, da ćete da budete došli do tih algoritama, onda će vam biti jasno, način, ono što je ovde ključan poruka, to je da je bitno da se ponavljaju substitucije i transpozicije i da je to nešto što je bitno da bi se napravilo da algoritm bude dovoljno kvalitetan. Znači produkcijalno algoritmi se tako pravi. Dobro, zaustaviće se ovde.
