 Drove faza u konstrukciji Front End Dela prestavlja sinteksnu analizu, odnosno parsiranje. I cilj parsera je da na osnovu nekog niza klasifikovanih tokena koja je dao lekser izlazo od tako iz leksičke analize, kaže da li taj niz odgovor specifikaciji nekog programskog jezika u kojoma je napisan taj ulazni program. Kako će to biti urađeno? Pa parser praktično na osnovu specifikacije programskog jezika koja je na neki način formalno konstruisana, poradi dakle sentence iz samo ulazno programskog koda i vidi da li je ono skladu sa tom specifikacijom balita. E sad na koji način se zapravo predstavlja, dakle na koji način se zapravo predstavlja, odnosno predstavlja tako neko formalna specifikacija programskog jezika, odnosno neka pravila koja je odgovarajući programski ulazni kod mora zadovoljavati i da bih bio ispravno napisan na tom programskom jeziku, u principu može se predstaviti na više načina. Čina je jedno od osnovnih varianti kako dakle može biti napravlja na ta specifikacije, način da smo već videli do sada i to predstavljaju regularni izraz. Videli smo već do regularnim izrazima, dakle tačno možemo predstaviti u kom obliku očekujemo nešto sa ulazom. Međutim, manje regularnih izraza je to što su oni pogodni za neke jednostavnije formu, odnosno za jednostavnije jezike konstrukte, dok za neke kompleksnije konstrukte prosto nisu pogodni, jedan od takvih primera je recimo za specifikaciju nekoga ritmetičkog izraza, gde imamo operacije, recimo omnoženja i sabiranja, dakle problem kako ćemo specificirati zapravo prioritec avnih operacija. Samo njihovo prepoznavanje, dakle sa ulaza naravno nije posebno kompleksno, međutim u ovom slučaju bita, ta i zapravo prioritet bio nešto što je težer reprezentovati regularnih izrazima. Zbog toga se uudi druga forma, ove formalne reprezentacije, specifikacije i jezika i to su za većinu jezika bezkonteksne grammatike. Gramatike su tipično sastanjene od nekih sentencijalnih formi, odnosno nekih produkcija i u principu preningo što krenemo sa zadacima, na jednostavnije, na jednom primeru takve grammatike, vidimo koji su njeni gradivni elementi i kako se zapravo prepoznaju u konkretne sekvence u potrebom grammatike. Dakle kako su one procesiraju u skladu sa postojećem grammatiku. U okvara ovog prvog zadatka imamo primver neke sekvence, za koje treba da vidimo da li one pripada i odkuvarajući grammatici i da sprovedamo nešto se zove levo izvođenje, desno izvođenje i da prikažemo kako bi izgledalo neko stabilo izvođenje. I sad u principu imamo te neke dve sekvence, ali preningo što krenemo na konkretno procesiranje, hajde prvo da podledamo kako izgleda grammatika, šta su to sve njeni gradivni elementi. Ovo ispod što vidimo, što je numerisano neke kao sekvence koja su numerisano od 1 do 8, zapravo predstavaju produkcije grammatike, gde se sa leve strane obovezno nalazi 1 neterminal, dok se desno strane se nalazi ni iz nekih terminala i netermina. U suštini terminali, odnosno terminalni simboli predstavljaju konkretne simbole koji se mogu pojaviti na ulezu, dok neterminalni simboli predstavljaju nešto što se zapravo može zameniti odgovarajućim setom simbola. Kako funkcioniša samo prepoznavanje, odnoslo parsiranje same sekvence, tako što su uvek kreće od prepoznavanja nekog startnog neterminala, odnoslo uvek je specificiran startni neterminal koji zapravo treba da obuhvati celokupnu sekvencu koja se može prepoznati u skladu sa datom grammatikom, odnoslo koja prikvada nekom u opštom slučaju na arano datom programskom jesiku. Tako da, ovdje je startni simbol, oprav ovaj simbol s, dakle startni neterminal i zbog toga procesiranji uvek krećemo o datla. Kako izgleda po koracima to procesiranju? I zaberu se sve smene koje obuhvataju, dakle koje odgovaraju startnom neterminal, znači kojim će biti prepoznata celokupna sekvenca i to su za nama su ovde prva i druga smene. Nakon toga procesiranje nastavio od takovek i jednom smenom, tako što zapravo taj neterminal se zamenjuje ovim što se nalazi sa desne strane, a to je kao što smo veći rekli skup neterminala i neterminala. Cimnam je na kraju da svaki neterminal sa desne strane budete takođe zamenjeni nekom sekvencom, sve dok ne dobijemo isključivo skup konkretnih simbola koji se mogu naći na ulazu, odnosno terminalnih simbola. Tekada su absolutno svi neterminali zamenjeni sa desne strane odgovarajućim produkcijama, kojima oni odgovaraju sa lejeve strane, mi ćemo reći da ukoliko smo upravo uspeli da uklopimo tu konkretno sekvencu, ona je prepoznata prema odgovarajućem setu produkcija, odnosnovoj gramatici, a ukoliko to nije slučaj, reći ćemo da prosto ta sekvenca ne pripada određenoj gramatici. Da bi smo mogli da urodimo to prepoznavenje koristit ćemo levo ilidesno isvođenje, vidat ćemo u čemu razleke između ta dva, a to i koji ćemo se koristiti i predstavom okviru stabla izvođenja, kako vi smo grafici zapravo prikazali kako izgleda ovo prepoznavenje. Dobre, ukoliko radimo zapravo levo izvođenje, onda je postupak takav, da nakon što i zaberemo odgovarajuću produkciju, u ovom našom slučaju prvu ili drugu produkciju, zato što odgovaraju neterminalnom startnom simbolu s, kret ćemo sa procesiranjem sekvenca obavezno sleva na desno i to tako što menjemo takođe neterminalne u poredku sleva na desno. E sada pošto u ovom trenutku na početku imamo prostu nedoumicu, dali ćemo našo procesiranje, odnosno prepoznavenje da je krenemo od prve ili druge sekvence. U principu implementacijonu rečenu, mi bismo naravno mogli da ispitamo prepoznavanje, ili tako i po prvo i po drugoj sekvencije, ali pošto sada želimo da naravno prekratimo to vreme prepoznavanja, onda ono što nam je negde jasno na nekom zdravorazumskom nivou je, kada gledamo, recimo, prvu sekvencu koju prepoznamo, to je sekvenca A, A, C, B, da ona od svojih terminala ima uprvo isključivo simbole A, C i B koji će se pojavljivati na ulasu. Kada pogledamo prvu produkciju za neterminal S, vidimo da se sa desna strane naleze terminal A, zatim nešto što je neki deo sekvence koji je obugvaćene neterminalom A, gde juš uvek nismo sigurni šta će tu sve biti, nakon toga terminalom C i nakon toga ponovno neterminal B, gde ponovno su neki obugvaćeni konkretni terminal i koji za ovom momentu nismo sigurni šta su, ali u svakom fluče ono što znamo je da ćemo sigurno imati neki simbol A i neki simbol C baš u takvom poredku. Tog sa druge strane kada pogledamo ovdje drugu smenu, jasno nam je da ćemo imati neki deo sekvence obugvaćene neterminalom B, nakon toga dolazi simbol D i nakon toga ponovno nešto što je bukoćeno neterminalom S. Međutim, ono što ovdje vidimo je da imamo dakle konkretan simbol, odnosno terminal D, dok u našoj sekvenciju koji želimo da prepoznamo ovom grammatikom ne vidimo takav simbol, jer se ona se stojiko samo iz simbola A, C i B, tezbog toga možemo da odbacimo ovu drugu smenu i da kažemo da prepoznavanje ove naše sekvence prosto neće ići tom smem. To znači da ove smena služi za prepoznavanje nekih drugih sekvenci, odnosno nekog drugog skupa sekvenci, ali to nije ova naše konkretna sekvenca. Dobro, što znači naše prepoznavanje ide isključivo u potrebom ove prve sekvence. Kada smo to odvučili, al tako, levo izvođenim nam nameće da idemo sljevanu desno pove i ovde desnoj strani ove produkcija ili smene i da menjamo neterminale baš tim poradku. Tako da, ono što znamo sada je da sa desnoj strane prvo nađe ovaj terminal a i praktično njega, naravno, možemo uklopiti sa prvim simbolom, odnosno neterminalom a, koji se nalazi u ovoj naše konkretnoj sekvenci. Nakon toga dolazi, ono što se obuhvata ovim neterminalom a, gde ćemo mi zapravo otići u sve produkcije koje obuhvata ili tako taj neterminal a i pogledati šta sve on može simbolizovati. Nakon toga dolazi malo c i nakon toga ponovno neterminal b. Tako da prvo menjamo neterminal a. E sada ono što je nama ovde nekako implicitno jasno ponovno kada posmetram ovu celog kupnu sekvencu i kada posmetram ovu produkciju po koji ćemo očigledno raditi prepoznavanje, a to je da ćemo kasnije na ići na ovom malo c. Tako da, u koliko mi zapravo želimo da zapravo uklupimo tako našu ovu sekvencu sa ovom ovde smenom, u tom slučaju jedni način da se to desije da zapravo a ovde se upravo zameni jednim terminalom a koji je ovaj koji se nalazi na drugoj poziciju. I sada ono što bi smo pogledali su sve ove produkcije da se s lejve strane nalazi neterminal a i videli bi smo da li imamo nešto tako. Tako da kada pogledamo petu produkciju, vidimo da imamo nešto što je neterminal b pa malo a pa neterminal b. Što znači da u koliko želimo da ovu produkciju svedamo na isključevo malo a to bi značilo da ono što zapravo se nalazi u okviru ovog neterminala b mora biti isključivo prazna smena.
 da je u svom deosekvence, ali tako znači ništa, ono što smo videli kod regularnih automata, da bi to bilo zapravo ništa, neko e psilno. Međutim takvo B ne imamo, tako da nam ova smena neće odgovarati. S odrve strane, što sviče šeste smene, vidimo da tu imamo i neki trak simbolu C, to nam takođe neće odgovarati da smestimo ovdje o A i ostaj nam još samo 7 produkcija koja baš predstavlja dakle terminal A. I vidimo da nama to odgovarat. Kako da ćemo mi iskoristiti ovde zamjenu po 7 produkciji i raći ćemo dobro ovaj neterminal A, menjamo simbolom A i u to momentu dakle mi kažemo dobro prepoznali smo malo A, nakon toga ponovom alo A i nakon toga malo C. I još do kraja da bi smo u celu ovu našu sekvencu prepoznali po ovaj našoj gravateci, ovdje neterminal B trebao da zamjenimo samali B i vidimo da po 8 produkciji to može da se realizuje. Tako da vidimo da zapravo korišćenjem 7 i nakon toga 8 produkcije mi zapravo možemo da prepoznamo ovo konkretno sekvencu u potrebom ove grammatike. Samo prepoznavanje naravno nemora do bukveta prepoznavanju po svim sekvencama već je dovoljno da postoji skup smena, gde će, koje će odgovarati ovo i ovde sekvenci, pa ćemo zbog toga reći da ona prosto može biti prepoznata u potrebom ove grammatike. I ako pogledamo sada, dakle, formalizuvano, upravo to je i urađeno i negde zapis je prosto bio ovakav da se kaže, kreći se od startnog neterminala. Prvo se koristi prva smena nakon toga, dakle, S se menja sa onim što se nalazi sa desne strane, dakle, to je malo A, neterminala, malo C, neterminal B i kao što reko, ciljne mi je da dođemo do i slučivo sekvence terminala. A zamenimo sedmom smen, to je tako samo malo A i B zamenimo osmom smenom, to je malo B i dobili smo upravu ono sekvencu koji smo želili da prepoznamo. Tako da što se tiče prvog slučaja, videli smo da data sekvenca pripada jaziku koji je opisam datom grammatiku. Što siče druge sekvence, hajmo i nju o isto tako da probno. Kada krećemo ponovog startnog neterminala, dakle, ponovog koristimo i slučivo prvu ili drugu smenom, nemažemo ali tako od neke druge, jer uvek su naše sve sekvence koje će biti obuhvaće na ovom grammatiku, moh obovezno reprezentovan je tim neterminalom S u opštom slučaju bilo kojem startnim neterminalom, njega je uvek, to je tačno jedan neterminal u ovoj definistanoj grammatici, ukoliko nije eksplicitno nazlačeno koje je to neterminal ponovog, kao i koja je automata uzimaćemo ovoj prvi. Ok, iz istih razloga, kao i malo preotpada nam druga produkcija, prosto je zbog toga što nemamo symbol D u ovaj konkretnih sekvencije ABCCB, tako da ćemo ponovog koristiti prvu smenom. Zada kada pogledamo baš našu tu smenu, dakle treba da uklopimo to ABCCB sa ovom desnom stranom, koja ponovog al tako obuhvata malo A nakon toga neterminal A, C i neterminal B. Međutim, sada kada bi smo ovde probali al tako da uklopimo, al tako zamo da ovdje ovaj mali simbol A to je ureduo. Međutim, ono što buhvata ovo veliko A, to nismo sigurni da li je sklučivo B, ili je možda BC, zbog toga što nakon toga dolazi ovo ovde malo C. Međutim kada poštu uvek menjamo al tako sljeman na desno levom izvođenju. Međutim kada pogledamo sve produkcije, ove ovde koje obuhvataju A to su 5, 6, 7. Ja stonam je da to nikako nemogu biti 6, 7, zato što one počinju sa A. Međutim, nemože biti ni 5, zato što ona obovezno sadrži malo slovo A. Te praktično ne postoji ni jedna smena, po koje bi smo mi neterminal A mogli da zamenimo, ili sam malim B ili sam malim BC. Izbog toga ova naša grammatika nikako neće prihvatati, odnosno prepoznavatju ovo ovde sekvencu, već je biti prijavljena grješkam. Dobro, to je to što se tiče levog izvođenja. Što se tiče desnog izvođenja, ono funkcioniše vrlo slično, međutim prepoznavenje radimo z desna u levom. Tako da u slučaju ovog ovde A, A, C, B, dakle prepoznavenje bismo radili ponovom tako krenuši od prve produkcije za startne neterminal S, međutim kada njega zamenimo sa onim, što se nalazi na desnoj strani, mi bismo prvo, zapravo, radili prepoznavenje za neterminal B, pa teko onda za neterminal A. Tako da bi smo prvi uklapali po osmog produkciji, a tek nakon toga, po sedmoj. U principu sa ovog nekog aspekta vrlo slično, ali se to razlikuje, sa koje strane krećemo prepoznavenje, i to je razlika između levog i desnog izvođenja. Ok, sa druge strane, sablo izvođenja predstavlja samo graficku predstavu izvođenja u nekim situacijerom može prosto olakšati izradu za dataka. I posljedno kasnije kada budemo radili i kompleksnije gramatike tokom semestra, u glavnom, sablo izvođenja se predstavlja, tako što zapravo koren predstavlja ove startne neterminal i potomke tog korena predstavljaju terminali i neterminali koji se nalaze sa desna strana. Nakon toga svaki od tih neterminala takođe ima svoje potomke i to su upravo ponovoterminali i neterminali koji se nalaze sa desnih strana o neh smena po kojima smo radili prepoznavenje. U ovom našom konkretnom slučaju. Prvo smo prepoznavenje radili po prvoj smeni. Ako se prisetimo joj otaku, potomci su bili a, a neterminal, c i neterminal, b. I upravo ako pogledamo ovde, vidimo da naš ove koren koji je start i neterminal s ima potomke malo a, neterminala, malo c i neterminal b. Dog dalje, prepoznavenje smo radili po sedmu i smeni, gde se sa desne strane nalazi malo a za neterminala. A, a za neterminal b, malo b. Izbog toga ovo ovde naše stavljalo, tako upravo predstavlja to prepoznavenje. Do drugi strane, kada upravo obiđemo ovo stablo i posjetimo listove tog stablo, mi ćemo upravo dobiti sekvencu koji smo konkretno prepoznavali, zato što dakle sve ove produkcije, zapravo odnosno svi ovi neterminali, moraju terminirati na kraju odgovarijićim simbolima sa ulaza i to je upravo ono što smo čekivali da prepoznamo. Ok, to je bio prvi zadatak u okvoru ko ga smo se upoznali sa osnovnim elementima grammatika, videli smo čemu one služe i videli smo zapravo kako se prepoznaju konkretne sekvence, odnosno se provera da li one zadovoljava i upravila datog jezika, levi mizvođenjem, desnim mizvođenjem i takođe smo dodatno videli kako izgleda sama predstava u sklopu. Dakle neka grafica predstava koja je ovde zapravo predstavlja stavlo izvođenja. Sledaći zadatak kaža ovako, pronaći suvišne neterminali u sledeće grammatice sa startim simbolom s i ponovom imamo datu neku grammatiku u kojoj ovde ima čak 16 produkcija da trebu za pronođemo suvišne netermina. I ovo ovde je negde slitu na ono što smo vizili kod automata, gde smo tražali suvišna stanja tako ako bi smo minimizovali konačne automate, jer naravno želimo da imamo što manje zapravo stvarno stanja koja koristimo, a da je li minišemo ona koja je nekoristimo kako nam ne bi komplikovali logiku implementacije toga automata. Voro slično stvar je i ovde. U principu vidićemo kasnije u tog kursa kako prevodimo, odnosno koristimo ove neterminale, odnosno seknice produkcije, kako bi smo zapravo kombinovali sa nekom implementacijom i onda naravno želimo da li minišemo nepotrebne neterminale i nepotrebne produkcije iz grammatiki. Da bi smo uradili tu minimizaciju, zapravo treba da spravedamo neka dva koraka, a to je uklanjanje prvo mrtvih neterminala, a drugo nedostižnih netermina. Šta zapravo prestavljuju jedne, a šta prestavljuju drugi i kako ćemo to prikazati na privar. Mrtvi neterminali predstavljuju oni, korišnjem svojih svog produkcija u okviru ove grammatike nikako ne mogu terminirati. Šta to znači? To znači da oni zapravo ne mogu predstavljati neke realne konkretne sekvence simbola koja se uvek dakle dašavi na ulozio, tako uvek se se stoje odisključivo terminala. Ukoliko postoji neki nedostižnih neterminal, koji prostop njegova desna strana nikada ne može doći do nich listovo ustavlo izvuznjo koje smo videli malo prije, koji sklučivo mogu biti terminalni simboli, onda nam naravno takvi neterminali nisu korisni u obšte, zato što neće efektivno predstavljati ni jednu konkretnu sekvencu i zbog toga ih možemo uklaniti. Nedostižnih neterminali su slični kao i kod determinističkih, odnosno, u končnih automata upravo oni neterminali do koji se ne može doći počeši od startnog netermina. Hajde, vidimo kako ćemo to odraditi na primjelu. Ponovno da bi smo odredili dakle koji su to mrtvi neterminali, mi ćemo da krenemo od toga da odredimo koji su to živi zapravo neterminali i onda
 Naravno, sistem u meliminacije ponemo ćemo doći do toga koji su mrtvi kada prosto odvacimo sve žive iz ovog uloznog skupa neterminali. Dobro, žive neterminali definišamo suprotno mrtvima kao one koje možemo svesti na konkretnu sekvencu simbol, one koji terminiraju. Tako da naš cilje da iz ove grammatike pogledamo sve produkcije i vidimo koji neterminali. Odmah direkturom mogu biti zaménjeni terminalima, što znači konkretnim simbolima sa ulaza ili praznom smenom. I te prazna smena su ovako predstavljene kao epsilon, što znači neprislikavaju se njušta. Odnosno, to će značiti da one terminiraju kao prazna sekvenca u principu. Kada krenemo od ove naših smena u grammatici, mi vidimo al tako. S, sada jesne strane, u prve produkciji ima i terminale i neterminali. Takle, naosnovu toga ne znamo da može da terminira. Naosnovu druga i treće produkcije takođe. Ako ima bar i jedan neterminali sa strane, u ovom momentu mi ne možemo da kažemo da će to s i kada terminirati. Međutim, recimo, za produkciju 6 znamo da neterminal a direktno odmah može biti zamjenjen simbolom d. Odnosno, ako se pojavi simbol d na ulasu, mi ga možemo zameniti konkretnim neterminalom a. Izbog toga kažemo dobro taj neterminal je sigurno živ. To isto možemo uraditi i prema 12. produkciji za neterminal d, koji takođe može biti zamjenjen terminalom d. Tako i takođe za neterminal e, koji vidimo da će terminirati na kraju praznom sekvencom. Tezbog toga znamo da se sigurno može zameniti nečim, odnosno da neće ostati u pozivima ovih neterminala, koji nikako nećemoći da budu zamjenjeni konkretnim simbolima koji se pojavlju na ulasu. Uprvo i našu iteraciji uključili smo uskup živih i sklučivo dakle neterminale, za koji odmah vidimo da terminiraju, doposto i bar jedna takva produkcija. U svakoj naradnoj iteraciji mi zapravo kažemo, ok, ako sada se desne strane, imamo neki od ovih neterminala za koje znamo da su živi, i plus odgovarajuće neke terminale, mi onda znamo da i neterminal koji je sa leve strane takođe će terminirati upravo zamjenom preko ovih za koje smo otkrali da su živi. Šta to sada znači? Pa mi smo otkrali da su živi a, d i e, tako da kad pogledamo ovu ovde našu gramatiku, vidimo da s može po 3 produkciji da se zameni sa simbolom a i nakon toga onim što reprezentuje u sekvenci neki neterminal e. Međutim vidimo da taj neterminal jeće kako tako terminirati, tako da će to značiti da celokupno ovu sekvencu sa desne strane mi možemo zameniti nečim konkretnim, i time zapravo govorimo da i ovo s zapravo može biti zamjenjeno nečim konkretnim, pa ćemo zbog toga i s biti živo. Nakon toga vidimo takođe da i a je živo, međutim za asmo već detektowali da je živo pa nemo potrebio, tako da preseamo za one neterminale za koje to nismo predhodno detektowali. Beza sada preskačemo, zbog toga što sa desne strane ovde imamo f i s, z f i dalje ne znamo ništa, i ovde imamo b i c, u tom slučaju dakle i dalje ne možemo to terminirati. Kada pogledamo za simbol c, odnosno neterminal c, vidimo takođe po 10. produkcij da se on mijenja konkretnim simbolu b, i nakon toga, onim delom sekvenca koji obuhvjeto ovaj neterminal e koje za nas u ovom momentu živ, tako da ćemo da kažemo dobro i c je živo. D i e smo već pokrili, i još je ostalo da vidimo da je f možemo da pokriamo, pa trebno ni po 15, ni po 16. produkcij, tako da u omtronutku smo završeli. I u ovom trenutku vidimo što vam ješ falo i po falo nam b i f il. Tako da li se ovim ovde živim neterminalimo, možemo da terminiramo b i f, pa kada pogledamo po 7. produkciji, b ne možemo dok nismo sigurni da je i f živo. U principu nije nam dovoljno to što će po s moći da terminirati. To znači da samo ovaj ovde delu sekvence može zameniti nečim konkretnim. Međutim, ako ovaj ovde ne može da se zamenili nečim konkretnim, onda naravno ni cela sekvenca takva neće biti iskorišćena. Što zdiča, osme produkcije. Ovo ovde nikada zapravo ne bi smo mogli da je skoristimo određivanju živog neterminala za b, zato što on rekursivno zavisio od samog sebe, vidimo sa desna strane, takođe zavisio od b. I u tom smislu, dakle, naravno, ovo ne možemo iskoristiti. Tako da tipično mi ovde zavisimo od toga, da li ćemo određiti da je f živa? Međutim, kad pogledamo 15 i 16 u sekvencu, ponovu po 16 produkciji ne možemo tako našto dođedimo, ponovu imamo rekursivno zavisnost od neterminala f, a po 15 to je f zavisio od b. Tako da mi zapravo u b zavisimo od f, u f zavisimo od b, izbog toga određujemo da su naši mrtvi neterminali, upravo b i f. Onda kada smo to odredili, je potrebno je da uklanimo sve produkcije koje u sebi imaju b i f, zato što znamo da ih nikada nećemo iskoristiti, jer preko njih je praktično nemoguće formirati ovo stablo izmođenje koje smo videli malo, prej odnosno nemoguće zameniti konkretne sekvence. Tako da u ovom slučaju uklanjamo 7 o prvu zapravo, uklanjamo prvu produkciju koja se drži b, 7, 8, 15 i 16 i time smo al tako već manjeli ovo našu gramatiku za čak 5 sekvenciju. Nakon toga, sljedeće što nam treba je da odredimo koje su nedostižni neterminali. Nedostižno neterminale određujemo prema tako modifikovanoj gramatici, ponovno tako što ćemo prvo odrejiti koji su to dostižni, a nakon toga, tako ponovno meleminacijom doći ćemo do nedostižnih. Uvek se baš uzima ovakav poredak, tako da se prvo određuje koje su mrtvi da bi se oni uklonili, pa tek nakon toga nedostižni, jer prosto ukljennanjem tih mrtvih može se desiti da nešto što bi smo prvo detaktovali kao dostižno, zapravo sada poste nedostižno. Spok toga je to uvek takap oredak se uzvaja. Ponovno, kako i kod končnih automata ako se sećete, krećemo od startnog neterminala u ovom slučaju i tamo smo kretali od startnog stanja i onda prosto gledamo koje sve neterminale vidimo su desne strane, oni zapravo predstavaju delove sekvence koje će biti na taj način obuhvaćeni. I z ovoga ovde, pošto prvu se ovu smenu ne posmatramo, opšter smo nju uklonili, pogledamo drugu smenu, vidimo dostižni su nam C i E. Nakon toga posmatramo, jer tako 9 i 10 za C, oni uključuju E i S tako da tu praktično nevamo nikad punovo informaciju. Iz E uključujemo ponovog C i E, to je već uključeno, tako da ovde isto nemo nikakvu novu informaciju i samim tim smo zapravo obradili sve ili tako. I detektowali smo da su nam dostižni S, C i E, a da su nam nedostižni u ovom slučaju neterminali A i D. Zbog toga ćemo ukloniti i sve smene koje su obukvoćene nedterminalima A i D, tako da uklanjamo i 4, 5, 6 smenu, uklanjamo zatim 11 smenu i ove druge smo na arno već uklonili. E sad obo je vaš klasičan bio primer zašto je bilo dobro upravo uzeti ove redoslet. Zbog toga što primećujemo da nakon što smo uklonili prvu smenu mi vidimo da A više nije dostižno, ili tako iz S. Samim tim međusovno A i D su povezani pa oba su praktično nedostižna i na taj način takođe uklanjamo ovog F, mi smo videli da ja nedostižno. Izbog toga da smo prosto radili drugačijim poredkom, uza u opštom slučaju možete dobiti i drugačije rešenje, tako da ovoj poredak je naravno jako bitan. E, nakon što smo dakle sproveli ovo uklanjenje produkcija, videli smo šta nam samo ostaje, to je na kraju istiživo ovaj ovde skup produkcije, koji je dostav manji u odnosu na inicijalni skup produkcije u gramatici i vidimo da smo time zapravo imali dosta produkcija koje su bile suvišne. A to zapravo samo znači da mi suštavski u konkretnom prepoznavanju sekvenci, kao što smo to radili u prom zdatku nikada ne bi smo nije iskoristili neke od o nich drugih i samim tim su one od potvenosti nepotrebno našeg gramatici, pošto nikada eksplozitno neće tuni figuri sa tim. Slednji zadate kaže nači desno linarno gramatiku bez suvišnih na terminala, koji odgovora konačnom automatu sa slike. U principu ove zadate ki je dobar uvod u malo razlješnjenje u opšte koje sve vrste gramatika imamo.
 koji ovde vidimo je su desno linerne grammatike i desno linerne grammatike zapravo predstavljaju bez kontekstne grammatike i one se odlikuju zapravo po svom obliku, tako da zapravo svaka produkcija izgleda tako što postoji najviše jedan neterminal na desnoj strani s mene. Naravno s leve strane je uvek jedan odgovareći neterminal koji je bukvata tu neku sekvencu koji je predstavlja desna strana. Tako da postoji najviše jedan neterminal na desnoj strani s mene i u koliko on postoji nalazi se skroz desna. Ove bez kontekstne generalne grammatike su specificne po tom, da što se prepoznaju potisnim automati. U momentu mi je šuvati nismo radili potisne automate. To nam je sledaća oblast. Ali u principu ukratko rečeno potisne automati predstavaju neki stek, na kome se zapravo pamti stanje. To stanje automata se pamti kroz nekoliko osnovnih gradivnih elemenata i stanje se čuva na steku. Regularna grammatika predstavlja specijalni slučaj koji se dobija transformacijom iz desna lina armogramatike i one se može prepoznavati konečnim automatima, odnosno automatima koja smo videli do sada, zato što ovi automatiom ugućavaju pamćenje konteksta. Zapravo kontekst se kod konečnih automata pamti u vidu trenutnog stanja i simbola koji se pojavljuje na ulazu i koji predstavlja neki prelaz u okviru tog automat. Tako da, u tome se prosto razlikuju ova dva tipa grammatika i prepoznaju se na različite načine. I u principu primjere ćemo vidati u sledećime zadacima, a upravo ove dve vrste grammatike se koriste za konstrukciju automata, dakle potisnih ili konačnih automata. I sad naš cilj ovog zadatka je da zapravo formiramo desno linernu grammatiku, koja je odgovora o ovom konačnom automatu sa slike. I upravo, dakle, kako se radi to prepoznavenje, odnosno transformacija, je veoma jednostavna. Tako što, za svaki prelaz koji postoji u okviru ovog ovdva automata mi kažemo. Znači, ono što znamo je od tako iz automata, da, ako se trenutno nalazimo u stanju a i pojevi se nula na ulaznu, prelazimo u stanja a i b. I to se grammatikama predstavlja upravo ovako. Dakle, pravimo smenu za svaki takav prelaz, tako što kažemo. Trenutno stanje, ovo što se nalazi sa leve strane u ovom slučaju i neterminal a, a sada je sna strane, on se može zameniti nekom sekvencom koja počinja sa 0, dakle, to je ove simbolu koje se nalazi u na ulazu i al tako, i nakon toga, polovo neterminalom a koji je obukvata al tako ono stanje u okviru u koga se prelazim. Takođe, pošto smo ovdva imali al tako nedeterministice u tomatu u ovom slučaju, pa možete pređa u stanje b, to će takođe odgovariti ovoj drugoj produkcij koja kaže, dakle, neterminal a takođe obukvata i sekvencu koja počinja sa 0, a nakon toga sledi sve ono što se može spakovati pod ovaj neterminal b. Tako da na taj način, praktično svaki od ove kombinacije trenutno stanje simbolu na ulazu i prelaz u odgovarajuće stanje, možemo baš ovako predstaviti. Na primar, sledeće, i za toga ide al tako iz stanja a, ako dođe jedinica prelaz i su stanje e, i to ćemo ponovno prikazati al tako kao neterminal a, zapravo se može zameniti, sekvencu koja počinja sa jedinicom, a nakon toga sledi neterminal e. I tako nastavimo za sve ove kombinacije koje se nalaze u okviru našeg automata. Iz b al tako ako dođe nula prelazimo u e, to će značiti da postoji produkcija gdje sa leve strane b, a sa desne strane nula pa neterminal e. Ono što još dobro potrebno uraditi je označiti nekako stanja prihvatanja, odnosno terminale koji će obuhvatati al tako ovo stanje prihvatanja i nićemo predstaviti praznim sekvencama gdje ćemo reći pošta b stanje prihvatanja, ono može terminirati i praznom sekvencu. I to će zapravo označavati da negde naše prepoznavanje, konkretne sekvence, kada to prepoznavanje se završava u okviru ovog neterminala b u onom stablu parciranje al tako, završava kao list prazna sekvenca, dakle ništa se tu nam očekuje, već se zna da je to tada sekvenca prihvatanja. U principu to naravno radimo za svakostanje prihvatanja koje postoje u ovom automatu, to se zanam se stanja b i d i zbog toga neterminali b i d oba imaju t epsilon prelaz. Tako da u principu ovo je dosta jednostavno formirati gramatiku iz nekog od ovih automata, ono što vidimo, ova gramatika zadovoljava uslove desnolinerne gramatike, zbog toga je što smo rekli da desnolinerna gramatika karakteristična po svom obliku, a to znači da ako sa desnj strane, desnj strane može imati najviše jedan neterminal, dakle vidimo da postoje s menem koja nesadrženi jedan i to su 6 i 13, a ukoliko postoji neterminal sa desnj strane, on se obavezno nalazi krajnje desno. Tako da ova naša gramatika zapravo odgovara uslovima desnolinerne gramatike. Je sada na nekom logičkom nivogu takođe potporno ima smisla zašto možemo uprvodu urodimo u transformaciju i kada malo razmislimo je o tako što mi zapravo prestavljamo automatom. Pomi automatom kažemo, aha, dakle sada se nalazimo u nekom startnom stanju koje je stanje a i koje će inoče, dakle to je još nisam napomenalo, u ovaj našu i transformisom na gramatic, i obavezno biti startnje neterminal, nevzako. Dakle našo procesiranje, odnosno prepoznavanje, krećemo u togo startnom stanja. Ako se pojavi nula na ulazu, dalje procesiranje nastavljamo od stanja A takođe ili stanja B. Što znači, ta neka sekvenca nam počinja nulom, a nakon toga nastavljamo procesiranje u istom tom stanju ili ovom stanju B. Ukoliko smo recimo prešli u stanje B, pojavi se nula. Sad imamo veći da je u sekvenceko je nula nula i nakon toga prelazimo u prepoznavanje u stanje E. I to praklicno isto, jer tako radimo i sa ovom našom gramatikom, gdje kažemo, a-ha, ovim našim startnim neterminalom, o bukoćene su sekvencekoje počinju sa nulom, a nakon toga može biti nešto što takođe se nalazi ili buhvata ovej neterminal A ili o buhvata ovej neterminal B, pakos smo već tamo uzeli primvr sa B, reći ćemo, ha, dobra, sledeći je nula, ili tako ponovog terminal, nakon toga ide E, a onda kad pređemo u E, ponovog ili tako vidimo kako nastavimo. Tako da u podprnosti možemo uspostaviti ovu korrespondentiju. I sad ovopero ovog našog zadatka takođe traženo nam je da tu gramatik koje formiramo, formiramo bez suvišnih neterminalom. Što znači da bi smo mi ponovog njom pogledali i odredili ili tako, odnosno, minimizovali, e? Što znači, užprvo bi smo sprovili fazu iliminacije mrtvih neterminala, nakon toga fazu iliminacije nedostižnih netermina. Za mrtve neterminale, već smo rekli, oni nam nekoristeničemo zbog toga što služi isključevo u opisivanju bezkonačnih sekvenci. Dakle, ni jedna sekvenca koja neterminira, praktično, nije konačna sekvenca, odako, to su sve bezkonačne sekvence, takve nam ne trebao i ali u praksi nećemo imati, izbog toga takve neterminale iliminišemo. E, sad, ovde, kada bi smo ponovog krenuli od formiranja živih, živih neterminale, o tako, dakle, ponovog, bi smo prvu uvrstili ove koji terminiraju, što znači b i d direkternu u ovom slučaju, a nakon toga sve one koji terminiraju preko isključivo ovih neterminala, što znači imamo a po drugoj produkciji, zatim, posle toga, imamo i c, i nakon toga, što nam ješ ostalo što neuključeno, e, ali tako, da li e takođe možemo da terminiramo, pa vidimo da e ima izključivo ove rekurzivne smene, odnosno da izključivo nastave prepoznavanje u e i mi se smislo, naavno, mi znamo da to zapravo predstavio naše stanje greške i da se ono može i eliminisati, a ono će upravo biti mrtvo zbog toga što znamo, da nakon što smo jedno mušljim stanje greške, mi zapravo nikada više ne možemo i zači iz tog stanje greške, tako da nikada nećemo imeti neku konkretnu, o tako sekvencu koje ćemo završiti i o tako, izbog toga mi ovo stanje greške možemo i ukloniti efektivno, a to ćemo u samoj gramatici viditi po tome što ono jednostavno nije živo, već je mrtvo, izbog toga će biti uklonjeno, kao i sve drugi sekvence koji uopšte negde obuhvjetaju to, e što znači uklonićemo 3. smenu, 4. smenu, 10. smenu i 14. i 15. smenu i ti mi ćemo minimizovati i naš automata efektivno. Nakon toga potrebno mi je da odretimo koje su to nedostižno stanja i sad nakon ove eliminacije, krenućemo od skupa dostižnik stanja i za početak, naravno, dostižno stanji je naše startno stanja, a nakon toga, tako vidimo da dolazimo i do stanja B,
 E više ne moramo opšta posmatramo pošto smo ga uklonili. Od B takođe dolazimo do C. Od C. Ne dolazimo nigde. Tako i ono što nam je još upitno da li opšta možemo dođemo nekako do D. Pa vidimo da D je referencijronu isključivo iz D. Tako da pošto je nedostižno izbilo u kog od obih drugih neterminalna koji su nam i šugaj kuključeni u našu kromatiku. U tim je vidimo da je D postalo nedostižno. Izbog toga ćemo ga takođe ukloniti. I na taj način kada zada uklonimo i sve smene koje su odnose na D, a to su smene od 10 do 13, mi smo zapravo eliminicali nedostižne neterminale i njihove produkcije i minimizavali smo našu kromatiku. I evo kada pogledamo celog kupne one kromatike mi imamo nekoliko produkcija čime smo značeno smanjili. Top, naš sledic izladatak kaža ovako. Data je desnolinerna grammatika sa startim simbolom a. Pod a treba da transformišamo datu grammatiku u regulernog grammatiku. I pod b treba da konstruišamo nedeterministicke konečne automat koje odgovara datu i regulernog grammatici. Ok, ono što možemo vidati u okviru ove grammatike je da ona definitivno odgovara pravilima desnolinerne grammatike. I to smo videli po definicijel tako, ajde o še jednom rekli smo sa desne strane maksimalno može imati pojedan neterminale. I ukoliko po soju on mora biti krajnje desno. I kao što vidimo to je upravo i ova grammatika, dakle u potpnosi za dovoljava sveta ustaneta. Međutim ova grammatika nije regulernog grammatika. I to znamu tako što o ovu grammatiku mi ne bi smo mogli da prepoznamo konečnima automatima. Zbog čega ne možemo da je prepoznamo konečnima automatima? Zato što videli smo da taj kontekst koji je državamo kod konečnih automata državamo upravo postojanjem trenutnog stanja i simbola koji se nalazi na ulazu i neko prelaza koji u tom slučaju postoji u ovom slučaju i tog da je bio neki neterminal koji se javlja sa desne strane. Međutim dakle uvek obavezno postoji jedan konkretan simbol koji se pojavlja na ulazu i nakon toga prelazimo u neko narodno stanje u slučaju konečnih automata a u slučaju grammatika nakon tog jednoj terminalnog simbola prelazimo odnosno dolazimo do nekog neterminala sa desna strane. U ovom slučaju mi imamo prvu i drugu smenu koje nas dovoljavaju taj u slučaju i koje imaju po dva terminala na početku. Što znači mi bismo imali neki simbol na ulazu, ali nakon toga ne bi smo znali gde skačemo na dalje u prepoznavanju našem konečnom automatu zato što nam se ponovopojavlja simbol na ulazu. Te tako oba prve dve smene ne bi nikako odgovarile u opšte prepoznavanju konečnem automata. A sa druge strane, ni treća smena takođe zbog toga što ona uopšta ne čeka nikakav simbol na ulazu već direktno prelazi u neko novostanje. Tako da ne odgovorite o nekom formalnom zapisu regularne gramatike i naravno ove deskno-linjerne gramatike kao što je ročeno u ovom svojom obliku bi naravno bila prepoznovane potistnim automatima što ćemo i vidati kasnim. Iđutim naš prvi cilj je da transformišemo ovu gramatiku u regularnu gramatiku i da bi smo to mogli, prvo moramo da pogledamo neki skup pravila, gde je zapravo ta pravila su ovdje nekako formalno napisana, ali i suštinski obukvata i ubaš ovo što sam sada rekla, odnosno želimo da formiramo to neko stanje koje bi odgovaralo prepoznavanju konočnim automata. Da bi smo to uradili za početak. Svaku smenu koja s deskna strana ima isključivo neki terminal, je otak, odnosno ima isključivo terminale, što smo recimo videli u slučaju ove druge smene, treba zameniti sa identičnom smenu, ali koja na kraju mora imati netermina. Da bi se dovoljavala uslove regularne grammatike, tako da znamo da uvek nakon prepoznavanje konkretnih simbola mi dakle skačemo na neko novo stanje, što znači, pošto to stanje reprezentovanu neterminalom, mi nakon tog skupa terminala moramo obovozno imati jedan neterminal i to nam je ovde oznočeno. Sada naravno pošto transformacijom grammatike, mi želimo da zadovaljimo neko očekivanu formu, ali ne želimo nikako da izgubimo pri tom suštinu, onda ovej neterminal ne smeljate zapravo opisivati nikakvi i kakvi novih skup sekvenci koji prethodno nisu ovde bila prepoznavanje. Tako da ne smeljamo unositi nikakav novi skup informacija. Zbog toga je ovej neterminal uvek neterminal koji zapravo predstavlja jednu klasičnu epsilon sekvencu, odnosno ništa nemenja na ulazu. Time kada mi zamenimo sad ovej neterminal sa ovim konkretnim ničim, odnosno epsilonom, mi ćemo ponovos suštenski dobiti samo ovo duplove i jedino što ono sad zadovoljeva formu regularnih grammatika. Tako da ciljnam je naravno da zadovaljimo tu formu, ali da pritom ne uvedemo preda se prepoznaju neke sekvence koje sad ranije nisu prepoznavale, a takođeni naravno da izgubimo prepoznavanje nekih konkretnih sekvenci koje su predhodno tu postojova. Zatim, sljedeće stvar koje nam sajavlja je situacija kada imamo gomilanje terminala i nakon toga dolazi neki neterminal. Kao što je slučaj sa ovom ovej prvom smen. Pošto to ne želimo da imamo, dakle ono što mi želimo je da isključivo imamo jedan terminal pa nakon toga neterminal i onda moramo doći do te formu. I kako ćemo sad da mi zapravo zameniti ovo formu koju imamo, gde smo imali otakon neko a, pa nakon toga smo imali šta beše a, b, b. Dakle, pošto želimo da imamo isključivo jedan terminal, a nakon toga neterminal, da bi smo to mogli da uradimo, mi ćemo zapravo da transformišemo ovu našu smenu i da kažemo a dobro, sad ćemo da uvedemo jedan novi terminal, ne terminal pardon, pa ćemo da kažemo a dobro. Imamo a na početku, a nakon toga nam dolazi neki neterminal koji dakle reprezentuje neko novo uvedeno stajnje. Međutim, ovo naravno sad ponogo mora terminirati, mora doći do toga što je inicijan od dakle bukvatoloto a, pa ćemo zbog toga naravno mi sad reći, aha dobro. Taj nov uvedenit neterminal nam zapravo predstavlja malo b, pa nakon toga je neterminal b, a za to već dalje u grammatici znamo kako procesiram. U principu, ovo nam je neophodno da bi smo uvek zadovoljavali tu formu da imamo jedan simbol na ulazu a nakon toga neterminal, što znači jedan simbol a nakon toga novo stajnje u koje prelazimo. I naravno moramo doći do toga da ponovu imamo potpuno identično ili tako skup sequenci, tako da vidimo da kada zapravo krenemo prepoznavanje od ovog ovdje neterminala a, tu sequenciu prepoznamo kao konkretan simbol sa ulaza a, a nakon toga nešto što je bukvaćeno neterminalom bb, ali vidimo da to zapravo predstavlja konkretan simbol b, a nakon toga ono što je bukvaćeno neterminalom b i što je zapravo identično ono me što smo imali na početku. U nekom opštom slučaju, mi bi smo naravno ovde mogli imati a, b, c, d, b, dakle, proizvojno nagumilavanje ovih ovde terminala, ali ono što bi smo u tom slučaju radili je da bi smo reklje, ha dobra. Ponovno, kao i da sada, mi ćemo krenuti od toga da imamo jedan terminal na početku, nakon toga neki neterminal. Zatak šta nam je taj neterminal? Taj neterminal ponovno predstavlja neki skup sequenci koji počini u ovom slučaju sa b, a nakon toga ideje al tako nešto što je bukvaćeno ovim nekim drugim netermina. Pa onda šta nam je zapravo taj neterminal? Aha, pa taj neterminal je zapravo neki skup sequenci koji počinju, ovo pa, koji počinju sa malim c, a nakon toga ponovno imaju nešto što je bukvaćeno s ovim ovde d, b. Još mi je ostalo da vidimo šta je to d, b, i to je zapravo skup sequenci koji počinje sa malim simbolom d, a nakon toga ideje na terminal b i to je ono što već imamo i što je zapravo bukvatalo sve o. Tako da uklonili bi smo smenu koja je ovakva i zapravo je zamijelio ovakvim ovde smenamo. Kako naziva tove sme? U principu možete nazvati bilo kako, prosto najenostavnije način i možete nazvati ovako kompozitno taj neterminal prema onome što će zapravo sve bukvatiti, i tako ćemo sigurno biti da je to jedinstven zapravo naziv, ono što nam je potrebno je da bude jedinstven u gramatici i da kasnije ga rašlanimo koji god naziv uzeli potpuno sve jedno ovo je samo jedan od premjera kako možemo nazivati takve neterminali. I dobro mzolšnijski predstavlj ovo pravil ove dva, napisano na ovako neki malo formalni način. I ono što nam je ostalo još treće, a što takođe ne želimo, činimo mi za smet to takođe imali kao primjer u ovom ove zadatku, da, baš ova treća smen. Videli smo takođe da ne želimo nida čisto pređemo u neku sledeće stanje bez pojave konkretnog simbola na ulozo, to nemo da finisan u ovoj rovih automata. Konacnih, tezbog toga, bilo koji skup smena koji izgleda ovako, dakle, menja nam a sa nekim b, a prelazio b, a takođe imamo skup smena gde b prelazio nešto, prelazio nešto drugo, prelazio nešto treće i te desne strane su ovde predstavljene simboličke sa ovim alpha 1, alpha 2 i alpha n, naravno to može biti u principu, bilo šta? Čemo zamenite se tim da a konkretno prelazio u to alpha 1, alpha 2 ili alpha n, a, a prelazio b, čemo bukvalno izbaciti.
 Znači u konkretnom slučaju ako smo imali a prelazi b u automatuel, tako koj bi zapravo bio reprezentovan, a ovdje konkretno dakle da s ovom skup sekvenci koji je prepoznat neterminalom a je zapravo prepoznat i neterminalom b, a tamo negde smo dalje u gramatici imali da ta skup sekvenci zapravo predstavlja nešto što počinje sa a, nakon toga dolazi c, ono što ćemo mi uraditi i recimo, takođe predstavlja nešto što počinje sa b, a nakon toga dolazi neko d. Ono što ćemo mi zapravo reće, ha, dobro uklonićemo ovdje s mene, i reći ćemo a zapravo prelazi, odnosno, buhvata ov tako sekvence koje počinju sa malima nastavlju i s načim što predstavlja c. I takođe, nešto što počinje sa malima, a nastavlja se prepoznavanjem po dovim d. Tako da ovu ovde se s menu ćemo naravno ukloniti. I kad smo to sve videli, sa trebao da transformišemo opravu našu gramatiku i kako ćemo to uraditi. Pa tako što uklonimo, ali tako da ovu ovdje seto i prepoznamo koje to zapravo nama sekvence ovde ne rade kako treba. Dakle, imali smo naš početnu gramatiku koje bilo ovakva. I videli smo je ovo ovde s mena, nima nikakav neterminal na kraju, tako da ćemo morati da je dodamo taj neterminal. I kada pogledamo kako izgleda da pretransformiša na ovdje gramatika, pa vidimo da smo om ac dovedali neterminal epsilum i naravno smo morali da ga termini. Namo ovaj cmo rekli, pošto ne dodamo nikakva u nogu informaciju, kada imamo ovako skupi sljučivo terminale, dodamo na kraju neterminal koji zapravo reprezentuje praznost menu, odnosno ne reprezentuje ništa. Nakon toga, ovo što nam je potrebno, je da neamo al tako ovu sekvencu uzastopnih konkretnih terminala, pa ćemo zbog toga prvu i drugu transformisodi, tako što ćemo reći da a, isto predstavlja što i mali simbol a i nakon toga nekina terminal, gdje je to bb, ponovno predstavlja skupi sekvencija, koji zapravo počinio sa malim b, a nakon toga ide neterminal b, isto to uredimo i za drugu smenu, i zapravo transformisano, onda to izgleda nekako ovako. Još da primenimo onu treću smenu, nju smo želi da primenimo al tako na ovo b, b prelazio a, mi zapravo uklonimo b prelazio u a, i u mesto t smene ubacimo al tako sve ono što je konkretno zapravo bilo to a, a je bilo konkretno iz prve i treće smene al tako ovu ovde, tako da ćemo zbog toga dodati 6. i 7. sekvencu koje zapravo to predstavljaju, sve ostale sekvenci ćemo zadržati, naravno, tako ne smo ukloniti sve druge sekvence za a, ili sve druge sekvence za b, nada je bože, zbog toga što, naravno, one dopunjuju odgovarijići segmenta u gramatici i dostižni su, i u tom smislu se, naravno, koristimo. Eto, u principu, ovaj smo imali nekaj pripravilo, koja samo po sebi nisu ništo posebno kompleksni, i generalno na logičkom nekom nivo ukoristimo i da bi smo mogli ovu gramatiku da transformišamo u jedan konačni automat, i kada vidimo, zapravo, kako bi smo mi ovo našu gramatiku i preveli u konačni automat, vidimo da bi smo to dosta jednostavno uradili, u ovom slučaju, dakle, isključivo u nedeterministički automat, naravno, zbog toga što vidimo da, ukoliko uzmamo da nam je startni simbol, odnosno startni, neterminal startno stanje a, nakon što se kojavi a na ulozom, mić možemo da pređemo i u ovo ovde stanje, a možemo da pređemo i u ovo ovde stanje, pa će zbog toga, naravno, automat biti nedeterministički, međutim, isto kao što smo malo pre, iz ono konačnog automata radili prevodu u gramatiku 1 na 1, al tako, isto tako, sada to možemo da vratimo, i ponovo al tako da formiramo nedeterministički automat, tako zapravo sprovedimo 1 inversni postupak te konstrukcije. I vidimo da sva ona stanja al tako, odnosno, neterminali, koji su sa desna strana imali slučivo epsilom prelas, da su sada označeni kao stanja prihvatanja. Ok, u principu razlog zašto smo malo pre, to bi se samo vratila, i ako smo rekli da formiramo desno linearnu gramatiku, a iz ovog neku konačnog automata smo predstavili ovakvu jednu gramatiku, jasno da ovo gramatika istu vremeno i regularna, zadošto, praktično, regularna gramatika predstavio specijalni slučaj ove gramatike, koji prosto imaš neke dodatne uslove, tako da videli smo da svaka takva gramatika istu vremeno predstavlja i desno linearnu, dok desno linearne gramatika ne mora predstavljati bez kontekstnu, ne mora predstavljati par do regularnu gramatiku, odnosno, potrebno uraditi ove dodatne transformacije, kako bi smo mogli da datu gramatiku transformišemo u konačni automat. Dobro, nakon uvoda, u kojome smo opisali, dakle, pojem, gramatika njihovu podelu i koje im je zapravo namena i funkcija, kao i celog funkcija parsiranja, zapravo sada ćemo videti nekoliko primera, gde ćemo zapravo pokaziti kako sve to funkcionišće u praksi, naravno, za početak na nekim manjim primarima, gdenom je cim da na kraju dođemo do onoga, zbog čega mi zapravo i radimo na kraju sve ovo, a to je da vidimo kako se zapravo o gramatikom specificiraju u funkcionalnosti nekog programskog jezika i uopšte njegova struktura. Da vidimo, naprimer, kako koristimo gramatiku, da bi smo definicili šta uopšte predstavlja program u nekom programskom jeziku, od čega se sve sastoji, kako izgleda deklaracija promenljivih konstanti, metoda, specificacija, tela metode, potpis metode i tako daje. Međutim, kred ćemo sa nekim jednostavnijim primarim, da bi smo prvo savaladali neke osnove. Gde će ti primari biti nekako podeljeni u dve grupe, pa za početak imamo jednu, koja je jednostavnija ponovog grupu, koja predstavlja praktično problem, gde nam je već data neka gramatika, i gdenom je prosto treba da obišljemo skup sekvenci, da je će biti prihvata na, odnosno, prepoznava uspomoci ove neke konkretne gramatike. Gde je naravno, taj skup sekvenci treba nekako da bude uopšten i predstavljen nekao nijegih nekih konkretnih sekvenci koja se prihvata, i već je dakle u nekoj obštoj formi svih takvih sekvenci. Kako ćemo zapravo rešiti ove problem, pa najblje je nekako ilustrativno da probamo da predstavimo ovo gramatiku i jedna od načinu na koji smo već videli da je to moguće uvraditi je upravo korišnijem onog stabla izvođenja koji smo videli u prvom zadatku koji smo imali u okviru danasnjij elekcije. Tako da ideje je da krenemo od startnog neterminala koji opisuje sve ove sekvence i da vidimo kako da je zamenom tog neterminala, ono što je sa desne strane možemo da dođemo do neke konkretne sekvence, odnosno da to uopštimo maksimulno u neki skup svih sekvencij koji će ovdje biti prihvatani. Da bi smo generisali tako jedno stablo, treba prvo da vidimo od koji smo na krećemo i pošto znamo da krećemo od startnog neterminala, odnosno startnog simbola, znamo da to buhvata prvu i drugu smenu. Tako da mi smo suštini možemo odlučiti za jedno od ove dve. U tom sluču je dobro, naravno, analizirati konkretne smene kako ne bi smo izgubili na opštosti i kako bi smo zapravo je tako odlučili baš od koja u dove dve smene mi krećemo. I kada pogledamo sada ove dve smene, vidimo da prva opisuje neke sekvence koje počinju jedinicama i nulama, zatim se rekurzivno nekako ponavlja praktično ta sekvenca i nakon doga na kraju dolazi neku gomilanje, odnosno grupisanje nula. Doga druga seknca, u druge smena, zapravo predstavlja sekvence koje počinju simbolom a, nakon doga prepoznavanje se nastavlja u 3. i 4. smeni za neki skup, odnosno, da tako kažem skup podsekvenci, koje su obuhvaćene tim neterminalom a. Sada, ono što možemo primjetiti analizom te prve dve smene je da se ove prve rekurzivno nekako ponavlja, tako da, nil tako imamo neki skup podsekvenci, dopno primjer kada pređemo u ovo prepoznavanje po drugoj smeni, a u tomatki se više nikada ne možemo vratiti na prepoznavanje po neterminalu S, tako da, sa tej strane, okoliko bi smo naše prepoznavanje smena zapučali upravo drugom smenom, mi bi smo izgubili neki skup sekvenci koji bi bio o bukvaćem prepoznavanjem i po prvoj smeni. Zbog toga, praktično kada hoćemo da upštimo maksimalno priču i da ne izgubimo ili tako ni jedan skup sekvenci, kako nam je ovdje cilj da prosto opišemo jezik, odnosno, ceoskup sekvenci koje će prepoznavatio ova grammatika, mi naravno ne smemo preskočati nijednu smenu, ukoliko ona nije suvišna, a ovdje nije jedna nije. Ten na taj način moramo počati sa prepoznavanjem po prvoj smeni. Dobro, kada smo to odlučili, hajdi sad da vidimo, kako ćemo zapravo iskonstrujiti neko stabilo izvođenje, dakle, krenulim smo od inicijalnog neterminala, i odlučili smo da dalje prepoznavanje idemo po prvoj smeni, zato što u time ne gubimo na opštosti. Dakle, to nam je opštija smenu.
 od one druge, što će reći da uvek od ove prve možemo doći do druge, međutim od druge nikada više ne možemo doći do prve, sve bako toga prosto naravno usvajamo taj redostat. Ja sad pošto ovdje imamo rekruzivno ponavljenje, u principu vi naravno kada predstavljete ovo neko stavlo izvođenje i to ne radite za neku konkretnu sekvencu, onda je potrebno uočiti što više različitih sekvencij, tako da u ovom slučaju naravno možda možemo izlući zakloček i iz jedne primene samo po određenoj smenim, međutim pošto vidimo da su ova smena rekruzivno poziva, da bi smo bili sigurni da ćemo dobro schvatiti kako zapravo izgleda opšti oblik ovih sekvencij, najbolje je da ponavimo više puta izvođenje po ove prve smeni, da bi namesto prosto tu ostalo negde, da se to može rekruzivno ponavljati. Tako da u našem stavlu izvođenja mi ćemo dakle krenuti od startnog neterminala, zatim reći on se naravno grana u sve ono što se nalazi sa desne strane, zatim to je, želimo dalje da razvijemo, odnosno da prepoznajemo smene, odnosno sekvence koje pripadaju po tim es i da ne bi smo gubili na opštosti, mi ćemo da ponavljamo je al tako određeni broj puta ovo prvu smena. U principu koliko puta ćemo ponavljati, pa ovdje možemo ponavljati dakle jako veliki broj puta, prima samoj gramatici i beskonačnj broj puta, jako naravno u realnom slučaju želimo da imamo neku konkretnu smenu koje će se završiti, al tako neku konkretnu, u konačnu seqvencu. Tako je ćemo mi odestaviti 3 tačkece i reći ćemo dobro, ovo može da se ponavlja n puta, vidi ćemo kasnije koliko je to n i dakle kada pravimo, budemo pravili opšti oblik tih sekvenci. Nakon što smo više puta ponovili ovo prvu smenu i za neku konkretnu sekvencu ovako eventualno prepoznali ove prve simbole, dalje s ako hoćemo da terminiramo u nekom trnutku, ovo to možemo jedino uraditi i korišnijem druge smene, pošto vidimo, ovo prvo je istručivo rekursivno. Te sa te strane ponavljam prve smene i nikada nećemo terminirati našu sekvencu, zbog toga moramo iskoristiti ovo drugu sekvencu, ovršno u ovom trnutku, al tako to nam je zapravo ova ovde sekvenca, kojem prepoznavanje dalje prenalzimo po neterminalu a, te samim tim više ne ponavljamo rekursivno ove i neterminalu s. Tako da ćemo to uraditi. Ja sad jednom kada smo praktično zamjenili ovo s sa nekom sekvencom koja počinje simbolom a i nakon toga se nastavlja prepoznavanjem po potencijalno smenama, koje dakle podrozumevoju odnosno odnosno sa se na ove neterminal a, mi se naravno nikada više ne možemo vratiti na prepoznavanje prve i druge sekvence, prosto po specifikaciji sami gramatike nevamo više ništa što nas vraće na neterminal s. Tako da ćemo se vratiti u 3 i 4 smenje. E sad, kada ponavljamo podladamo 3 u 4 smenu, tu se ponavlo nalazimo pred istim pijinjem, kao što smo imali za prve dve smene, jer smo sad došli do toga da treba ovaj neterminal a, da zamjenimo nečem što se nalazi sa desna strane, bilo 3, bilo 4 smene i pozdravio se pijinje, da li ćemo ovdje iskoristiti uprvo 4 ili 3 smen. Isto pričakav i malo pred, dakle da ne bi smo gubili na opštosti, vidimo da se 3 smena ponavlja rekurzivna. I da mi 3 smenom možemo dooći do 4, prosto zameno moh ovog a, jer 3 smena ponavlo ne može nikad terminirati jer je rekurzivna, međutim i 4 smena nikada se više ne možemo vratiti na a. Tako da, ako bi smo u ovom tenutku reštili da terminiramo a, po 4 smeni, mi bi smo ponavlo izgubili na opštosti, jer ne bi smo pokrili sve one sequence koje će proći i kroz 3 smenu, pa ćemo zbog toga upravo iskoristiti tu 3 smenom i nju, kao i malo premožemo iskoristiti proizvoljn broj puta, čisto da bi smo je to utvrdili da se ovo prosto rekurzivno ponaši. I na kraju, kada naravno koćemo da terminiramo ovo naše prepoznavanje, mi ćemo završiti 4 smenom i tu praktično smo završili izvođenje ovog nekog našeg stabla. Dakle, ja sve da smo mi ovde formirali stablo ponamo za neku konkretnu smenu, jer tako, za neku konkretnu sequence u partom i brlo jednostavno možemo i da izvedemo to konkretnu sequence, međutim sam naš izbor smena je upravo je bio u toj sversi da napravimo što o opšti u sequence, koje će na neki način praktično sadržati sve pojedinačne elemente koji su bili uklučeni, koje će proći kroz sve smena u koliko je to moguće i zakvajujući koje će nam biti jednostavnije da izvedemo neki opšti oprek. Kako ćemo sadati izvedemo opšti o blistih sequenci? Pa treba da obiđemo ovo naša stabla. Stabla su prizipu uvek obilazili sleva na desnom. Sleva na desnom je o tako i ono što radimo za konkretnu sequence uvideli smo imalom preo onom prvom zato koji se nadili prepoznavanje konkretne sequence, opilazimo listove koji zapravo predstavljuju konkretne simbole, konkretne terminale i time definišamo koja je to naša sequence ili u opštom slučaju definišamo taj neki skup sequenci. Sada dakle kada krećemo od korena kada krećemo od korena, mi dakle obilazimo sleva na desnom prvi naš terminal odnosno simbolji ova jedinica. Nakon toga nam dolazi ova nula, potem se spuštamo u ovom stablu i ponovu imamo jedinicu i nul. Spuštamo, videli da u principu u opštom slučaju smo mogli ponavljati više puta je. Znamo da se zapravo te jedinice i nule uvek ponavljaju nekih n-puta. Da samim tim, dakle na početku uvek imamo 1 nula koje se ponavlja nekih n-puta uz avisnosti koliko puta smo prošli kroz ovo prvu smenu i samim tim znamo da će se na kraju upravo ta raša sequence zabrašavati sa istih nekih n-nul. Zato što je to ono što se nalazi, međutim na samom kraju do toga ćemo našto kasnije doće. Nakon te hjedinice i nula koje se uvek obavezno pojavljaju baš u redosladu 1 nula, 1 nula, 1 nula i tako dalje, n-puta dolazimo do ovog dalje a. Esec samo išli jedan mali dodatak. To n može biti i nula i neki broj veći od nula, zato što smo videli da start mi neterminalno s odmah može voditi ka drugo ismeni tako da mi prastaču nemoramo ni proći kroz prvu tako da bi nam tu n bilo zapravo jednako već od nula do stvara već jednako od nula, tako je način nula ili više od toga ponavljenje jedinica i nula. Dobro, nakon toga dolazimo ovo ovde a. E sad za ovu konkretnu smen, treću smen smo videli da ju kruznju prolazimo obavezno samo i 1-put tako nema rekurzivnih vraćanja, prolazimo obavezno samo i 1-put i idemo dalje ka ovom. Postavite se jedino pitanje, da li ćemo proći obavezno 1-put ili možemo takođe i nula-puta. Međutim zbog prirode oveš naših smen, nam je jasno da to mora postojati, ta smena se mora aktualizovati barem 1-put, zato što prosto nikada našu konkretnu... nikada našu konkretnu sekvencu ne možemo prepoznati prvom smenom pa skočiti na treću ili četvrtu već obavezno moramo prebaciti nekako na ovo a. Tako da, postoje li ne prva smena, druga mora postojeti i ponavljamo se tačno jednom zbog toga što nema tolika kve rekurze i nema vraćanja na ovo smenu, tako ponavljamo se obavezno jednom test toga ovo a, obavezno postoji i to samo je. Nakon toga imamo ovo ređanje simbola b, b, b, b, nekih m-puta, gdje je ponovol to m je neki broj koji može biti već jednule, ali može biti ponovol i nula, zato što smo videli da prepoznavenje ovog skupa sekvenci, odnosno podsekvenci koji se odnosno na ovaj neterminal a možemo izvršiti običnim terminiranjem po simbolu a odnosno ne moramo uopšte imeti b u sekvenci. I kada bi smo sada konkretno pogledali koje bi do neka bilo sekvenca, pa mi samo kad bi smo zapučeli malo a, otakujemo i ovdje terminiramo sa malima, zaprav od 2a u zestopce, također odgovaraju našoi gramatici, te samim tim smo ima zaprav i mogli da preskućimo ovaj ovdje del. Zabog toga kažemo b se ponavlja m-puta od nula do beskona čao, naravno, uopštem slučaju. Namjerno koristimo drugi simbol, dakle govor smo rećemo da se ponavlja n-puta ovdje m-puta, jer prosto, naravno, nikakomeđu sobna nisu korilista na ta ponavljanja. I nakon toga poslednje je ovo naše malo a, što u principu se sigurno mora pojaviti jednom, jer smo videli o nam služi slučuva za terminiranje naše sekvence, tako se mora pojaviti barjet. I nakon toga, kad smo obišli otaku c ova ideo, mi idemo sad skroz nazad otako, desnim delom ovoj našeg stabla i kupimo ove nule sa kraja. I tako naša obštih oblik sekvence izgleda 1,0 koje se ponavlja nekih n-puta, nakon toga 1a, zatim b koje se ponavlja nekih n-puta, nakon toga 1a i ponove 0 koje se ponavlja u n-puta, istoka ove jedinice i nule na početku. Tako da, kada naprijemo neki obštih oblik, on bi izgledao upravo baš tako. I to je bio jedan tipski problem, dakle kako iz nekih grammatike da izvedemo odrađeni skup sekvenci, u principu, dakle, ovo stablo izvećenje je dober način reshavanja tog problema, uz naravno, postupa koje mora biti edekvatana, to znači da nebiremo baš proizvoljno ove smene, kako ne bi smo smanjili obštost problema i kako ne bi smo uzeli konkretne pojedinačne sekvence koje u n-puta.
 neće dobro predstavljati generalizovanostanje samog skupa sekvenciju. Sleći naš zladatak ide obrnuto, a on kaže zapravo ako imamo opis nekih konkretnih sekvencih hajde da izvedemo gramatiku, bezkonteksnu gramatiku koja upravo generiše takve jezike. I sad imamo nekoliko primerčića takvih, gdje prvi naš primer kaže dobro imamo prvo ponavljeni jedinica n puta nakon toga ponavljeni nula n puta gdje znamo koji je odnos jedinice nula a to je da se jedinice obovozno ponavljaju, odnosno pojabljuju više puta nego nule. To znamo tako što imamo prosto ovaj dodatni ustav koji kaže n je već od dem, a to je već od nula. Dakle, nule se moraju pojaviti, jedinite se moraju pojaviti, ali se jedinice obovozno ponavljaju veći broj puta. U principu, ko do vakveh problema, postoje naravno više naći na razmišlanja, a oza nas je dobro za početak da usvojimo jedan ovakav naćim razmišlenja. Prvo dobra je ideja videti koja je to neka minimalna sekvenca koji ćemo prihvatati. Dakle, kako bi zapravo izgledala naša sekvenca i da vidimo koja bi to bila minimalna sekvenca i kako se grade opštije sekvenca od ste. Minimalna sekvenca ovde bi bila sekvenca 1, 1, 0, zato što ona bukveta bar 1, 0 i bar 2 jedinice, mislim, tačno 1, 0 i 2 jedinice, tako što zadovoljava ove naše uslove da moramo imeti bar 1, 0 i jedinica više nego što imamo 0. U tom nekom smislu u principu dobro je predstaviti u ovoj naši gramatici krenuti upravo o toga šta je neka minimalna sekvenca i na ta račin zapravo specificirati čim je naša sekvenca, odnosno naša gramatika, mora da terminira. Dakle, ta je neka terminal neki startni, minimalno bukveta sekvencu 1, 1, 0, a u opštom slučaju je tako, tu sekvencu naravno možemo iširiti. E sad postavio se piznije kako ćemo mi da širimo taj opšti oblik sekvenci. Vidimo još jednom kako nam izgledavite sekvence, znači u principu, prosi gumilaju jedinice, onda se nakon togo gumilaju 0. To je jako bitno zbog toga što mi ovo minimalno sekvencu širimo ili dodavanjem jedinice ili dodavanjem 0, ali naravno pozicijono na osnovu ovih onda sekvenci koje su predstavljeno ovako, mi zapravo jezikom, mi zapravo vidimo da jedinice smemo i sljučivo dodavati sa leve strane, a da 0 smemo i sljučivo dodavati sa desne strane. Tako da, ako bi smo sad stali malo da uopštimo ovu našu smenu, odnosno, ili tako grammatiku, onda šta bi smo mi zapravo rekli? Pa rekli bi smo dobro, dakle, jedinice možemo dodavati sa leve strane, tako da uvijek možemo da napravimo nešto ovako. U opštom slučaju to će nam značiti u ovom našem stablu koji bi smo sad crtali, da imamo 1 pa nešto što predstavljamo s. Pondato, s dalje možemo da razvijemo ponemo na 1 pa i dalje nešto što predstavljamo s. I na kraju ćemo to s determiniramo sa 1 1 0, i na toj način, boš u tom nekom konkretnom slučaju koji sam ja navala, imala bi smo 4 jedinice i 1 0, tim smo svaka koja mogućili, da imamo al tako bari 1 0 i više jedinica, nego što imamo 0, a te sam tim to odgovora o nej specifikaciji koji smo mi navali. Međutim, ne pokrima sve sekvence koje su nam tamo reče. Takle, sekvenca koja je takođ odgovora i recimo 3 jedinice i 2 0. A mi to ovde njih da nismo pokrili i to nismo pokrili pre svegaz, boga što nikako nismo omogućili dodavanje 0. I sada ako koćemo i to da dodamo, naravno dodat ćemo još jednu smenu, poćemo reći, ah dobro, očemo da dodemo i 0. Sad znamo da 0 moramo dodavati na kraj, zato što imamo prosto grupisanje 0, ono što ne smemo dozvoliti je da u bilo kontrnutku izgenerišemo neku ovakvu sekvencu, zato što prosto to nije dozvoljeno specifikacijem naše gezikrete, tako našto se ne sme napravit. Međutim, ako ostavimo našu gramatiku ovakvom, onda takođe rizikujemo da recimo naše prepoznavanje ide boš ovoj trećom smenom i da se to tako gumila, tako da gumilamo ove 0 i da na kraju terminiramo se 1, 1, 0, 0, čima bi smo recimo mogućili da nam se prihveta i ovakva neka sekvenca, to ne bi zadovoljavalo uslove naše one inicijalne gramatike. Te zbog toga mi naravno ne smemo ostaviti ovakva ovog smenu, zbog toga što ona nina koji način ne kontroliše među sobno odnosi 1 i 0 i na taj način bi smo mogli da prihvatimo sekvence koje kao što vidimo imaju više 0 nego 1, a to ne smemo dovoljati. Zbog toga ćemo, svaki putka da dodajemo 0 se obezbedici da istovremno dodajemo 1 i da na taj način kontrolišemo da je među sobni odnosi 1 i 0 uvek uravno teži, što znači ako dodajemo 0, sigurno dodajemo 1, dok sa druge strane 1 možemo neometano dodavati, nezavisno prosto od dodavanja ovih 0, zbog toga što videli smo da fle naš opis jezika prosto omogućeva pojevu takvi konkretnih sekvencij. Te samim ti, bez gubitka opštosti mi bi smo krenuli ili po prepoznavanju prve ili druge sekvence, time dakle, ukoliko se pojevi 0, obovezno se pojavljuju i 1, rešavamo o nej problemi od takogu milanja 0, a nedostatka 1. Ako dođe s dodamo samo u jedinicu, to naravno smemo neometano raditi, a obezbeđujemo da terminiramo uprvo ovom ovde minimalnom sekvencom i time smo tako pokrili sve slučajeve za ovej naš problem. Idemo na sljedeći primjer. Sledići naš primjer kaža ovako. Prvo nam se pojavljuju jedinice n puta, nakon doga nam se ponavljaju 0, a 0 takođe 1 puta, a nakon toga nam se pojavljuju jedinica ponavlo m puta i 0 m puta, gde su m i 1 neki brojevi otako od 0 do bezkonacija. Dobro. U principu, ono što možemo uraditi u ovom slučaju, što je veoma sliču na nam predskodnom slučaju, da uspostavimo neku zakonitost. Da ponovodradimo koja je to neka naša minimalna sekvenca, da vidimo kako se formira ta minimalna sekvenca i da vidimo kako ćemo da uopštimo primjer. Ove primjer se ipok malo razlikuju od onog malo preprimera, zbog tog što možemo da utvrdimo neku pravilnost, a to je da se, ako bi smo podelili praktično ove nekiho opštu sekvencu koju dobijemo, na dva dela prvi i drugi dela ponašaju potpuno identično, i jedino što ove broje ponavljenje nije isti. Tako da zapravo ako bi smo uvelili pravilnost za ponavljenje prvog dela, to bi bilo isto kao pravilnost za ponavljenje drugog dela, jedino što ih potrebno ponoviti u ovom slučaju razlačiti broj pot. Zbog toga, prirodno u ovom rešenju je možda inicijelno rastaviti taj skup sekvenci, na neke dve sekvence, dk dva dela koja se zapravo ponašaju na identična način. I reći, aha dobro, dakle ovoj prvi del treba da nam o ponaša ponavljenje jedinice i nula n puta, dok ove drugi del treba da nam o ponaša ponavljenje jedinice i nula n puta, što suštinski jednata isto stvarali, naravno pošto ne želimo da korelišemo uopšte ove broje ponavljenje, mi ćemo to odvojiti ovako u pravo u dva dela. I sada kada smo to odvojili, na dalje idemo potpuno identično kao i malo prešto smo radili. Možemo prvo da definišemo koja to neka minimalna sekvenca koja će biti prihvačena za polovinu ovog altaku, to su ove jedinice i nule. I pošto vidimo da se m i n mogu biti i nula altaku, a odnosno da ova polovina nemorani postojati praktično, da se jedinice i nule mogu pojaviti i nula puta u prvom delu, odnosno u drugom delu. Samim tim naravno minimalna sekvenca koja se prihveta je upravo epsilon sekvenca, naravno, ovo nije terminale, nemojte to da pomešlate, već je epsilon, ali u editoru o ovom predstaviću ovako i re tako jednostavnije. Te smo time reklji, dakle šta je minimalna. Sada kako uopštavamo ovu sekvencu? Pa u principu pošto moramo imeti jednak broj jedinice i nula, svaki putka da dodajemo 1, dodajemo i nula. Još da postihljamo pitanje u kom poretku, da li ćemo ih dodavati, recimo, ovako? Naprimer, ako bi smo ih dodavali ovako, šta bi smo time postigli? Pa ako niste sigur, mi ponovno predstavite o nem stabilom izvođenja. Postigli bi smo da imali 1, 0, pa nakon togo ovo što je ponovno 1, 0, pa 1, 0, 1, 0, da ne determiniramo ovo te praznom sekvencom, što znači voli bi smo neazmenišno pojavljivanje jedinice i nula, što nije, ono što smo želi da postiglimo. Dakle, mi smo želi da postiglimo gomilanje jedinice, nakon toga gomilanje nula, tezbog toga nam je treba zapravo identično ono što smo imali malo pre, a to je da jedinice uvek dodajemo na početak, da nule uvek dodajemo na kraj i da obovezno, ako dodamo jednu jedinicu, dodamo i 1, 0. I stada, kako što primer ćemo, ovaj deo naravno će biti ubočeno ovdje, ovaj deo će biti...
 Takođe ubočene i ovde, međutim oni međesobno nisu koje realisani odnosno broja ovih rekursija praktično nezavisji u jednom delu odnosno drugi Izbog toga mi neometano, dakle prepoznajemo ih prosto odvojena. I u tom nekom smislu al tako mi smo u potponosti ispunili upravo ovde zadatak. Dobro, idemo dađa. Takle treći primerčić nam kaže ovako. Na početku imamo pojavljivanje, odnosno ponavljenje i jedinica nekih n puta. Nakon toga imamo ponavljenje nula n puta, jedinica zatim takođe n puta i na kraju nula n puta, dakle isti broj ponavljenja, kao što smo imali i jedinica na početku. Što stiča je mi n, dakle nema međusobnoj ovog odnosna, međutim obo mogu biti nula ili više odnosna. Svišta stvar kao u drugom primjelu što smo imali. Ponovu imamo neke zakonitosti, neke segmente ovog ovdje izraza koje primjećujemo da se ponašaju na odgovareći navčin, tako da ponovu ćemo to izvojiti i za svaki takav segment odrediti minimalnu sekvencu i nakon toga kako se proširoje. U principu od čega ćemo krenuti. Naš startni neki neterminal, odnosno skup sekvenci koji isprostuje startan, to je alaj ovde, kažen, ha, dob, pojavljaju se neki jedinica na početku, neke nule na kraju i to je obovovezno isti brojal, tako jedinica i nula, a ono što se nalezi izmeđuje neko ponavenje nule i jedinica, dakle u obrnotom poretku, ne u istom poretku, u obrnotom poretku, dakle, ali neki n puta što ponovu nema nikako je veza s ovim n, tako da to prebeda nam bude celina za sebe, kao što je to bilo i malo pre. E sada pošto će nam to biti neka celina za sebe, mi ćemo to ponovno izvojiti u poseban neterminal, i onda ćemo prosto reći, ha, dobro, jedinice i nule, a, ovako, ovde, da kaželimo da gomilamo jedinice, rekuru, dakle, veći broj jedinica na početku i nula na kraju, te, u koliku, pismo samo rekli, pojevi nam se jedinica na početku i nula nam se pojevi na kraju, a nakon toga prelazimo u nešto drugu što ćemo depinisati druga čija, tako, mi možemo ponovno imeti problemi, tako, zbog toga što moramo na neki način da obezbedimo da imamo upravo ovogo milanje, jedinice i nula, što, ukoliko krenemo isključivo od ove ovde smene, ne možemo nikako da obezbedimo. Kako bi smo mogli da obezbedimo to grupisanje jedinica, odnosno grupisanje nula na početku, pa tako što ćemo da kažemo, ajde mi je rekurzivno da ponovljamo ovu smenu, što znači u onom našem stablu izvačenja imaćemo dakle jedinica n na početku, ili koliko je već bilo specificirano, izgled toliko nula na kraju i to će u principu biti to. Ono pomembno, tako da želimo da završemo s tim prepoznavanjem jedinice i nula, znači prelazimo u ove neki centralni del, gde ponovlo želimo, značiti da mi treba da ove sredni del premestimo u prepoznavanje tog nekog drugog dela, pa ćemo prosto reći, dobro, ove sada ovdje del u onom našem stablu izvačenja, može da počnu s prepoznavanjem na drugi način. I kako će zapravo biti to prepoznavanje, trebuji nam nule i jedinice m puta, ponavno dakle u povedku da prvo grupišemo nule, pa onda grupišemo jedinice na kraju, što identično svemo ome što smo imali do sada, tećemo dakle zbog toga gomilati nule na početku, jedinice na kraju i sve to rekurzivno ponavljati. Šta je naša minimalna sekvenca ovdje? Minimalna sekvenca za ovaj unutrašnji deo, pošto videli smo je i al tako dm je nula, znači minimalna sekvenca za naš unutrašnji deo je prakđu naravno epsilon prelaz, te sa te strane, dakle sela ovo te može i da ne postoji, znači možemo da imamo ništa, tako ni jedno nula i jedinicu unutra ili dakle ponavljaj nula i jedinice dogodca ovo ovdje rekurzivno ponavljati. Šta se s povedašnjem delom? Ove šta smo mi sada ovde omogućili je da, sa s jedne strane ponavljaju prvo jedinice nakon toga nule, da u nekom momentu u ovom stavlu izvujenja pređemo ovo te, tako dok ono ponavljamo nula i jedinice u ovom predvijednom poretku ili termineramo praznom smenom, ali takođe smo omogućili i da odmah pređemo u praznom sekvencu, to je da zapravo nemoj ni jedan simbol što je zapravo i bila težnja ovdje, jer u koliko je nula i m je nula, mi bi smo dakle radili prepoznavanje ovo ulaza, tako prelazila bi smo odmah u te, te bi terminila u Epsilon i time smo zapravo omogućili i praznom sekvencu, dakle napravili smo čitava ove skup sekvenci koje možemo prihvatiti. E, dakle, ovaj bila mala kombinacija, odnosno zapravo vrlo s ličnu košnu smo imali u predskudnom problemu, jedina što je to prepoznavanje bila malčice drugačišta, smo imali nešto što je bio u nutrašnji centralni deo i nešto smo vrtili oko toga, gde smo povedali, zove u nutrašnji deo reklje, ajde vidimo šta je minimalna sekvenca, naša minimalna sekvenca je Epsilon, kako se, odnosno, prazna sekvenca otako, kako se ona uopštala, pa tako što je ukružujemo nuloma i jedinicama, nule lepimo sa leve strane i u koliko zalepimo 1 nulu s leve strane, obavezno lepimo 1 jedinicu sa desne strane. Nakon toga treba da lepimo ove jedinice i nule oko tog t, stim da ponavo minimalna sekvenca za sve će upravo biti to t, odnosno, na kraju Epsilon, t zbog toga imamo ovde, gde omugućevamo da ovih jedinice i nula i inicijelnih ne ima, a u koliko ih imaju, u koliko su one rekurzivno ponavljuju i za to vam prosto služi ova naša prva smena. I još sam i ostavio primr pod d, i on delo je dosta jednostavno, on kaže ovako, imamo prvo grupisanje jedinica, pa nakon toga nula, pojavljuju n puta, gde n može biti nula ili više od toga, a jedinice se pojavljuju tri puta n plus dva. Kad imamo ovakom neki problem, on je vrlo slično prvom primvjero koji smo imali, a to je da treba prvo da pronođemo koja je to minimalna sekvenca, zadošam se dalje problem širi na prvično jednostavna način, tako ovde ne imamo neki pravilnosti, al tog koje se više puta pojavlju u okviru ovih sekvenci. Već idemo od neke minimalne sekvence i onda nju uopštavamo. I sada se poslite pitiće, dakle šta je ovde zapravo minimalna sekvenca. Dakle, minimalna sekvenca definitivno je ovde, kar je n jednako nula, zbog toga što se u tom slučaju nula ne ponavljuje, a koliko puta se pojavlja je jedinica, pa pojavlja sa tako tri puta nula plus dva, tako da naša minimalna sekvenca zapravo je jeden jedan. I al tako. E sada, nakon toga u koliko dodamo neku nulu ponavljamo da kaširimo ka u prvom slučaju isto, dodavanjem nula i jedinica. Međutim, u koliko dodamo jedno nulu, pošto moramo da održimo ovaj odnos jedinice nula, a to znači da se jedinice pojavlju tri puta koliko nule plus dva. To znači za svaku nulu koji ododamo mi zapravo moramo dodati tri jedinice. I u principu, svaki puta, kada dodamo nulu dodamo tri jedinice, to ponavljamo rekruzivno proizvoljom broj puta i na kraju ovo terminira obvezno sa dve jedinice. I ako pogledamo, dakle, ovaj jedinicu pokrili našu minimalnu sekvencu, koja u koliko se nepojavljio nije nula, predstavljaju samo dve jedinice. Zana dalje prosto samo ovom ponavljenjem i na kraju terminiranjem, imamo zadovoljem ust. Tako do ovaj primir i sam po se i bio izuzetno. Jednostavno, a on što je dakle negde rekapitulacija svega ovoga. Dakle, imali smo situacije kada je trebalo otkreti neke pravilnosti ponavljenja i ove situacije kada prosto idemo pronođemo minimalnu sekvencu i onda gledamo kako da je uopštimo. U situacijemo kada takođe imamo odgovarit će pravilnosti za te manje delove odnosno za neke smene o tako koji određuju po sekvence praktično ovih ovde sekvenci ponove određujemo minimalnu sekvencu i zatim uopštavamo takve sekvence. Ok, dobro. Tu smo imali rešenja. Trebalo bi da smo dobro uradili. Ok, i nakon dogaja konošno imamo neke zedati koji sad treba nešto konkretno da nam pokažu. Gde dakle, vi ćete tako potencijalno dobiti neki problem. De prosto imete neki problem, kaj treba rešiti odnosno neki skup svar i koje treba opistati i ovdje recimo kažena pisati gramatijek u koja pisuje niz od jednog ili više brojeva i prikazati stabilo izveđenja za ulas 3, 7, 12. Dakle, niz jednog ili više brojeva u principu uvedemo neki neterminali od tako niz i ponove, kaj do sada kažemo dobro šta je naša minimalna sekvenca. Pošto ovde imamo jedan ili više broj minimalna sekvenca je jedan broj. Ono što ovde uvedimo takođe je terminal, koji sam po sebinom je datu zadatku da se kaže da je to broj da kaj neki konkretam, da u ovom sučaj nije potrebno razbijati šta je to broj. Dakle, nije potrebno reći e broj je sad nešto što zapravo predstavljene niz odbarem jedna cifra u ovom konkretom zadatku to nije bilo potreba raditi. Recimo da jeste bilo
 mogli smo recimo reći, aha, dobro, minimalno, dakle, to je jedan broj, a onda se kaže, dobro, broj je sada minimalno jedna cifra, a u opštom slučaju je to neki nisci farate se ste strane rekursivno nekako ponavlja. Međutim, dakle, ovo ovde nije bilo traženo, te prosto, dakle, nije, naravno, potrebno, zbog toga ću ja ovde vraciti, da je to neki terminal broj. I niz od jednog ili više, što znači, u koliko ih ima, naravno, više, mi ćemo ponovno nekako rekursivno je ovo tako ponavljati, što znači, recit ćemo, dobro, to je niz broj, i na taj način smo završeli. U principom, ovo ovte gramatiku su mogli da napišemo na dva načina. Mogli smo da napišemo baš ovako, a z druge strane mogli smo da napišemo i recimo, umestu ove poslednje smene koje zapravo predstavlja rekursivio tako mogli smo da napišemo i ovako nešto. I u principu u ovom slučaju bi to naravno bilo sve jedno, jedino što ovo stavlo izvođenje nemi bilo identično i to ću pokazati i na primero. U principu jedno je leba rekursije, drugo je upotreba desne rekursije, oba naravno ovde rade. U ovštim slučaju neprimenjujemo podjedno i jedno i drugo. I to ćemo nešto kasnije videti kod primera aritmetičkih operacije nije sve jedno. U ovom ovde konkretnom primeru potpuno sve jedno, dali radimo lebu rekursiju ili desnu rekursiju praktično je identično. Ne sad, razlikuje se naravno po tome, što ovde trebao da prikažemo stavlo izvođenja za ulas 3,7 i 12. Ja ću to sada ovde samo prikazati u samom rešenju. A, dobra. E, počemu se ova stavla razlikuju. Pa, u principu, uko li koji imamo levu rekursiju, onda će nam stavlo da bude nagnuto na levu stranu, dok ukliko imamo desnu rekursiju, ono će biti nagnuto na desnu stranu. Jasno, u principu, zbog toga što kako formiramo ovo stavlo izvođenja, dakle što kažemo neterminal niz, dakle se zamenjuje neterminalom niz i nakon toga ide neki broj. Pa, znao, zamenjuje neterminalom nizi neki broj i nakrajio termine na tim brojem. I kada prikazamo to, na primjero, 3,7, 12, mi naravno redom ređemo prosto te brojbe, te sajmo tim po reda kovak. Ako primenjemo desnu, desnu rekursiju, onda naravno je stavlo i stavlo nagnuto na desnu stranu zato što imamo broj pa niz, pa broj pa niz, pa broj. I zamenjujamo ovako. Kao što rekuk u ovom konkretnom slučaju, to je prakčno sve jedno. Međutim, u nekom opštom slučaju nije baš o potponnosti sve jedno, tako da videt ćemo i primjere kada to nije situacija. Dobro, sljedeće zadatek vrlo sličan novom, tako da ćemo odnjopreći na njega. I ovam každa napisati gramatiku koja je opisuje niz od jednog ili više članova, koji mogu biti brojevi identifikatori ili datome. U suštirim, ovo našte rešenju bi smo u tom smislu modifikovali. Tako što bi smo recimo, rekli, ah dobro, niz nam se sastoji od jednog ili više člana, pa bi smo tog člana nekako morali sad da uopštimo, kao neterminalno recimo. I onda, naravno, naš niz bi se u nekom opštom slučaju proširene sekvence, dakle, rekurzivno ponavljav kao niz tih članova, ovaj, otakvaj. Gdje bi smo onda, naravno, mogli da kažemo, morali da kažemo, finalno šta nam zapravo predstavlja taj član, pa bi smo rekli šta je više pisalo u zadatku broj identifikator ili datom, dakle, broj ili identifikator ili datom. U suštini, ovo ovde sva tri predstavaju neke terminale, vama tipično zadatko bude napisano, dakle, da je nešto o terminalu, da je prosto dalje nemora da se razrađuje ili prosto neko pravilo, po kome se dalje razrađuje. U suštini, ovo ovde smena se može napisati na dva načina, dakle, ili ovako s ovim ili delimitarima, ili se može razvojiti u tri odvojene smene, da će biti rečerno dobro član je broj ili član je identifikator ili član je datom. I onda, naravno, ovde treće smena ne bi postojila, već, bi smo koristili ovako našto, u principu načina koji će da to predstaviti podpon sve jedno, oba govore identično stvari. Tako da, to je u principu bilo prilično jednostavno. Ovo je sad datišno tekođe primiri, kako to recimo, možemo predstaviti za opisivanje. Recimo, elemenata glavnog programa, što je, kao što rekoh, kdama cilj da nakraj dođemo prosto do toga da ove grammatike možemo da koristimo u tako neku svrku, da je prosto jasno da je o paradigma sama po sebi iznačena, a šta ćete vi konkretno smestiti umesto niza ili umesto konkretnih ovih terminala, to, naravno, potpuno nije bitno. Dakle, ukoliko želimo da kažemo da prosto naš program se sestoi od niza nekih ajtema, gde ti ajtemi prosto mogu biti deklaracije promenjivi, deklaracije konstanti, deklaracije funkcija, me bi smo, naravno, to predstavili ovako, a na dalje praktično, naravno, razrađivale i sve neterminale, jer nam je cilj da dođemo do odgovarejućih terminalnih simbol. Dobro, nakon to do konovo imamo malo modifikaciju ove naša grammatike i ona sada kaže, hajde da naprašam u grammatiku koja opisuje nizu od jednu gilivishe brojeva međusobno odvojenih zarezima. U principu, jedina razlika koja ove postoji, ješto treba uključiti ove neki delimiter, gde to, naravno, ništa posebno nije kompleksno, gde ćemo ponovu reći, dakle, minimalna sekvenca se zastoji od jednog broja, a čim to širimo, mi praktično kažemo, evo ga zareze između niza i broja, naravno, možemo joj obrnuti rekurs. I ono što je jedino ove bitno, da se možda eventualno ne pogreši, je da nestavimo slučeno da može terminirati u ove nekaj zarezom, rećimo, zarez pa broj, ili da nestavimo, ali tako da ovo ovde caseve može biti epsilonili tako nešto, čim je bi smo, rećimo, mogućili da zarez dođe na početak, što, naravno, nije regularna opcija. Međutim, ovde nekako delo je prvično jasno, da uprvo o minimalnom sekvencu koji smo naprilili, mi smo rekli dobro, ako imamo samo jedan broj, onda on, naravno, nema zareze, a u koliku postoji više od jedan, onda su oni uprvo ovako odvojenih zarezima, gde jasno da ovakva jedna gornja smenal tako pokrivala bi, jer niz od bar dva broje, tako i zbog toga bi imala sa svom smisla smestiti zarez između njih. Dobro, i ovde su ponobno prikazane, prikazane neko stabilo izvođenja, gde, dakle, naravno, i primer kako to kasnije uopštiti u samom programu, gde, recimo, ovodobar primer da se prikaze prosto kako se koristiracimo lista nekih promenljivih koji so dvaje u zarezima, recimo pri deklaraciji promenljivih, dakle, to kako se identifikatori sami odvajaju zarezima u toj listi deklaracija. Upridzipu, to je samo jedan od primera ovakve nekje primene. Ok, ovdje ovdje zadatak je prva primena nad nekim aritmetičkim operacijom. Tako da za početak ciljnima je da napišemo gramatiku koja opisuje aritmetičke izreze koji sadrže samo operacije sbiranja pri čemu je sbiranje levoasocitivno operacije i ovde je, dakle, uprvo razlog ovakvog primera da bi smo videli u čemu je razledek akumkretno primene lejeve rekurzije i desne rekurzije, i ovdje je, dakle, uprv o razlog ovakvog primera da bi smo videli u čemu je razledek akumkretno primene lejeve rekurzije i desne rekurzije, i da nije uvek identično dali primenjujemo levu ili desnu rekurziju. I sad u principu ako bi smo imali neki izraz koji opisuje, koji koristi, dakle, izključivo zbir, jasno nam je kako bi smo to uradili. Imali bi smo na kraju neki zbir, ali tako gde bi minimalni, minimalni taj zbir imao jedan sabirak, a gde bi prosto uopšten, to bio neki rekurzivno ponavljenje izbira, plus sabirka, gde bi taj sabirak bio neki broj ili identifikator sve jedno, u principu, dakle, vrlo, zlično kao nije, sad samo one se delimitorom, samo što bi sad to bio plus. Dljutim, ovaj bio primar koji upravo treba da ilustruje zbuk, čekaj ovdje koristimo i sklučivo levu osocijativnost, a nedesno osocijativnost. I razlog za to je ono stavlo izvođenje koja smo videli malo pre. Dakle, stavno izvođenje u ovom slučaju je nagruto na levo stran. Da vidim sad da mogu da, reciva, sad zamislite da ovde u misto ovog zariza da klimamo plus da ne bih morala da precrtavamo sada ovo ovde rešenje. Velika razlika da li je stavlo nagruto na levo stran ili nedesno, zbuk tog da izračunavamo rezultate, među rezultate i nakraju finalni rezultat operacija, mi ponavlo koja je malo prekljenemo od korna, idemo s...
 skroz levo bilazimo ovo naše stavlo i kupimo listove, idemo kadesno da obidjemo praktično celo naše stavlo. Prvi list na koji najćemo i ovoj krajnje levi, tako će to om slučaju da bude 3, pa ćemo kažemo plus 7 i da time izračunamo prvi međus bir, znači 10, na kraj ćemo kažemo plus 2 i u kupimo vratimo 22. I to odgovora levoja su cjetinusti sabiraj. Z druge strane smo imali stavlo na grubu u drugu stranu. Šta bi smo onda zapravo imali? Pa imali bi smo ovdje na vrhu 3-ku l, tako pa bi smo rekli plus, a onda bi smo dobljali imali 7 i plus 12 i mi zapravo bi smo radili grupisanje od ozdojel, tako pa bi smo zapravo grupisali 7 plus 12 u 19 i tek nakon togo bi smo dobljali 3 priračunanju na vrhu. A zapravo to mi je priroden redustat grupisanja kod operacije sabiranja. Samo ko samo sabiranja nije toliko bitno, zato što je nezavisno grupisanja isti se rezultat dobija. Međutim u opštom slučaju naravno prosto moramo poštojevati asocijitivnost koja postoji kod različitih operacije, te sad mi im tim pošto su oni levo asocijitivni koristimo obavezno levu rekurziju. Ako bi smo želi da obezbljedimo desno asocijitivnost, onda bi smo odako primijivali desnu rekurziju i u principu u tome bi se razdakovala rešenja. Tako da u nekom opštom slučaju koricimo kod onih nisove nije nam bilo bitno, ali u konkretnim situacijama gde imamo primjenu kod nekih operacije za koja je tačno znamo kako su asocijitivni, naravno bitno nam je kako rekurziju koristimo. Ok, sledaća modifikacija kaže, hajde da opišemo aritmetičke izreze koje sadrža operacije, sbiranje i oduzimanja, pri čemu su i sbiranje i oduzimanje levo asocijitivne operacije istog prioriteta. Ponovno kao i do sada koristimo levu rekurziju. Počnimo od nekog startnog neterminala i ponovno da možemo da kažemo u koje to neka njaša minimalna sekvenca. Istog kao imao prebivo jedan sabirak, zbog toga imamo ovu ovde smenu koja kaže, dakle to je izključivo jedan sabirak, on može biti ili broj ili neki identifikator. Ako uopštavamo sada tu priču, onda ćemo da kažemo, da gledan taj neki zbir, možemo da dodajemo sabirak ili možemo da oduzimemo. I u potparnosti nam je sve jedno koji mi radilo sada imamo svojne levo asocijitivne, dakle neamo tu prosto neke smetni, tako da ovde neamo dakle posljenje zagradan i ti bilo čega slično. Tako da u suštini kupimo sleva na desno i tako grupišamo odgovarit će operacije, izbog toga su prva i druga smena potpurno, da kažemo ravno pravne. Livo su rekursivne, samim tim zbeđuju levo asocijitivnost, tako da ovaj zadatak nam ponovio ništa specijelno težak nije bio, zato što je samo cilj bio, jer tako da pronadžemo minimalnu sekvencu, to smo uradili time što smo prosto reka izbirije sabirak, rekli smo kako definišamo taj sabirak i nakon toga smo uopštili sekvencu dodavanjem ili oduzimanjem sabiraka od nekog zbiraka koji se obavezno levo rekursivno ponadža. Dobro, ove zadate ko principu nije bio ništa specijelno, sleđi zadate koji imamo je nešto malčice i kompleksnost ovog zadatka se u principu odljeda u tome što ovde kombinujemo više različetih operacije. Tu smo operacije sabiranja i množenja. I malo premsmo imali više različetih operacija, međutim, ono što je odlik al operacije sabiranja i oduzimanja, a to je zapravo da su oni naravno istih prioriteta, te sada im tim su one smjene bila potpuno ravnopravna. Međutim, sada kombinujemo operacije sabiranja i množenja, gde prosto to su operacije koje nisu istog prioriteta, obeso levo asociativne, međutim, množenja ima veći prioritet na sabiranje. Pošto ponovno ovde ne obrađujemo zagrade, u tom smislu je jako neokonu da znamo kako ćemo drugačije zapravo da obezbedimo veći prioritet neke operacije. U suštini, ono kako ćemo to da realizujemo je time što ćemo stavno da imamo u vidu na koji način mi zapravo obilazimo stablo kojim predstavljamo, je ovo našog grammatiku, odnosno naše konkreta sekvenca, odnosno ono stablo izbođenje. Tako, uveku vilažimo slevena desno i uvek rezultate iz listova propagiramo naviš. I to, ovo što smo videli malo pri kod izračunavanja, izraza, odnosno predstavljanja, izraza za sabiranje, za oduzimanje, sve jedno. Dakle, ono što smo imali kod predstavljanja zbira, je otako, neke tri vrednosti, pa smo tamo neznam guzala, sam primjer 3, 7 i 12 što je već bilo. Dakle, videli smo, ako imamo ono levo asocijetinos, odnosno levo rekursio, 3, 7 grupišemo, saberemo i u našem podstablo, hajde da se vratimo na čisto taj primjer, ako zamislimo su ovde pluse, vjome sto za zaraz. Dakle, 3 plus 7, 10, tako da u ovom ovde trnutku mi ispropagiramo 10. Plus 12, ovde ispropagiramo 22. Dakle, stavu, ovdje ko bi lazimo ovakvom, ali tako dođemo da toga i ovdje ispropagiramo rezultat, u principu. Naravno, dok nismo došli do ovde sedmice mi ne možemo, ali tako ispropagirati ovde 10, i stasi u mi zvestu ne možemo izračunati celog kupno suma. Tako da, uvek slevanje desno i od oddozdo naviše, propagiramo te među rezultate, radi izračunavati. Sto da nam je jasno, značimo mi, uvek prvo izračunati ono što je dublje u stablu, ovde ćemo prvo sabrati 3 i 7, tek nakon toga ćemo sabrati ovu 12-cu. Dakle da bi smo obezbedili da je nešto prioritetnije u odnosu na nešto drugo, mi zapravo moramo obezbediti da se to nađe dublje u samom stablu. Pošto znamo da idemo uvek i o tako posocijativnosti po našem izrazu, kakav godom bio slevanje desno da bi smo obezbedili da ono što je najlevlje za sabiranje, ipak ne bude prioritetnije u odnosu na ono što je zamnoženje, mi ćemo omogućiti da našem noženje bude nekde dublje u samom stablu i to ćemo upravo uraditi tako što ćemo na specijela način konstruisati gramatiku. Hajde da vidimo, dakle kako ćemo to da uradimo i postrema prikažemo stablu izvođenja. U principu ponovom možemo kako i malo pre, da razmišlamo o tome što su neki naši minimalni zapravo izrazi. I sad smo imali neki izrazi ili zbir kako je već bilo dato, nije toliko, mnogoni bitno. Da videmo da vidimo što može biti njego v minimalni ideal, možda za to je prvo najbolje da probamo da je izkontrujušamo par nekih primera. Pa da prosto kažemo kao što smo imali i za zbir, verovatno minimalno, je da imamo neki jedan član. Pa nakon toga možemo imati recimo neki proizvod, pa možemo imati i proizvod koji je sasteljeno dviše nekih činilaca. A onda nakon toga takođemo i kombinovati al tako te pojedinačne činilce, ili sabirke ili proizvode ili kakogod, hoćemo nekako da ih nazovimo. I da od toga formiramo izraz. Naravno, možemo imati i slučivo sabirke. Tako da doda, ako ćemo da uzmemo, da u obštom slučaju imamo oba, onda bi smo kao izraz ponovu okombinovali neki izbir sa još nečim, a to što koćemo da izvojimo dakle ove ovde delove, o tako ko omnoženje, koćemo da ih izvojimo u neku zasevnu celinu, koji ćemo nakon toga da smestimo nekde dublje u savom stavnom, možemo nazvati kao neki proizvod u ovom trenutku. Gdje ćemo zapravo mogućiti da taj proizvod njegovog minimalna sekvenca zapravo bude, jer tako, jedan element, dakle ovo je neki minimalni proizvod, tako da u suštini njega možemo nazvati činilac, i taj činilac ćemo naravno terminirati kao što smo radili u onim predhodnim zadacima, kao broj ili identifikator. Time smo zapravili minimalnu sekvencu, a naravno proizvod možemo i proširiti, tako što ćemo mogućiti da on bude proizvod više činilace, i sa te strane naravno koristit ćemo obavezno lev u rekurziju, zato što prosto o tome više i ne razmišlamo, je tako ako je leva su asacijativno odgovaraći operator, odnosno operacije, u tom smislu je tako primenjujemo lev u rekurziju, i time smo praktično uopštili ove naš proizvod. Tako što smo tovo radili, vraćemo se na ove naši izraz, i koji je minimalna? Šta je minimalno naš izraz? Z ovih ovde primera koje smo videli, tako naš izraz može biti i ta jedan činilac ili može biti jedan proizvod, pošto nećemo vam i sad ote da ulazimo u to da to može biti jedan činilac, mi ćemo da kažemo da minimalno ove naši izraz će zapravo biti proizvod, što vidimo iz nekoliko ovih primera, gde je naravno, ukoliko se zaista radi u samo jednom ovom broju, onda prosto će to naravno biti prepoznato kroz ovaj činilac, i nakon toga će biti prepoznato kroz odgovareći terminal koji je broj ili identifikator. Jezda, ako želim o ponavu da uopštimo ove naš izraz, koji će na kraju biti neki izbiril, tako mi ćemo reći dobro, taj izraz dakle se može uopštiti ponavu levom rekurziju, jer se radi u sbiranju to operacija koji nismo pokrili, kao izraz plus ovaj ovdaj proizvod koji ćemo da dodemo, i to, ano što smo imali pokriverno zapravo...
 u kroz ovu ovde smenu ili ovu ovde smenu, gde zapravo svaki taj proizvodom se sastoja od istručivo jednog činjaca. E, ovdje smo u principu radili iso ovo što smo radili malo preuzmali dodatak. S jedne strane, krenali smo ponovno od toga šta su neki minimalni, minimalne sekvence. Sajim tim u ovom slučaju najbolje bilo uprovo napraviti ovako inicijelno, dakle neke primjere pa prosto u kretati se po tome, gde smo mi dodatele videli da je minimalna sekvenca, da se zapravo našo izraz može sastoja ti od sume nekih proizvoda. Dobro, odimam type-o. Sume nekih proizvoda. Gde taj proizvod je minimalno jedan činiloce, odnosno brojeli identifikator, a kako uširimo ov tako tu sekvencu, mi zapravo levo rekruzivno ponavljamo kao proizvod tih činiloce i na kraju i sve sabiramo u okviru ovog jednog izraza, time smo obezbedili minimalnu sekvencu, a takođe obezbedili smo i proširio vesefanc. Međutim, iš jednom samo da dodatno naglasim prosto to, počemo sa ovom rešenjem razliku od predhodnjih problema i rešenja koje smo imali, a to je upravo u tome što zapravo ovdje imamo različite grupisanje, različite prioritejte. Zbog toga je imperativ bilo. Da nam ova vršna operacija zapravo bude operacija sabiranja i da naš startnijne terminal krene od operacije sabiranja. Zašto? Zato što kada ovo budemo predstavili u našem stablu izvođenja? Mi ćemo naši izraz u opštom slučaju upravo krenuti od ovog, izraz plus proizvod. Nakon toga ćemo taj proizvod, takle, naravno, o proizvoljno puta ponavljamo, ali proizvod ćemo u nekom trutku razbiti na ovaj ovde, gde će se taj proizvod javiti dublje u samom stablu odnosu na ovo sbiranje i time će prioritetnije biti operacija množenja, jer ćemo prvo izračunati taj medžu proizvod, a zatim ga podići u stablu do ovog sbiranja, da bi smo dobili finalni rezultat. I ako u suštini sad pogledamo ovo stablo izvođenja za 2 puta x plus 3, dakle, krenuli smo od zbira ili izraza tamo kako smo ga mi nazvali, zbir plus proizvod je ovo tako, način, naravno, razvojimo ovo kao zbir plus proizvod, gde, dakle, prvi zbir ovo to je 2 puta 3, nama predstav da je 1 proizvod, neki proizvod puta činilac, gde taj prvi proizvod je činilac 2, a drugi činilac identificator x, i alamo proizvoda kaj brzo terminira preku činijoca do 3. I onda kada imaš, kad vam počemo sad da vidimo, da ovo sve što smo radili ima smisla, mi zapravo kažemo, ubilazimo ovo naša stabul, dođemo slevanu desno od tako, prvi list koji najđemo činilac, 2 puta x i mi rezultat imamo ovte, plus 3 i to je u suštini to. Na taj način smo obezbedili da naš rezultat bude dubljio stalu, čak i da smo imali 3 puta, 3 plus 2 puta x, pardon, gde bi onda prvo nailazili na taj zbir, mi sve jedno ne bi smo imali rezultat ovoga ovdje dup, ne obiđemo obatva, da dobijemo među rezultat i podignemo ga gore u samom stalu, tako da na taj način mi smo zapravo obezbedili ove priorite. I naravno, ovo se može primjeniti, osim na ritmetičke operacije, takođe i na opisivanje logičke hizraza, u principu, naravno, sve to slične. Time smo završili, dakle, ove neke mini primere ilustracije, kako formiramo gramatiku na osnovu konkretnih problema ili sa drugej strane kako formiramo skup sekvencii, uopštovamo ih na osnovu date gramatika.
