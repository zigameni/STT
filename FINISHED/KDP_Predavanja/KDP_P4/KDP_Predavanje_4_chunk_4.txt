 je jednako nula, ovo ne bi valjalo, iz više razloga za ovo ne bi valjalo. Prvi razlog. Zamislite da prvi proces se probudi, prošlo joj ovdje, došlo je tačno en procesa, prvi se probudio, došao je na svoj atomski blok i postavio je count je jednako nula, count je jednako nula, ostali procesi neće konstatovati da je count jednako n, jedan je konstatovo, jedan se probudio i jedan je nastavio dalje. I to mnogo ne valja. Znači ne valja, jedan proces je prošao kroz barjeru i reset ovo barjeru i više ni jedan proces koji čekao na barjeri neće moći da prođe dalje. To je prva loša strana, mišem loša strana, to ne smedaj da se koristi, pišer joj ovo jednokratna barjera, za to ne smedaj da se koristi više puta. Ali ako bi smo probali još da je koristimo više puta, šta je sljedeći problem koji bi mogalo da se javi ovde? Ta jedan je tu resetovalo, a onda došao i uvećao za jedan i ne znam šta se desilo onda, sa svim našim ta jedan je došao da čeka i više ni ta jedan možda ne može da koristi dalje barjeru, svi su se tu nekako zablakirali. Tako da ovo ovde rješenje nije ispravno da napišem ja samo ovde kaunt je jednoko nula u jednom naradnom bloku da to proradi, to neće da proradi. A kada budete bili na vežbama, kada budete slušali vežbe kot koleginica, videte da barjera može da se recykliara, ali tako što nećemo koristiti jedna vrata kao što sada imamo, nego tako što ćemo napraviti sistem dvoja vrata sa dve prevodnice. Ako se se nekad vozili brodom, znate šta su prevodnice, brodove kad prolaze kroz prevodnici mi u dvoja vrata, uđu brodove u prevodnicu, zatvore se prva vrata, promeni se nivo vode, podignese ili se spusti brod, otvori se druga vrata, izadju brodove iz prevodnice i tako mogu da se voze gore dole brodove. Ili ako ste nekad ušli u neku od ovih banka, nove koji su napravili, onimi u dvoje vrata često nolo, znači uđite jedna vrata, pritisnite dugme, tu se nakupi ljudi, pritisnite druga vrata, ona mogu da se otvore samo ako su prva zatvorena. Ili isto ako ulazite u neku zaštičenu zonu, primjerno u trezor narodne banka, ulazite ili tako negde, ili ako ste gledali neke filmove sa zatvorima, tamo ima isto to, ima dvoje vrata, uđu u buffer, zatvore se prva vrata, otvore se druga vrata i izadji iz buffera. Ili neki tvrdževe, isto to imaju, one kapije se ponašaju kao buffer, imaju dvoje vrata, zpustite jedna kapija uđe grupa, nalaze se tu u nekom nebranjenom prostoru, ok, otvore se druga kapija, prođe se, tak kapija se zatvori i otvori se prva, znači to je jedno rešenje sa dve kapije koja omoguća va neku synchronizaciju. To ćete videti na vežnog. Ićemo ovde videti jedno malo drugačije rešenje koje će koristiti proces koordinator, znači, hoćemo da naparimo rešenje synchronizacije na barjeri sa procesom koordinatorom. Šta radimo kad imamo proces koordinator? Šta radi proces koordinator a šta radi svako svaki od ovih procesa? Koordinator čeka da ukupam broj procesa koji su došli, ne postane jednako jedno. Koko treba da dođe, toliko došlo. Šta radi svaki od procesa? Proces treba da budu obavešten, ok, možete da nastavite dalje sa ratom. A je ponovlj, šta sam sad rekao? Poslo koordinatora je da sačeka da svih n procesa dođe, pošto svih moraju da dođe, sam si mi je svedu u kom rednosti da će čekati, tako da možemo da stavimo da koordinator ima jednana niz arrive od i je jednako jedan. Znači, koordinator treba da protrači, fori jednako jedan do n, await arrive od i jednako jedan. Znači, ja čekam, dok lego dvji svi oni koji su trebali da dođu, ne dođu. Kad ja saznam da su svi oni došli, a onda kažem fori jednako jedan do n, continu, svaki pojedinačni proces obavestim ajca ti nastavi dalje. Ono što ovde nije prikazano je kada se ove dve promenjive resetuju, kada se arrive postavlja navrednost nula i kada se continu postavlja navrednost nula, ko radi postavljanje, ko radi resetuvanje ovih promenjivih. Ajde da vidimo, proces koji dođe će reći, ja došao, on će postaviti promenjivu arrive navrednost jedan, a ovaj kada dobije da je neko došao, može resetuvat promenjivu arrive, a postavlja promenjivu continu. Dobro, a ko će resetuvat promenjivu continu, pa ono je koji očekuje dozvolu da može da nastavi dalje. Znači, mi ćemo ovde sada da iskoristimo ping-pong, neko će neko ga pustiti, taj će neko resetuvat i pa vratiti nazad nama taj jedan flag. Znači, mi ćemo koristiti neki flag jedan, znači, ja stigao nula, u suštini možeš nešto da odradiš. Znači, možemo da iskoristimo dakav ping-pong sa dve različite vrednosti, koje će nešto označavati da bi mi mogli da nastavimo dalje sa svojim ratom. Znači, koji je koji je koji došao i postavlja continu, a ovaj ovde ko dođe, ko dođe, postavi arrive a brishe continu. I vidite, rješenje je ovde dosta jednostavno. Šta radi vork Publicating, kada koji će da dođe na barijero? Worker ima ovdje tri reda, kaže ja došal. Arrive odija jednako jedan. Šta onda radim? Ondar čekam da meni koordinator da dozvolu. Kada sam ja dobil jo dozvolu, to znači da su suštini svi ostali već došli. To je koordinator proverio i ja ću da resetujem dozvolu u koju sam dobio. Imamo dva flega koja nam služite za časkanje između Worker i ovoga koordinatora. Worker kaže ja došal, postavljanjem Arrive i, Arrive na nula će postaviti koordinator, možemo da vidimo kako izgleda njegov ako je ovo je postavio to čudov. Onda će on morati da čeka za sve. I, Arrive, for i, 1 do n, šta radi on, await na Arrive o d, da je to postane jednako jedan. Kada se to desi, onda to treba da resetujem, ja resetujem, kako resetujem, for opet i, od 1 do n, Arrive, od i je jednako nula i puštam svakog pojedinačno. For i, pripada je od 1 do n, mogu sam u to možda stajem u jednu for petlje, ali nema veze, continu od i je jednako jedan. For i, 1 do n, vidite, spojeli su ove ove dve petlje, sačekam da neko postavi vrednost 1, ne sačekam ja, nego ove ovdje koordinator, pa postavi vrednost nula. Kad sačeka sve, onda on pušta svakog pojedinačno. Ovako rješenje sa procesom koordinatorom ćete vi moći možda da koristite, ali vodite račun, da možda ne formirate dodatni proces. U knizi konkurentno distribuirano programiranje, ove princip je iskorišćen za rešavanje problema prelaska reki. Tamo nije postojo proces koordinator koji je u napred određen. Proces koordinator je bio onaj koji je prvi došao ili poslednji došao da nešto odrati. Mi bi smo mogli da napravimo ovako nešto, tako što će onaj ko prvi dođe postati proces koordinator, ili onaj postoji koji dođe postane proces koordinator, pošto on gleda lokalnu promenjuvo, onda on može da sebe da proglesi, ja sam koordinator i da talgo, ono barijeru koji smo maloče skrenuli da pravimo, realizujemo. Na početku svi čekaju ono da postane n, osim ono koji je poslednji došao. Onaj koji je poslednji došao čeka da sve isprati i onda on može nešto da odrati. Možemo napraviti i takvo rešenje, gde ćemo na osnovu toga dalje je neko prvi ili poslednji došao, tog neko proglasiti za...