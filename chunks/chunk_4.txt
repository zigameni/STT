 i tamp-code pišu na isti unificirani način, a da nije divided. Imamo naznaku da je sve od ovde ove asembarske direktive pa na dalje tamp-code, da je prvi naredni simbol koji sledi u suštini tamp-funcija, dakle, men će biti tamp-funcija. Imamo naznaku na koji način se obavljaju floating-point operacije. Imamo definiću da je tip, odnosno, asembarsku direktivu kojem definišemo da je tip simbola main u suštini funcija, za razliku od tipa nepromenljive i promenljive koji su bili objekat. I ostatak ove teksekcije nam trenutno nije toliko zanimljiv, pošto se tu samo nalaze odgovarajući broj asembarskih naredbi, kojima se postiže u suštini ovo ovde sbiranje i povratak vrednosti nula iz funcije main. Ono što za nas jeste bitno, to je pošto nje naš zadatak u narednom koroku da napišemo linkersku skriptu, to je da su u ovom filu prisutne sekcije, to je tekst, sekcija data i sekcija raw data. Ovo ovde tekst sekcija je samo započeta, onda je privremjeno pouzirana zbog navodjenje početka nove sekcije, onda je raw data zaustavljena i počinje data sekcija, a ovde sa tekst je nastavljena ovde sekcija, ma da taj nastavak nemam previše znacija, zato što ovde nije ničeg ni bilo, tako da čitava tekst sekcija suštinski na ovom ovde mestu. Prebeljaska na pisanje linkerske skripte, preostanam još da asembiramo ovaj file se izvornim asembljarskim kodom koji smo dobili prevođenjem od main.ca, tačnije prevođenjem ovog intermediate file. To ćemo uraditi takođe uspomoć arm non-eAbi GCC i zato ćemo iskoristiti opciju da samo izvršimo prevođenje i asembljiranje bez linkonja, to je opcija minus C. Z toga, ono što ćemo reći, je ste opet kao i prošli put arm GCC izlzni file će sada biti objektni, tačka O, a ulzni će biti main.s i opcija nije minus s na kraju, nego smo rekli minus C, da bi smo imali samo prevođenje i ovo što nam je od interasa to je asembliranje, ali bez povezivanja. I kada ovo izvršimo, dobijemo objektni file, to je L file koji u suštini binarni file, pa ga ne možemo onda na jednostavan način protumačiti u tekst editoru, već sada koristimo neki od alata koji znaju da čitaju ovoj objektni file, da možemo iskoristiti obaju dump, onosno objekt dump arm non eabi obaju dump i iskoristiti neki od opcija za pregled, dakle možemo na primer zatražiti, vidimo koje to sekcije postoje i koji su njihov i flag-ov, možemo tražiti da vidimo disassemble instrukcija koje predstavljaju izvršne sekcije, da možemo tražiti tabelu simbola, pa možemo na primer da krenemo upravo od same tabele simbola, to je minus t i to za naš file main.o. Vidimo da od simbola imamo oni koji su bitni, to je tekst sekcija, pa njen simbol data, to smo već videli, imamo i ro data sekciju, sekcije koje nismo očekivali, imajući vidi da smo imali samo tekst, ro data i data, kao je ovaj nastavak tekst sekcije, jeste ova bss sekcija, jeste sekcija sa komentarima i sekcija u koji su smestini svi oni arm embedded ABI atributi. Ako vidimo sadrže ovih sekcija, a to ćemo viditi za koji trenutak samo da prođemo kroz čita u tabelu simbola, vidimo da imamo i simbol promenljiva, koji se nalazi u ro data sekcij, što je zaista i očekivalo, ne promenljiva je pod ro data sekcijom, promenljiva je u data, to je takođe očekivalo, je data sekcija, u njih se nalazi promenljiva, imamo simbol neinicializovanu i ona se nalazi u specialnoj sekciji, koje je sekcija za koman simbole, pričali smo pre nekoliko trenutaka šta naradi direktiva koman i imamo main koji se nalazi u tekst sekciji. Ako želimo samo sekcije da vidimo, možemo da iskoristimo opciju minus h, pa ćemo vidjeti da je ova bss sekcija u suštini prazna, u njoj nema ničeg i da sekcija koment ima 44 byte veličinu, hjeh sadecim, alo naravno, a arm attribute ima 2d. Ovo ispod što vidimo je su flag-ovi, dakle za tek sekciju važi da ima nekakav sadrežaj, da je allocatable, što znači da za nju treba da postoji alociran prostor u memori, ili je znači da zaista treba i da se ovoj content koji ove postoji i zaista ismesti u memoriu, postoje potrebe da se neke stvari relociraju, ova sekcija je pritom i read-only, što je očekivano jer se u njoj nalazi kod. Za data sekciju takođi imamo content, zato što su to početne vrednosti nekih podataka, u data sekciji ta početna vrednost jesta ovo ovde sedmica, naravno mora da se alocira i mora da se učita u memoriu, ova sekcija i u pitanju su podaci, bss sekcija kao sekcija, koja prestavlja podatke bez inicijalnih vrednosti, ona nema nikakav sadrežaj, nema ništa da se učita u memoriu, ali ono što je bitno i bitno da se alocira prostor, odgovarajući za te podatke bez inicijalnih vrednosti, koji u ovom konkretnom slučju i nema. Rodata sekcija je slična kao i data, jedina razvika je što je read only, kao što joj i samo ime kaže, dok se ove druge dve sekcije kažem neočekivane, jer se ne vide baš direktno iz samog izvornog sembljarskoj koda, imaju sadrežaj i jesu read only, ali ih ne treba smestiti u memori, niti u memori alocirati prostor, nina koji način za njih, one su tu samo da bi prenele neke odgovarajuće meta podatke. Sada možemo preći na pisanje linkerske skripte. Pisanje linkerske skripte je krajnije jednostavan zadatak, kada se uzme u obzir da je jedini posao linkera, da uzme odgovarajući broj objektnih filova, da su mu zadati kao ulaz, i da isakog od objektnih filova prepozna koje sve sekcije, to su za njega ulazne sekcije postoje, da te ulazne sekcije na neki način razmesti po adresnom prostoru, to neki način je ono što ćemo mi definisati linkerskom skriptom, i da onda od tih ulaznih sekcija napravi sekcije, koje se smatri u izlaznim sekcijama. Ne postoji nikakva razvijek izmiju ulaznih i izlaznih sekcija, nego su neki od njih samo ulazne, zato što ih linker dobija na svom ulazu, a one koje su izlazne, to su one sekcije koje linker napravio spajenjem većih broja ulaznih sekcija u neke za njega onda izlazne sekcije. Dokumentaciju komandi za linkersku skriptu takođemo naći na site ugnu.org takođe kao i za assembler u okviru paketa binutils, samo je ld-komanda za linker. Najbitnija komanda u linkerskoj skripti jeste sections i to je komanda kojem se definišu izlazne sekcije. U okviru sections komanda moguće navoditi još neke stvari, koje stvari one su upravo ovde i navedene, ali za nas je najbitnija output section description, dakle opis izlazne sekcije. I u opštnih slučaj opis izlazne sekcije je naveden na ovom ovde mestu. Mi ćemo sada krenuti da pišemo jednostavnu linkersku skriptu i počećemo u...