 Kod bardan, dobro došli na predavanje na predmetu konkurentno i distribuirano programiranje. Odošli ćemo se mi baviti po krevom ovog ovdje naše kursa oosnovna principa. Medjusobno isključivanje i uslovna synchronizacija. Uslavno isključivanje može biti samo jedan koji radi neki posao u neku budku. Uslavne synchronizacije čekamo dok uslov ne bude ispunjen. Učljuštini ko nakon, koga dolazi u ovom ovdje što ćemo raditi u kraje ovog našeg predmeta. Uslavne synchronizacije i medjusobno isključivanja realizujemo na više različitih načina. Danas ćemo krenuti od koncepta medjusobno isključivanja. Kako da obezbedimo, da dva procesa mogu, pa ili više procesa, mogu da rade neki posao da jedan drugom ne smetaju. Da jedan sačeka dok drugi završi pa da dođe i nedeljivo radi to što radi. Znači da ta dva procesa rade isti posao. Ne, nego moraju da se synchronizaju posao koji radi jedan i posao koji radi drugi. Mogu da budu potpuno različiti poslovi, ali može biti samo jedan od tih procesa koji nešto radi u nekom trnutku. Ne moraju filozofije da jedu na isti način. Ne moraju špak gete da žvaću na isti način. Ne moraju da filozofiraju na isti način. Ali je bitno da to rade u nekoj metodi svojoj. Nas ne zanima kako ta metoda izgleda, a nas zanima da mi obezbedimo. Beđu sobno iskičivanje i uslovnu synchronizaciju. Ovo su dva najbitnija koncepta na ovom predmetu. Beđu sobno iskičivanje, da može biti samo jedan i uslovna synchronizacija, jedan dođe posta nekog drugog. Ačo da kažemo kako ide izvršavanje ko dođe prvo, ko dođe posla. I ovo sve što ćemo raditi, ćemo krenuti prvo kroz koncept kritičnoj sekcija. Kritičnoj sekcija je nešto što treba da nam obezbedi, beđu sobno iskičivanje, može biti samo jedan. Sada ćemo u ovom času viditi još dva neka vevno bitna koncepta. To je atmost once property i koncept waita. Kada mi to treba da kažemo da čekamo, da bi smo mogli doda radimo neki posao. I ajde, krećemo sada korak po korak. Šta je beđu sobno iskičivanje? Kad nam to uošta trebamo? To mora svaki po da se pravi li? Nemora baš svaki po da se pravi. Provorom da znamo, ok, šta je to nedeljivo što se izvršava? Šta je to atomski što se izvršava kod nas na racinu? Ako na primer imamo istrukciju, saberi dva broja. I ona se radi atomski. Već, tako je to napravio na našim racinaru, ću samo treba saberim. Jedna istrukcija je u pitanju. Ja to i da hoću, nemogu da rasturim. Znači, ako se moja kritična sekcija sastoji, od samo jedno-jedno ugovećavanja. Nema potrebe za bilo, kakom sihronizacijom. Već je to već odrančeno nedeljivo kao jedna atomska akcija. Atomska akcija može da bude množenje broja. Može atomska akcija da bude izračunavanje faktorijela nekog broja. A može da bude pretraživanje niz atomska operacija. Bitno nam je šta nam hardware obezbeđuje upozoriti. Šta je to što ne može da se podeli? Ne može ono da mi uleti preki na sredini? Da se učešniju dve? Nema ili se desilo jednopravo ili se desilo drugopravo? Nešto o ta dva mora da se desi pre? To je cilj, samo da konstatujemo o medjusomnog istučivanje. Jedno od mora da se desi pre. Za sada nam nije bitno koji će o ta dva da se desi pre. To nam kaže ono što se zove ustovno sihonizacije. Prvo dođe ovoj, pa dođe ovoj. Medjusomnog istučivanje. Nama je sve jedno koji će doći prvi. Samo taj prvi što radi treba da dobije rezultat. Samo da je on radio. Da su sučušljavali tu nekako. Šta smo rekli? Vi želimo da napravimo nedeljivo izvršavanje. Ne jedne ovakve atomskii akciji, jedne instrucije, nego većeg broja instrucija. Prvo želimo da napravimo da se nedeljivo izvršavanje. Što ako jednu krupnu nedeljivo akciji. E, taj skup izkaza se naziva kritična sekcija. Znači, mi želimo da obezbedimo veći broj atomskih akcija da se izvrši kao jedna nedeljiva akcija. Kao to se izvršilo kao celina sa podacima kaj su bili dostukli na podveku. Nije moglo se desiti nikako učešljavanje. E, sad je pitanje. Dalje mi moramo svaki pot da pravimo ovakvu synchronizaciju? Ili ne moramo? Znači, dalje mi moramo svaki pot da pravimo neku synchronizaciju? Ili će neko peći to namada obezbedi da poto? I postoji sad jedno svojstvo koje nam kaše sveće stvar. E, imamo jednu kritičnu refereršu. Znači, jednu promenjuvu koju koriste. Koju menja neki drugi proces. I ako je ispunjeno sveće stvar. Imo mu neku dodalog vrednosti, x je jednako nekom b. Ako ima svojstvo, ako v, tadrži najviše jednu kritičnu refereršu, a x se nečita od strane drugog procesa. U sad rekao. Ovo ovde v je neka funcija koja koristi neku deljenu promenjuvu. Na jednom mesto je pročita, je onda pravi kako godno će izračunavanje s ovom promenjivom. I ako to upisuju neku x koja je lokalna promenjiva. Ili, ako v ne sadrži ni jednu kritičnu refereršu, sve se izračunava nad lokalnim promenjivama. I x se čita od strane drugog procesa. A u ovom ovde snuči, ako ispunjeno jedno od ova dva pravila. Nama synchronizacija ne treba. Uopšte dodala vrednosti, a x je jednako v je sama po sebi realizovanja kao atomska akcija. Ako imamo da je x, neka lokalna promenjiva koju izračunavamo na osnovu jedne deljene promenju, koju smo jednom pročitali sam. A posne napravili kako godno ćemo izračunavanje. Nama synchronizacija ne treba. Ili, ako upisujemo u neku deljenu promenjivu na osnovu izračunavanja, po rojstekla samo na lokalnim podacima našim, nisu deljenim ili konstantama nekim. Nama synchronizacija uopšte nije potrebna. Ispunjeno je svojstvo at most once property. Maksymalno jedan se igra sa tom promenjem. Ako je maksymalno jedan koji radi nešto s tom promenjemom, nema synchronizacija. Ako imate jedan proces koji radi neki posao i nema dva procesa, venite. Synchronizaciju nemojte slučajno ostavljati. Ubit ćete performance. Synchronizacija znači da ima više procesa koje treba da se nekako uredi njihovo izračavanje. Ako u sistemu gdje imate jednu nid, stavite synchronizaciju. Viste, onda pokašite osnovno nerazumevanje, ponašanja sistema. Nemogu ja da se synchronizujem sam sa ovom, pa nisam više struka licnost. Vada znam šta radi. O programu je to mnogo lakše koji ljudi komplikovanu da znaju šta radi. Program zna, program prati sekvencij instrukcija koji treba da izrašava. Ako da imate program, jedan jedini program, pristupa neko...