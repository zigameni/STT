 moguće. Rako ne bi bilo moguće. Ovako na što radi. Zavisio od privilegija koja imate nad nekim komunikacijem. A mi možemo ovdje da isprogramiramo sve i svaštveni. Mogu ja da čitam i ško goću komunikacijeno kanala i da upisujemo koji godoću komunikacijeno kanala. Ano da upisujemo koji godoću komunikacijeno kanala, suštini mogu ja ovve gde radi. Zamislite da je to poštansko samduče, mailbox. Ja mogu da pošljen po ruku suštini bilo kom. Ali ja ne mogu da pročitam po ruku iz bilo koog poštansko samdučeta. Ja mogu da pročitam po ruku iz svog poštansko samdučeta. Znete, postoji razlika. A u odusu na ono što smo imali. Ovdje ćemo moći da napraviti, da neko ili moći da nekako kažemo, da samo jedan proces može da čitam nešto i sveštveni. Samo jedan proces suštini bioznatravalo. Da svako ima svoje poštansko samdučeta, što svima sve mailbox u koji može da čitate poštu. Ako je ovdje poštansko samdučeta i jedan proces izjedno. Da on je čitam po ruko. I je baš poživno da veći broj procesa čitam po ruku iz poštansko samdučeta. Išto to, kao čitam po ruku su neček tuđeg telefona. Pomalno je težet to da odmah. Ako se čitati po ruke koji su nebaš do tomu. Ako liko neko ima različitih samdučica kroz koji može da se obraca. Dali neko ima jednu samduče ili taj komunikativni kanal ili ima više tih. Ovo će zavisiti od kretni implementacije. Ko dnekih sistema ćemo imati da jedan proces ima jedan. I kada će ili kanal. A u nekim sklučim ćemo imati da jedan proces može da se veći broj komodiji. Ale uzavisimo se im sve treba da komodiji. Ok, ja da krenemo da koristimo ovo sad što smo. I smo sendirsi, imali smo komodiji. I sada fojćemo da pokožemo tvorova. Prvi način povezivamo. Ovo smo ovde razmatrat. A je nešto što se nazivano Filters and Filters. Filters ili filter. Imaćemo jedan ili više ulazni kanala i jedan ili više izlazni kanala. Što smo tu pametno napravili? Što pametno mi ovde nismo napravili? Imaćemo da se imamo jedan čvor, a kod prima neki poruki i prosteđu ih nekom i dalje na dalju obradu. A ovo ovde je nešto što bi trebalo da simulira obradu kod data flow systemu. Dođemo nešto obradimo, možda sačvamo, nešto možda poškaj. A čvorovi koji imaju jedan ili više ulaza i jedan ili više izlaza. Svoje porovi, filterski proces i koji će u mi koristiti sada u ovom ovde prvom. Imaćemo više jedan ili više ulaza, jedan ili više izlaza. A to što ide na izlaz, če možda biti orignalna poruka, možda će biti neka poruka koja se dobija kombinacijom. Prjetkodne primljene poruke, netkodnih primljenih poruka, i neki obrade na cim tim, što smo treba otnog. Ako budete nekad gledali tokove podataka, tokove obrade podataka u javi ili ako budete gledali spark, ide ćete da tamo postoj baš ovako nešto. Ako budete gledali datastreamove u javi ili kažem spark, sve budete gledali spark, i sistem vi dobijete poruku, obradite nešto i gledate da prosledim sann to narenom foru u lantu ili neću proslediti narenom foru u lantu. Znači vi sad gledate kako želite da bude povezan taj vaš sistem i ovdje će reženja zavisiti u toga kako izgleda topologia našem rešem. Šta smo rekli? Imamo jedan ili više ulaza, imamo neko stanje, šta smo zapomtili kod tog našeg sistemu, imamo neki predikat koji kaže šta taj naš sistem radi i imamo jedan ili više izlaza. Primir za ovosnu tokove obrade, streams koje imate u javiska o standardne proteke ili imate mogućnost da koristite spark, naprimer, kao jednu noviju intratakcij u sekundu. Ili imate data flow u paradigmu koja ispodrata. I sad da hvacimo da vidimo jedan trivialan primjer. Kako ovo ovde može da se primjenje, taj trivialni primjer je dođe byte po byte sreba da pošedimo karakter po karakter. Čivamo jedan ulazni tok, jedan izlazni tok. A odostno jedan ulazni kanal i jedan izlazni kanal. Tamo što tipove koji dolaze, podataka i tipove koji odlaze nisu isti. Olazi byte po byte, a treba da odlazi niz po niz. Kao string po string. A će želimo da u sustini radimo vrlo jednostavno operacije, to je operacija prepakivanja. Ista radi, onda ovaj ovde je naš proces, on treba samo da primete poruke. Ok, primi poruku. I ok, dok le god, ne primimo end of line ili dok ne primimo cel jedan iz, primi pošadje. Aha, ne šadimo ništa. A, to ne šadimo ništa. A rektismo treba da prepakujemo tu pošadje. Zmimite, ne mora odmah da se pošadje to što smo rekli. Ima neko stanje taj naš sistem. Ista radi, onda ovaj ovde je naš sistem. Vrti se u jednoj petlji, kaže primibite. Mesti taj jedan byte u ovaj naš niz, dok le god ne dođemo do maksimela dožinje tog naša niza ili dok neko ne pošadje kraj tog stringa. Ovde je stavljeno da je to cr. I to pakove. Na kraju ćemo mi upakovati jedan karakter end of line, na kraj tog našega niza i to ćemo poslati na iz. Sa dalje to maksi ili maks plus 1 ne vam pojma. Tamo vodite računa o dimenzijema, kada budete neko programirali. Primi dok se ne napunite cita taj niza, onda pošadimo to jednom kao i danu resetom obrojač. I ovaj ovde naš proces se vraće gore na počet. Prosto čestnici baš ovako izgledati sviti nešto. Čestnici se u jednoj bezkonočnih petlji. Primi nešto, odradi nešto, sačuva i nešto. Primi nešto, odradi nešto, sačuva i nešto. I netko kada će se oni završavati. Najčešći će to biti jedno bezkonočno petlja, koje treba da se radi neka obrada, dok vego treba da se to radi. Zato i s toga može da se iskuči, a prijemom nekom specijalnom znaka kroz taj naš ula. Ali za sad nas to ne zanimo. Ovi servenski procesi, i ovih procesi će način će tako izgledati. Vrteće se u jednoj bezkonočnih petlji i radi će dok vego treba da se radi. Čestnice baš isku tako vidite i u javi, kada budete projektovi. Server, server ima ostomu bezkonočnih petlji, valtruje, isko se iskače samo kada se dobija odgovarajuća komponent. Svijete, nije ništa komplikovanu, kako smo dekvarisali. Ove naš proces je rekao da ima ulazni tok podataka, kaj smo nazvali input, koji ima karakter po karakter. I jedan izmazni tok podataka, koji ima niska raktera, koji može da pošalje odmah. Mi šaljemo, neko drugi ko prima će morati da ima druga če imenovanje, ovih obde kanala da bi im neko mogu da kaše, ona i tamo narodnju u lantu će imati ka ulazni tok. Ovo ovde što je niska raktera. Imamo ulazni tok, koji je karakter po karakter, a neko, s kim smo mi povezani u jednu ovakom režu, ima to kao izlazni tok. Znači, šta smo rekli da mi ovde pravimo? Ovo je ovde naš proces, koji smo mi upravo napisali, ima i jedan ulazni tok, ima i jedan izlazni tok. Jednu, ove komunikaciju, jednu tačkipu, ovde koja je ove naš kanal, ove karakter, ovo ovde je string po string, odnosno, neko je linija. Požete tako da zamišljete da ovo ovde izgada, u štini imamo jedan ovakom tok, da i s našem procesem najvjerovatnije izgleda. Uvjet, u jednu lanaac. Ako i kova ubezvuju tu, lanaac to se najčešće naziva pipeline odbrada. Vezanicu u neku protocnu obradu, da se vada sve ubezvuju u neku obradu i šalje dalje, čim ne možeš da šalje dalje datke naopra. Je ono što mi sada hoćemo da radimo. Mi sa, ali na narodnom času, je da vidimo, da li možda možemo da ove čvorove