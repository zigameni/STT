 Čisto da bih reko sa tih par informacija koje su bitne, koje se tiču lab vežbi, pa da to se bude snimljeno za ove koje će kastnije da gledaju, snimke ja nadam se do lab vežbe, a svak koji ćemo posleti mail-ova vešte. Dakle što se esi smerati, če dakle ovo se sad odnosi samo na esi smer, lab vežba prva iz zaštite podata ka će biti sledaće nedalje, pa što smo ne javili u prvoj nedalji nastave, i najverovatnije će biti u to rak. Dakle to nam je neki preliminavni raspored koji nam je poslao kolega Marko Misić koji sastavlja raspored lab vežbi za ceo semestra za sve predmete. Tako da praktično to stoji za sad da je u torak, međutim i dalje nismo sigurno, to je svo je nije siguran da li će se nešto komerati, jer ima tu nekih pomjetnji što se tiče trećaka, valj da njima nešto raspored zgusnuti, nije baš šlepo to rasporedi na kako treba, tako da ne znam da li će se nešto menjaći. On je rekao da će sutra u toku dana da pošalje finalni raspored i ta ćemo vam i odmah i poslati mail sa prijavam za prvu lab vežbu, ali čisto da znate da se ne iznenadite, ta prva lab vežba će biti u torak i to u prepodnjenim časavima. Tako da trebalo bi da bude u 3 termina od 8, od 9,45 u dana 11.30. Tako da je to, očekujte to. Na samo i prvi lab vežbi će biti gradivo koji ćemo obraditi dana, to je des algoritm, kao što prepostavljate već. Nismo stigli da doveršimo prezentaciju, na vreme pa nismo okačili na modul, ali evo sad imamo spremno, tako da ćemo je okačiti čim se završi časa. Potrudi ćemo se sledeće nedalje da kacimo prezentacije pre nego što budemo imali same časa, jer ste to tako tražili. Valjda da vidite šta ćemo da radimo i to. Tako da taj des algoritm dolazi na lab vežbi prvoj. I praktično nemojte da vas brine što je sad lab vežba od predljike za nekih 5 dana, dakle to što budemo radili dana, svi da ćete veoma jednostavno, a sama lab vežba još jednostavnija, dakle svodi se na bukolno i ščitavanje nekih stvari i simulatora. I sve ćemo vam objasniti u mailu kako je šta, tako da praktično čak i da ne znate algoritm, oči ćete da se snažete na lab vežbi koja traje sa tipo, a generalno, evo baš sam danas gledao prošle godine vremena završavanja, pošto se na modlu radi, dakle tamo se zokružuju odgovor i ljudi su uradili lab vežbu u glavnom za 45 minuta do satpremno. Tako da praktično to sta jednostavno to i naučite se sigurno u vrlo kratkom roku, tako da ne brinite što se lab vežba približila nekako, verovatno, vama nenadanom. Ali jat. Dobro, da imate neko pitanje za mene prenego što počnemo s današnem lekciju? Da li će nam biti dostupan simulatora na modlu da ispravamo kod kući? Hoće. Hoće. Poslaćemo sve, dakle u tom melu u petak, simulator je na sajtu predmeta, ali je zip pod šifrom, tako da poslaćemo u petak preko meling liste, šifru da mošto da otpakujete simulatoru da ispravate sve kod kući. Hvala. O kolega Igor kaže, znali se za RT i kad će biti labovi, dakle, generalno labovi je, evo odma da vam kažem, a da trebalo bi da to neko rekao te prve nedelje, ili Pavle ili Maja, ali za svaki sluči, ukliko nisu, ili da ponovimo, čak i da je su rekli, labovi idu ovako, dakle, u četvrtoj nedelji, to je sledeća nedelja, i da je si, pa u petoj nedelji RT, pa u šeste nedelji esi, pa u sedmo RT i tako ćemo na smenu. Dakle, imamo tri lab vežbe u tih šest nedelje, dakle, da, vama, dakle, na RT i u nije sledeće nedelje lab, nego one tam, i onda se smenjujemo, dakle, na dve nedelje svaki smer ima lab vežbe. Sa neznam da vam se takođe spomenuli, na predavanjima i važbama prve nedelje, postoje tri lab vežbe koje se tiču des algoritma koji ćemo raditi danas, i s algoritma koji ćemo raditi sledeće nedelje, i praktično RSA i DIFI-HELMAN algoritama koji obrađujete ove sledoće nedelje na predavanjima. S obzirom na kapacitete lab vežbi, oto je slav prostoria, mi smo ove godine morali da nekako smanjimo te lab vežbe, pa smo odlučili da to smanjimo tako što ćemo prosto taj drugi algoritm i taj treći algoritm koji su inače bili drugi i treći lab vežbe da spakujemo u jedan termin. Prosto ćete imati malo više algoritama da učite za tu drugu lab vežbu, ali praktično nije to ništa sa nešto speciellno teško, vidat ćete, te dve su još lakša da ove prve, dakle te dve su ljudi radili za pola sak. Prosto manje su zadaci i simulatora možete neke stvari da copy-pasteujete koje na primer za ovaj des algoritam ne možete, iz nekih praktičnih razloga, tako da prosto čisto značite da ćete dve vežbe biti spojne, ali ja to informacije ćete dobiti zvaničnih prekomelling liste, a taj treći termin za lab, dakle u 9. i 10. nedelj, ako nam tako pada, ili 8. i 9. nedelj, na razljima da sam se preračeno, to su nedelje za nadoknade, dakle ukuliko bilo koji z bilo koji razloga, da gleda nebitno dalje corona u pitanju ili neki drugi razlog, nije prisustvovo na jednoj od ove dve sada lab vežbe, moćete da ponovite tu lab vežbu u to i nedelji, pri čemu do sada je bilo da se jedna nadoknada je vesplatna, a druga nadoknada bi se plačala i prepostila da će tako sada i da ostane, ali sve informacije ćete dobiti sutra u toku datanju. Dakle, dalje još neko ima neko pitanje? A ti spojene labovi, oni će sa cenivati, nezavisnali tako. I da vas pitanj samo oni kada su spojeni, to je i dalje sada im povejme na termine. Tako. Dobro još neko pitanje? Dobro, ako nema pitanje, onda ćemo da počnemo s današnim časom, odnosno, završimo prvo, ono što nam je ostalo predhodne nedelje da završimo, to su rotvar mašine, a onda ćemo da pređemo na taj des algoritam. Ja ću sada sklonim čet ovaj negde, da ga sklonim, da mogu da vidim u stvari pitanje neko koja mi iskače. Ali, u koliko ne budem video pitanje koja mi iskače, možemo vas lobodno se uključite u razgordaka, nema nas ovdje mnogo, kako sam videl, ne, tp. 50 na sima. Nemojte da se stidite, da pitate uživo pitanje. E da prav. Možeš jedno onda uživo? Možeš. Ništa, samo da pitanje još ovaj nadok na dejel, to znači da možemo i da popevljamo neki lob, ako nismo zadovoljni pojanima, ili zbaje baš... U pitanju je baš nadokna, dakle, samo ako niste izašli. Jasno. Ništa. E da prav. Dakle, na predavanjima ste sada nadam se, završili rotvar mašine i videli što su to rotvar mašine i kakve verzii, a tif rotvar mašina su postale kroz istoriju, i videli te nekih storijske činjenice o samim rotvar mašinama i generalno se upoznali sa konceptom rotvar mašina i s njihojim načinom funkcionisanja. Tako da mi ćemo ovde obraditi dva zadatka iz rotvar mašina, jedan koji je vezan za šiprovanje, jedan koji je vezan za desiprovanje i prosto kroz te zadatke ćemo videti ponovu, odnosno se početiti kako funkcionišu rotvar mašine i šta je sad tu nama značajno, zašto su one dobre, zašto nisu dobro i tako da. Kažav je prvi zadatak odnosno sad već 9 na ovih prezentaciji, nas licija prikazana trenutna konfiguracija rotvar mašine. Kaže prikazati postupak šiprovanja poruke ne boje vedro, koja predstavlja del neke veće poruke. Liko se zna da je do ovog trenutka šiprovan 671 karakter? Smatrati da levi rotor najbrži, desni najspori, a da rotori rotiraju na dole. Dakle, evo ukratko da se pocitimo sa predavanja, rotor je ništa drugo nego ni iz nekih monoalphabetskih šifara, koji prosto menjaju konkretno slova koj dolaze na ulazima, nekim konkretnim slovima koj dolaze na izlazima. Sam rotor se slova se slova slova se slova slova slova sa njegolikovih rotorom, kog sam se dolazila, ako smo ih vizualno prikazali, ali gentalno to su otprilike bile neke živce.
 te žice povezane. Te žice su povezane baš ovako kako smo predstavlili ovim brojkama, tako da na ovom ovde ulazu mi imamo nešto, neki broj jedan koji je žicom povezan za isto imeni izla, dakle za isto ovu brojku jedan i onda je praktično ta žica se negde završava ovdje. Ono kako se šipruje svako slovo ovim rotormašinama, jeste na sljedeći način. Dakle prosto, ono što nam dođe na ulazu aktivira prosto neki signal na toj žici i kako prekostruje se kroz tu žicu prenosi taj signal dok se ne upali neka lampica na ovim delovima kojima se predstavljaju slova, koja predstavljaši sifrovanu našu povuk. E sad kako su rotori povezani između? Pa dakle u ravni gde je neki izlaz i ula sledaćeg rotora, te dve tačke su povezane takođe žicom, tako da praktično između svaka dva rotora imamo ovako paralelne neke žice sa različitim ulazima i izlazima o zmačenim različitim brojkama, a unutar samih rotora su te žice povezane po ovim brojkama. Tako da praktično u koliko mi sad želimo da šifrojamo slovo i, ono što će da se desi, jeste da će signa lovom žicom koji sam sad povezal na ove nače da se pošalje i sa neke druge strane nekomi će da se aktivirava lampica koja označava slovo o i time smo mi praktično slovo i šifrovali slovom o. I sad kako ovo se dodatno razliku odnosu na neki nizmono-alphabetskih šifara, jeste da se nakon svakog šifrovanog slova ovi rotori rotiraju na gore dole sad davesi kako je koja implementacija napravljena. Ali ovdje kaže rotori se rotiraju na dola i kaže levi rotori je najbrži. Što to znači? Generalno jedan od rotora se uvek rotira nakon svakog šifrovanog slova. Pa sledaći rotor se rotira tek kad se ovaj najbrži zarotira pun krug i tako dalje, koliko god rotora ovde imali. U opstim slučaju možemo dih jomu koliko hoćemo, ovo je jedan primer rotor mašine sa 3 rotora. Tako da praktično mi kada šifrojmo jedno slovo, ovaj ovdje prvi rotor najlevlji će da se rotira za jedno polje na dole, tako da će na primer ovaj red 24-26 da nam dođe ovdje. Odnosno slovo blče sada da nam bude vezano za 24-ku, koja je onda nekde vezana ovde, pa to pošto se sve rotiralo na dole, to je sad dalje vezano za 17-cu i tako dalje. Dakle, nakon svakog šifrovanog slova, sve ovo se rotira kada dode. E sad, ovaj srednji rotor, ova dvojka se rotira tek kad se prvi rotor rotira ceo krug, odnosno kad se šifroje 26 karakter, s obzirom dovdje radimo sa engleskim alfabetom, a ovaj treći rotor rotira jedno polje na dole, tek kad se ovaj srednji rotira 26 puta, odnosno kad se ovaj prvi rotira 26 puta 26 puta, jer tolko je potrebno ovom drugom da se rotira za 26 puta. I sad, ovaj treći rotira za jedno. I tako da. Prosto to je našto ukratko da vas pocitimo kako funkcioniše rotor mašina. A sad, prenego što počnemo sam za datak, te ovaj bih da vas pitam, da li vam je ovo poznato se predavanje, odnosno da li našto trebamo dodatno da pojasnim, jer sam ovako prosto nekako uopšteno samo vas pocitio na celo funkcionisanje rotor mašine. Dakle, da li imate neko pitanje, što se samo funkcionisanja mašina tiče? Ja imam pitanje jedno. Slušam. Da li se zna možda treba laboratorijska vežba da budi nevezane za konkretno datak, ali za laboratorijsku vežbu da li se može zna kada će biti prva laboratorijska vežba? Koji ste smer? Soferski. Znači, utorak se biti najvrvatný. Utorak najvrvatni. Hvala. Istam. Još neko pitanje? Dobro. Kaješ da je trenutno šiprovan 671 karakter i sada je mašina u ovom položaju koji je predstavljen sa slik je desno? Mi dalje treba da šiprojem ovaj neki ostatak poruke nakon tih 671 šiprovanog karaktera, prosto da od ove konfiguracije počnemo imajući to nešto u vidu. I ono što praktično mi ovde sad možemo duredimo, znači, da je sve ove rote, da je sve ove rote, da je sve ove rote, da je sve ove rote, da je sve ove rote, da je sve ove rote, da je sve ove rote, da je sve ove rote, da je sve ove rote, da je sve ove rote, da je sve ove rote, da je sve ove rote, da je sve ove rote, da je sve ove rote, da je sve ove rote, da je sve ove rote, da je sve ove rote, da je sve ove rote, da je sve ove rote, da je sve ove rote, da je sve ove rote, da je sve ove rote, da je sve ove rote, da je sve ove rote, da je sve ove rote, da je sve ove rote, e126, odnosno 21, ako se ne varam, odnosno od prilike smo blizu toga da rotiramo neki od ovih rote. Na Sad, ovaj levi rotor se svako kuratoerati svaki put. A ovaj desni rotor praktično, s obzirom da nam je ostalo još samo 5 karaktera da šifrovamo dobroja 676 koji je deljiv sa 26, to znači da za 5 narednih karaktera će ovaj drugi rotor da ostane u isteg poziciji, a nakon petog tog šifrovanog karaktera će rotor srednji da rotira na dole. A ovaj treći rotor ekli smo šifru do rotirat na svakih 26 x 26 676 karaktera, tako da i on će isto vremeno sa drugim rotorom da rotira kada završimo sa šifrovanjem tog 676 karaktera. Tako da praktično ovde sada šifrovamo poruku na ovaj način koji sam opisao, imamo slovo n, to je 672 karakter, vidimo gdje njegovo ulas na trojci, nađemo trojku na izlazu prvog rotora i paralelno uđemo u drugi rotor. Tu je kjec, nađemo na izlazu kjeca iz drugog rotora, paralelno sa kjecom sa trećem rotoru na ulozu nalazi 9, nađemo 9 na izlazu, avo je dole, i na izlazu paralelno na ovom mestu gde su šifrovani karakteri se nalazi slovo y, tako da n šifrovamo slovom y. Tako šifrovamo i 673, 4, 5 i 6 karakter, to je ovo slovo j koje smo šifrovali slovom x, i sada nakon 676 karaktera ovi svi rotori rotiraju na dolog. Međutim, naravno, moramo da vodimo računa da ovaj prvi rotor, vidite ovdje da u prvom redu 24-26 trenutno već u sledaćem, sledaćem, sledaćem iteraciju, odnosno šifrovanjem sledaće karaktera, taj red prelazi jedan red ispod. Tako da taj prvi rotor prosto rotira nakon svakog šifrovano karaktera, to ne smo možemo da zaborati. A kažem, nakon ovog 676 karaktera prvi rotor svaka korotira na dole, a izračunalismo da će i drugi i treći rotor da rotiraju na dole. Tako da ovaj prvi red će već na sledaće slic, ovo 10, 7, 5, 1, 9, 4, da se nađe kažto vidite u drugom redu, jer su oni svi rotirali na dole. Tako da na dalje šifrovanje ide istim postukam, sada slovo je šifrojmo na ovaj neki način i dobijemo slovor, i tako dađe dok ne dobijemo celu šifrovanu poruku. Dakle, šifrovanje uvek ide na isti način, bitno je samo da nakon svakog šifrovanja ovi rotori možda moraju da rotiraju na dole, uz avisnosti od toga do kog smo karaktera, stegli uz avisnosti od toga koliko slova imao alfabet. Dobro, dali vam jovo bilo jasno, da imate neku pitanja? Ovo bi trebalo da se proradili malo i na predavanjima. Ja imam jedna pitanje za ovaj zatak vezano. Ovo se reprezentativan zatak za kolokvijom ili tako nešto ili je više... Ovo je kolokvijomski zadatak. Idemno je prelično jednostavan, ali izgleda dosta nezgodno jer nećemo moći da crtamo sva stanja, nego treba opampti tih desna vas. Tu moja... Mislim, kako sam ja to radi o kolokvijom, kad sam pohadjao predmet. Jestem da praktično samo negde sa strane brojim koliko mi se svaki od ovih rotora pomerio i onda na primer ako znam da mi se ovom je sad slikak koji sam dobio na kolokvijom i sad na primer drugi rotor mi se rotiralo dva put, drugi rotor mi se rotiralo jednom. Sad znam da prosto ova petica, dakle idemo za dva mesta gore, jer mi ova petica posled dva rotiranja došla u ravan sa slovom i, tako da idem dva mesta gore, nađem peticu i sad pošta ova petica i s ove stesne strane bila dva mesto doleto, znači da ću ovdje praktično da izađem iz petice novog keca. E sad tu neću direktno ući na keca jer mi ovo roči...
 rotiralo, naprim. jedan put na dole, nego ulazim na 26-cu, dakle opet idem na gore i tako dać. Dakle, na ulaz uvek na gore idemo na liko puta koliko mi je praktično rotirao rotor, a kad nađem izlaz idem to liko puta dole, odnosno to što mi je rotirao rotor. I prosto tako nekako sad snalazite se i gledate gde je šta stiglo i šta će u štada šifroje. Neki studenti su to, sad već kad sam postava asisten, kad sam pregledao vežban, ki je neki studenti su srtali nakon svaki iteracij celil rotor, što sad od uzima dosta vremena, ali je to verovatno im je postavilo lakše da povezujete te stvari šta se u šta šifroje, a neki studenti su deo rotora precrtavali, naprim. prvih nekoliko redoba i onda na osnovu toga im je nekako lakše da zapjuče gde je šta dospelo. Tako da je to. To vam je odgornapitanje, dakle ovo jeste baš zadatak sa kolokvijom od pred ve godine tako da može vaku nešto da vam se pojavi na kolokvijomu. Imate vjostne. To je izgleda zanimljivo, hvala. Nista, nista. Ima ili osnep. Ima ili koliko ima zadataka na kolokvijomu? Pa to ne moram praktično napreda vam kažemo. U suštini mislim da je prošle godine za esi smer subila po dva zadatka na svakom kolokvijomu, ozerte i subila četri zadatka na kolokvijomu. Tako da, ali to ne mora da znači da će biti i ove godine tako. Prosto zavisi od veličine zadatka. Naprim. kad je bi ovaj rotor bila subaš dva zadatka. Hvala. Niste. Niste. Ništo neko pitanje. Dobro. Ovoj tessiti zadatak je takođe kolokvijomski zadatak od prošle godine. Tad nekako svake godine te kolokvijomski zadatak je dodajemo u ove prezentacije. Tako da svakih godine imamo više i više zadata kojih prezentacijama, što je studentima, vrlo, dobro, za vežbanje. Međutim svake godine se na kolokvijomu javi neki zadatak koji niste videli ovde. Prosto ne želim od učite napamet, želim da vidimo da ste razume li ove algoritme. I onda nekako se studenti, mislim, ne svi, naravno, ali neki se nesmadažu timi nekim zadacima. I konkretno baš prošle godine u prezentacije postojo 9 zadatak koje je vezan za šifrovanju rotor mašinama, ali nije postojo ovoj zadate koje je vezan za desiprovanju u rotor mašinama. I onda su svaštav ljudi pisali, jer prosto nisu sad schvatili kako bi funkcionili salo desiprovanje u ovim rotor mašinama. Mislili su da je mnogo komplikovanje iako je praktično stvar jednostavna, dakle, kao i za sve predkone algoritme, ovde se stvar svodi na neko vračenje u nazad kada radimo desiprovanje. Kaža zadatak, imamo nas lici ponovotrenutno konfiguraciju neke rotor mašine, koje se koristi za šifrovanje neke veće poruke. I sad istu tu mašinu koristimo, dakle, koristeći istu mašinu, poruka se desiprove, a do sada je desiprovanu 308 karakter, dakle, i 308 je desiprovanje. Smatrati da levi rotor najbrži, desni rotor najspori, rotor i rotira i na dole. Dobro. Koliko puta je rotirao svaki od rotor od ovog trenutka? Nam je prvo pitanje, drugo pitanje da nacartamo početnu konfiguraciju prva tri reda, reda, ove rotor mašine, dakle, kako su izgledala tri reda za rotor mašinu za slova A, B i C i onda da prikažemo postupak desiprovanja nekoj dela veće poruke koji ovako izgleda. Dakle, slovo L nam je 309 karakter koji se desipruve. Pa dobro. Koliko puta rotirao svaki od ovih rotor od ovog trenutka? Lako možemo dizračunamo, tako što prosto ovo 308 podelimo sa 26 ili nađemo stati ktideljnju sa 26 i tu nešto gleda. Kako znamo da je ovaj prvi rotor, nakon svakog šiprovanog karaktera rotirao, onda znači da taj prvi rotor baš 308 puta rotirao. Sad koliko je to u odnosu na početnu konfiguraciju nije nam bitno ovom prvom pitanju. Ovaj drugi rotor je rotirao svaki 26 put, tako da mi praktično podelimo 308 sa 26 i vidimo koliko, dakle celobrojno deljenju pitanju i vidimo koliko puta je ovaj drugi rotor rotirao. Na isti način vi smo izračunali koliko je treći rotor rotirao, tako što podelimo 308 sa 676, jer ono nakon svakog 676 karaktera rotira jednom i vidimo da ovde on nije uopšte ni rotirao, dakle ovo je njegova početna konfiguracija. E sad početna konfiguracija prva 3 reda opet možemo da dobijemo na osnovu ovih izračunavanja. Dakle ako znamo da je prvi rotor rotirao 308 puta, to znači na dole, to znači da mi ovaj rotor možemo 308 puta da zavrtimo na gore i da izračunamo gde će koje od ovih brojiki da se nači. Naravno to nije nikako praktično vako vizualno da mi radimo, a svakako nije praktično ni generalno da vrtimo 308 puta, već prostim izračunavanja možemo da vidimo koliko se on pomerju u odnosu na neko početno stanje. Dakle pošto znamo da će nakon svakih 26 karaktera, ovaj prvi rotor da se rotira pun krug praktično. Dakle nakon 26 puta, ovo 24 će ponovod da dođe ovde u paraleli sa slovom a, mi možemo da nađemo statak prideljenju broja 308 i 26 i što je 22. I da time zaključimo da je on praktično nekoliko puta, sada nije bitno koliko puta, ovo je greš, dakle, nekoliko puta, sad nije bitno koliko puta je on punih krugova odradio, ali nakon tolik tih nekih n krugova koji odradio, on je još 22 puta rotirao na dola. Što znači da mi treba njega da vratimo 22 puta na gore, što nam je isto kao da ga vratimo 4 puta na dola, jer 22 i 4 u zbiru daju tu 26. Dakle, da li ću u dvojku 22 puta da vratim na gore, pa ću je dovesti ovde u ovaj red ili ću je samo 4 puta zavrtiti na dole sve jedne, dakle, mi se nakoliko pijemo vama to kako god odgovara vratite, ali prosto, ako nekim izračunavanjima možemo malo da smanjimo posao sebe. Dobro. Drugi rotor, takođe, kažemo, rotiramo 4 puta na dola, treći rotor ne rotiramo uopšte. I prva, 3... Zašto drugi 4 puta na dola samo? Mm-hm, sada ćemo da vidimo. Dakle, ajde da izračunamo, mrzim da je računamo. 308 sa 22 mi je 14, dakle 308 podeljeno sa 21... Ne, sa 26, da ga da jelim. Je 11, sa 26 je 11 i neki ostatak prideljenju, to mi je 22. Al tako, samo da vidimo. Mislim da je to zbog ove graške gore, mislim da je to isto graška, tako da ove trebalo bismo ako 11 puta. Da, da, da, da, da. Ne go računam na telefonu sada pa gledamo, ja je ste svarno smo pogrešili, ovdje smo o ovo kao kteli, kao podeljena se kalkulatora, al smo na kraju prideljenju, praktično, kao što sam reko malo pre, delimo 308 sa 26 da bismo videli koliko puta je rotirao ceo ovaj rotor i on je rotirao 11 puta i imamo neki ostatak prideljenju pre čega će on praktično da rotira još po neki put. Tako da onam je rotirao 11 puta. E sada koliko ćemo onda morati puta da rotiram ovaj drugi rotor imali nekod gore? Na gore, ako liko na dole i šta nam je bolje? 11,15. Tako, 11 je manje, ma da su slični brojevi, praktično on je 11 puta rotiro na dole, tako da 11 puta možemo da ga vraćamo na gore, tako da ovaj ovde deo nije tačan, ali ćemo ispraviti u prezentaciji. Treći rotor svakako nije rotirao ni jednom, tako da njega opšte ne diramo, njegova početna konfiguracija je baš ovakva, kako je i trenutna konfiguracija. Dobro, ili imate neko pitanje o ovom trenutku? Možeš piti? Samo nije mi jasno kako se radi 10 pravenje, ali se radi tako što se u kratisku čifre rotor i dono dole, znači kad se daš sve rotor i dono gore i ulazna sekvenci su...
 znazat ubačo ili kako? Pa, u sluštini, svodi se na isto kojem ćete vi redosledom ići da ćete ići istim ovim redosledom, kako smo mi ovde naveli, dakle, sleva na desno i rotirati sve rotori na dole ili ići sada desna na levo i rotirati sve na gore. Mi smo ovde rekti da se ista rotor mašina koristi za dešifrovanje, tako da praktično to znači da se rotori samo rotiraju na dole, nije nemaju mogućnost da idu na gore i uvek je levi najbrži i tako dalje. Tako da mi moramo ovim redom u ovom zadatku konkretnom da desifrojamo jedan po jedan karakter koristići istu ovu rotor mašinu, samo naravno ulazimo sa desna na levo. Eto, tu je jedina razvikal, generalno implementacija te rotor mašinja može da bude različita. I generalno za dešifrovanje ne gde možemo onda da ih i vrtimo i na gore ili sa zavisi šta je kako zamislio. Ali u ovom zadatku je rečeno da se ista rotor mašina koristi na stranu i ono koje prijima poruku, koja rotira u suštinistu samo na dole. Tako da kako nam on pošalje, evo, onam je poslalo neko slovo c, tako nam se ovde signalizira slovo l i mi treba da vidimo od kog slova je to slovo poteklo. I prosto, dakle nekako jedan po jedan karakter nam stiže i mi jedan po jedan desifroemo i sve vreme i one koji šalje poruku i one koji prijima poruku imaju istu konfiguraciju rotor, dakle, prate jedan drugog da bi mogao ovaj sa strane prijima odcada desifro tu poruku kako treba. Dakle, sve vreme svi rotori rotiraju na isti načini sa jedne i sa druge strane u tom komunikacijonom kanalu. Tako da praktično ovde nam je kad tigno slovo l, mi sad nađemo s desne strane šta nam se aktiviralo kad je stiglo ovo slovo l i prosto u nazad idemo, kažemo petnistica bila povezana ovde sa 24-om, ovde sa petnisticom, ovde, dakle, l je dobijeno od slova c. I tako idemo slovo po slovo, naravno sve vreme sad nakon ovog slova rotiram ovaj levi rotor za jedan i sve vreme pratimo i pazimo kada treba koji od ovih rotora da rotira, dakle, isto kao i za šifrovanje identično i jedno po jedno slovo kako desifromo dobijemo originalan taj deo porukje koje neka vec je poruka. Dobro, ili imate sad neko pitađnis? Znači kad preođe l, onda idemo na dole. Tako jo, ovaj prvi rotor ide na dole. I onda ovo v ovde, evo ga, dakle, ovaj treći se nije pomerio, idemo na 11, to je od avde poteklo, ovaj drugi sif to nije pomerio, ja se nadam. Dakle, pet mjestica to nam je ovde i sad ovaj košto se bio pomerio tu nam je 16 i evo nam je 16 ovde, ali je prosto ona zapravo došla od avde, jer se, to je došla do ovde jer se pomerio. Isto i ovde nisam išao u paraleli, nego u jedan na gore, jer mi je 16 prešla sa gore njeg mesta na donje mesto, a ovak ažem, 16 prešla ovde. I dobijemo slovo. Završam, da je mogao da je rotirao na gore, onda ima smisla, idemo s desna na levo kroz text, pa na gore, pravo i opak pa mpa w i tako. Da je rotirao na gore? Aha. Pa da. Ok. Kvala. Nisam. Nije mi ja pitanje, ješo je samo zove je lab, nije mi je bilo najasnije. Drekste, verovatno će biti jutro. Svi sam satio, to verovatno, u smislu kao saz, zbog ovih kamera može da ne bude ili ga bi će biti jutro, kao bi će ili u sredu ili će biti posle. I jedno i drugo, da je izbog mera ne znamo ništa, mi ćemo svakako sutra da vam pošaljemu mail da će laba biti, pa sad vidat ćemo. Za sada mi smo danas dobili dopis sa Universiteta, gde nam je rečeno da fakulteti za sada nastavljaju kombinovanu nastavu, odnosno, predavanje vežbe idu ovako udaljeno, a lab vežbe s izvode na fakultetu. Tako da za sada bi trebalo i najverovatnije će biti lab vežbi sredaće nedalje, šta god imate. E sada, što se samo gutorka tiče, to sam reko da će biti najverovatnije, jer sad ne znam da sam stigli na početak čaca, ali još uvek nije ustaljen taj raspore, jer imamo neke probleme sa trećacima. I sad nebitno, u svakom slučaju, i verovatno se to neće menjati, neće to uticati na nas jer esi sluša zaštitu na četvrtoj godini, ali opet može dodođe do neke promene, u koliko baš ne bude mogao da se u kombinu raspore da tim trećacima odgovara. A možda se desi ta neka promena, ali za sad je utorak, a sutra će se zvanično znati kadje i u pitanju su jutarni termini, od 8 ujtru pa nadalje koliko grupa budemo imati. A da išli sam objaviti kadje što ste rekeli na meje? Vrlo živ, živ, živ, hvala. I još neko pitanje. Dobro. Ako nema više pitanja, ja bih prepause započeo i des algoritm, neki je o snove samih blok algoritama spomenuo, pa ćemo napraviti pauzo, onda ćemo da krenemo na konkretan des algoritm, dakle ova uvodna priča, za to ne treba mnogo neki koncert, da se da se dače, pa idemo na pauzu da se malo odmorimo i onda sa punom koncentracijom prelazimo na konkretan algoritm, odnosno da vidimo kako on funkcioniše i što je zapravo i šte ga se zapravo on sestoi, i da se dače, da se dače, da se dače, da se dače, da se dače, da se dače, dače. Šta je zapravo, i šte ga se zapravo on sestoi i generalno neke stvari okosiburnosti vidjet ćemo leći. Dakle, generalno u nastavku u čase ćemo pričati konkretno des algoritmu, kao jednom primeru nečega što se zove blok algoritam. I sad neznam da sam spominjali na predavanjima, ali blok algoritmi su najčešće dana skorišćani algoritmi, sa simetričnom enkrypcijom, kada dakle jedna i druga strana imaju isti ključ. Do sada ove algoritmi koje smo radili i predkodne nedelje, je su bili neki jednostavni algoritmi koji su preteča svih ovih kompleksnijih algoritama, a ovi blok algoritmi prosto idu korak dalje i na neki drugi način funkcionišu i na neki drugi način oni šifruju te neke podatke. Pa ćemo da prvo vidimo što su to blok algoritmi, šta su algoritmi toka podataka kao neki uvodu narednih nekoliko lekcija, jer ćemo se nekoliko nedalje baviti ovim algoritmima, onda verovatno samo jednu nedalje ovim algoritmima, pa čisto da napravimo neku paralelu na početku između njih, a onda ćemo da vidimo kako ti blok algoritmi funkcionišu i šta je to Feistal predložio, kako da napravimo te algoritmer, vidat ćemo generalnovi blok algoritmi, nakon kako su zamisljeni sa nekom idealnom zaštitom, pa ćemo ih nazivati idealnim blok algoritmima, ne mogu baš tako lako da se implementiraju, odnosno tu postoje neki praktični, neki technički problem. Tako da im vidjet ćemo tu Feistalov predlog za strukturu blok algoritama, a onda na des primjeru vidjeti jedan konkreten blok algoritm, malo po pričati o sigurnosti samog des algoritma i uraditi jedan zadatak sa s des algoritmem, to je jedna zamena za des algoritm koja je napravljena, sa neznam tačno na komu universitetu, ali isključivo u svrhe nastave da bi prosto nekome kroz ruku mogao ovoj des algoritm u nekoj jednostavnjoj verzii, da prođe sa mnogo manje računanja nego u des algoritmu, ali opet da zadrži celu strukturu desa, čisto da bi ste još bolje skvatili sam des algoritma. I na labi vežbi kažem dolazi des algoritam u vidu tog simulatora, da vi sa simulatora čitate u svako iteraciji algoritma koja je vrednost podključa, koja je vrednost šifrovane poruke u tom trenutku i tako dalje, i jedan s des zadatak da vi na papiru ispred sad računara odradite celo šifrovanje neke poruke, a opet na mudlu u tim tekstualnim poljima unosite delove tih rešenja po nekim koracima kako već tamu tekstu navedenu. E sad naravno des, pošto ne možete ručno računate, zato i koristimo simulator, čisto da odakle izvučete de nekim formacijom, i tih nekih par pitanja imamo na svakoj labi vežbi da zaključite zašto je baš ovde sad ova neka vrednost il tako nešto, svakom slučaju su da iman te ponuđene odgore, tako da ne bito trebalo da bude teško, ali naravno bilo bilo jepo da prođete kroz ovu prezentaciju i da ipak schvatite kako funkcioniše des algoritam bez obzira na to što će da sam simulator biti dostupan na labi vežbi, čisto zbog tih nekih pitanja za zaključivanja. Kada pričamo razlici između blok algoritama i algoritama toka podataka, što se algoritama toka podataka tiče to smo videli na...
 na predavanjima, malo i na vežbama, u primjera i vavernamove šifre i vizinerove šifre, gde prosto se bit po bit ili byte po byte sad davisi kako koja algoritm sama poruka šifru. I sad idealno bi bilo sećete se da ključ bude dužine same poruke, odnosno da imamo one-time-pad ključ, pa da prosto svaki bit ključe da kažem ksoru jemo sa svakim bitom odnosno byteom tekstualne poruke i na taj način dobijamo neku šifrovanu poruku, prosto bilo bi gotovo nekako nemoguće izvući od atle ključa, osim naravno ako ne poznajte i šifrovani i originalni tekst obzirom dekstor operaciju nakon invest. Međutim tu postoje tehnicky problemi, o koji imaćemo pričati kada budemo baš sadil algoritme toka podata, katiču se veličine onda samo ključa koji zavisli od veličine poruke. Dakle uglavnom imamo neki generator slučanih brojeva, način ulas dovedemo ključ koji je manje, ne, manje neke veličine naravno od poruke, neke adekvatne da može i da se čuva i da se prenosi pros komunikacijone kanale, a onda na osnovu ključa ovim generatorom slučanih brojeva izbacujemo neke random bite i nju njih konkateniramo, odnosno, ksorujemo sa samom porukom i dobijemo šifrovani tekst, naravno, dekripsije ide u nas. I to odprilike neki opšti uvodu algoritme toka podata, kali njima ćemo se baviti tek za nekoliko nedalja detaljnije, ovde samo bito da vidimo razliku između njih i nečega što se zove blok algorita. Dakle, blok algoritmi tretiraju prosto našu poruku odnosno deleje na neke blokove, neke određene veličine, u glavnom je to veličino 64 i 128 bita i svaki blok zasada nezavisno enkriptuju nekim algoritmom koristeći neki ključ. Dakle, enkriptuje se blok po blok dobiju jeći blokove šifrovane poruke koji na kraju komkateniramo, da kažemo opet za sad, u konkretnu šifrovanu poruku i oni su pogodni za razli nekiose aplikacija, o kojima ćemo se baviti da kažemo nekom daljem delu kursa. Dakle, da prosto jedina razlika, to što oni sad šifruju blok po blok, a kada budemo radili modove funkcionisanja za jedno, dve, tri nedelje, tada ćemo videti kako sad konkretno možemo ove šifrovane blokove, dakle, komkateniramo na koji način i kako, da kažem, ove blok algoritme iskoristiti kada na enkriptijanim algoritmima imamo neki algoritm do kapodotaka ili ukoliko nam je potrebno da kažemo nekim enkriptijanim algoritam koji je blokovskog tipa dovodimo bit po bit pa da to sve neka kupakujemo, da kažemo, to ćemo sve videti u naradnih nekoliko nedelja. To bi bila neka radlika između algoritama toka podataka i blokovskih algoritama, pa kažem, sad idemo na pauzu jedno petnest minuta i onda se vraćemo ovdje i nastavljamo dalje da vidimo kako funkcioniš ovi blok algoritmi, da popričemo malo više o njima i da onda vidimo šta je to taj des algoritm, kako on funkcioniše i da proradimo jedan zadatak iz jednostavnije verđe svakog des algoritma. Dakle, da imate neko pitanje prenego što pođemo na pauzu? I al ćete nam pokazati sedmalo simulate na sljedećem času? Neću, zato što iskrenu nija na jaznom šifru, odnosno imam, je verovatno nekde na melo trošte godine, ali problem je što moraći da ubrzam ove sljedeći čas, rijemo dostal ovde slajdova, ako stignemo sve da pređemo, mogu da vam pokažem simulator, dakle nije ništa strašno, ali ove verovatno ćemo na kraju probiti malo i da kažem, završit ćemo čas malo i posljava sam. Tako da u tom smislu verovatno neću stići da pokažem simulator, ali ja te potrudiću se da brže pripčam, da preskače možda nekaj nebitne detalje, pa da pokažem taj simulator ako nadžem sad u pauzi, u tu šifru za njega, ako ne nadžem šifru onda dobićete sut. Ok, i da vas pitanje, samo za nadokna delaba koje acimo, ako budu spojeni drugi treći lab, i naprena, izadžemo u tom terminu i avadim samo drugi, da imam pravo da izadžem posleda treći ili nema pošto su uvezani. To ćemo još da vidimo, to nismo tim detaljimo pričali sa profesorima, to ćemo pričati danas, pa ćemo vam sve posliti sutra kako stoje stvari. Veži. Veš neko pitanje? Dobro, idemo na pauzu da sedam i petnje spasje, vraćemo, nazad i nastavljamo dađa. Dađa. Dobro, da limate neko pitanje, sad nakon pauze, da lima čuvati opstu? I dalje vidite ekran? Ovo je bovidjeme. Vjela. Dobro, njišta nastavljamo dalje sa gledavanjem, funkcionalnosti koje pružaju ovih blok algoritmi, odnosno da vidimo kakva je struktura ovih blok algoritama, pa da pređemo na konkretan primer. Jednog bloka algoritma to je des. Algoritama, sledeče, nedeđećemo vidjeti jedan drugi primer, upitanje je as. Algorita. Begle smo, dakle, blok algoritmi obrađuju deoplane teksta, koje je veličine, veličine nekogen, proizvodeći n-bita-cypher teksta. To znači, da je, to znači da mi praktično, ove algoritme možemo da gledamo, kao neko veliko mapiranje bilo koji je entobitne vrednosti, u bilo koju drugu entobitnu vrednost, da imamo ovako neko tabelu mapiranju, onda prosto za svaki plain text znamo, šta će da bude izlaz, odnosno, šta će da bude cypher teksta. E sad, možemo tu da imamo dve neke varijanti, da to mapiranje bude reverzibilno, odnosno, da tačno za svaki cypher tekst znamo u naza da se vratimo do plain text, odnosno da ovo preslikavanje 1,1 i na, a imamo i ovo nereverzibilno mapiranje, gde prosto se negde ponavljaju isti vrednosti u cypher tekstu, tako da za ovakve algoritme ne bi smo znali da deshifruemo 0,1, naprim. ne bi smo znali da ga vratimo u 1,0 jer ili u 1,1, jer prosto ne znam od čega je potepko. Mi ćemo se naravno držati reverzibilnih mapiranja, jer s anomonalim značaj, osvaka kubloka algoritmima. I ono što možemo da primetimo, jeste da sad i za ova jednostavan primer mi imamo različiti mogući broj ovih tabela mapiranja. Ako lik je to broj, pa u ovom slučaju 4 faktorijel s obzirom da ovde na 1. mestu, dakle 0,0 može da se preslika u 1 od 4 moguće vrednosti, pa kad smo nju uzeli ovo 2,1 može da se preslika u neke 3 moguće vrednosti, 3 vrednostu 2 moguće vrednosti i ovom kjecu-kjecu, šta god je ostalo, to je ostalo, dakle 4 faktorijel, ali u nekom obštom slučaju broj različiti tih mapiranja je 2 na n, da je n veličina bloka tog koji šiframo pa faktorijel. I to zovemo tim nekim idealnim blok algoritmima, gde mi imamo ovako neku veliku tabelu mapiranja, gde za svaki prosto svaku vrednost tog bloka, šta god ona bila u nekom decimolnu reprezentaciji za četvorobitnu vrednost, mi tačno znamo, ušta će ona da se preslika na izlasu. I sad, koji je problem tu? Problem je, ukoliko je blok podata kamali, sistem se svodi, naravno, neklasične algoritme zamene koji su podložni statističkim zapadimo, odnosno, kriptoanalizom, gde možemo da uloćimo neku statističku zavisnosti u šifrovanoj poruci, to smo sve videli prošle nedaljev, tako da je problem tu rešent, tako što ćemo povećati samu veličinu podataka. I sad, veličinu podataka povećavamo do nekog trenutka, dok, lego od se te statističke karakteristike u šifrovanoj poruci nekako ne eliminišu. I nekim empirijskim putem ljudi došli do zakvička da od prilikje 64 bita dovoljna veličina bloka da se te karakteristiki u šifrovanom delu poruke eliminišu. Međutim sa veličinom od 64 bita za blok mi bi smo imali mnogo problema u realizaciji takvog algoritma, dakle u implementacije i u performancama, zato što bi postojovam mnogo veliki broj mogućih mapiranja za takve podatke. Čak i za primer gde ovde imamo 1 jednako 4, dakle Čak i za takav primer postoji zapravo 64 bita nam treba za realizaciji
 u mogućeg mapiranja u ovako nekog tabeli, odnosno, ovo 0, 0, 0, 0 može da se, da kažem, šifro je ubilo šta ovo drugo, pa onda ovo ubilo šta minus 101 i tako dalje, odnosno nam abi ključ za jednu ovaku tabelu bio baš ovaj deo tabela koje je vezan za kolonu šifro onog texta. Dakle sam, ključ, kao imo ono alpoveckom algoritmu, bi nam bio baš, bilo bi nam baš to preslikavanje, da kažemo, redom, u šta će se preslikavati ove redom v rednosti kako smo ih naveliti. Tako da veličina ključa koji moramo da čuvamo je ovdje kao što vidite četiri bita za jednu vrednostu ovaj tabeli put ovih 16 redova, odnosno četri puta 2 na četvrtji u nekom opšten slučaju, to je 64 bita za samo ključ za ovaku mali prime. A generalno, ukoliko imamo nekih n bitova, to bi bilo dakle n puta pa 2 na n tih bita koje nam trebaju za čuvanje konkretnog ključa, za bilo koju tabelu mapiranje. Tako da za veličinu blok od 64 bita kao što sam reko, da je dovoljna da eliminiše testetistice karakteristike u šifrovanom tekstu, ključ bi trebalo da bude dužine 10 na 21 bita i to je naravno u potpunosti nekako nepraktično. Tako da ovi idealni blok algoritmi iako slavno jest idealni u smislu sigurnosti koje bi možda pružale, ipak nisu praktični. Tako da je Paistal predložio jednova proksimacija u tog idealnog blok algoritmu. On je rekao da praktično nećemo da omogućimo bilo koje mapiranje ovaj tabeli, nego ćemo reći imamo blok veličine n i ključ veličine k i samim tim to k može da bude neki drugi broj, da zvolit ćemo jednu od dvana k mogućih mapiranja, od ukupnog braja mapiranja koja nam je dvana n faktorijela. Tako da prosto jednu od tih mapiranja možemo da koristimo i to nam je uretu. Dakle, time smo prosto sveli problem, to je srešili taj problem veličine ključa i sad jedino što moramo dodatno da odradimo, jeste da samom mapiranja ne treba da bude onako jednostavno kao kolonih klasičnih algoritama koje smo radili prošle. Nedalje već da sam algoritam se svoj nekako blokovski iz različi tih manjih algoritama kao što smo videli na jednom zadatku prošle nedalje. Na taj način ćemo da kompenzujemo činjanicu da smo smanjili ovaj ključ i od ovog veliko grama mapiranja se sveli na neki mali brojima mapiranja kojbi možda bio podlaža nekom brute force napadu, ali opet smo povećali sigurnost time što smo iskoristili različite neke jednostavnije substitucijne permutacione algoritme za redom da bi smo mapirali jednu vrednost u druku. I danošnji algoritmi prosto koriste taku strukturu. Shenon je 1945. godine predstavio prvu tu neku ideju za implementaciju Feistel strukture, gde je ideja bila da se suprotstavimo toj kriptoanalizi, tako što ćemo prosto koristiti neke konfuzione i difuzione funkcije, odnosno nekako ćemo razdvojiti sa jedne strane pojavljivanje statističkih karakteristika u plain tekstu u odnosu na cyfer tekst. Dakle, ako u plain tekstu imamo neke statističke karakteristike, on je nikako ne treba da se videu u cyfer tekstu, a sa druge strane i cyfer teksta ćemo nekako ne mogućiti da neko može da dođe do samog ključa, odnosno napravićemo toliko kompliku, ono vezu između samog ključa i cyfer teksta, što je više moguću da bi smo dodatno napravili tu neku konfuziju za nekoko pokušava da statističkim putem izvrši neku kriptoanalizu i domogne se ili naše poruk ili naše ključa. Same difuzione funkcije su ovezbeđuju prosto, prvo što sam rekvo da se statističke karakteristike plane teksta ne pojavljuju u cyfer tekstu, a to se dobija tako što ćemo prosto obezbediti da svaki bit plane teksta utiče na mnogo bitova u cyfer tekstu. Što možemo iz druge strane da posmatramo da je prosto na jedan bit cyfer teksta će uticati veći broj bitova plane teksta i to postižemo tako što prosto izvršimo dosta nekih permutacija samih bitova u tom našem bloku, pričemu nakon svake permutacije taj naš blok prođe kroz neku funkciju. Na taj način različiti bitovi sa različitih mesta utica će na sve nekako bitove u našem šifrovanom tekstu jer se stalno permutuju i prolaze kroz istu tu neku funkciju. A sa druge strane konfuzione funkcija prave onu komplikovanu vezu između cyfer teksta i samog ključa i to se postiža tako što ćemo koristiti algoritm zamene koji je dosta složen koji će napraviti tu neku komplikovanu vesu. Sama struktura paistila algoritma je sledeća. Dakle, podelimo sam blok podataka na dva dela, levi i desni del. I uvek radimo istu stvar, sada ovdje je greška, dakle, ova linija ne treba odavde da ide, nego odavde. Dakle, uvek desnu stranu, dakle, algoritam ide u nekoliko rundi i uvek u svakorundi desnu stranu samo preslikamo na levu stranu, a novu desnu stranu za sledeću rundu dobijamo, tako što staru desnu stranu provučemo kruz tu neku funkciju sa nekim delom našeg ključa, nekim delom, kažemo, to ćemo zvati pod ključ. I onda to ksorujemo sa starom levom stranom i dobijemo novu desnu stranu. I nakon nekog broja rundi, u zavisnosti u koji algoritm koristimo, mi ćemo dobiti neku poruku i onda na kraju je jedino bitno da uradimo, a vidićemo posli zašto da u temeni mogu levu i desnu stranu i ti me dobijamo taj naš aukut koji predstavlja taj cyfer tekst. Dakle, broj rundi i sve ove, šta je ova sad funkcija i ovi ključevi kako si dobijaju, zavis od konkretnog algoritma, ali sama struktura koji algoritm treba da podržije ova ovte. E sada, šta su nam bitni parametri kada dizajniramo algoritm koji podržava ovu faestel struktur. Pa, veličina bloka i ključa, gde, naravno, jasno nam je da što manja prednost bloka ili što manja vrednost ključa, to smo podložni napadima, ali što je veća veličina bloka ili ključa, poveća ćemo mogućnost, t.e. smanjićemo mogućnost na napad, odnosno, utica ćemo direkno na sigurnost algoritama, ali i na brzimnu njegovo izvršavanje. Generalno svi ovi parametri nekako što su bolji to, to je naš algoritm sigurni, a što su lošiji, to je naš algoritm manja siguran, ali prosto kada su bolji parametri, osim što je naš algoritm sigurni, nekako je ispori, jer prosto zachteva veća neka izračunalani. A ti ostali parametri su broj rundi, u koliko rundi će sve ovo da se dešava, od prili tje tih nekih 16 rundi vidaćemo kasnije neku istraživanje, je od prilih je dovoljno da unistimo te statičke karakteristike u cyfer tekstu, dakle dovoljno isporistimo tu difuziju, konfuziju do kraja. Sam algoritm koji generiše one pod ključeve od osnovnog ključa, opet što je kompleksni, do dodatno težavamo kriptoanalizu ali usporavam algoritm i sama ona funkcija F-kroz koju prolazi ona desna vrednost, isto utiče direkno na mogućnost izvršavanja te kriptoanaliza, odnosno na našu sigurnost. E sad, proces dekripti je podpunosti obrnut od procesa enkripti, ako malo bolje pogledamo baš istog razloga smo i morali na kraju da svo pojemo one dve nekih vrednosti, jer sad mi isti algoritm možemo da koristimo i za dekriptiju, tako što ćemo opet desnu stranu da zamenimo na levu, a levu stranu da ksoru imamo se izlazom funkcija desne strane ključa i tako da idemo do gore i prosto na kraju je bitno opet da izvršimo tu zamenu da bi smo se vratili u onaj originalni plain text. Istog razloga pošto je prosto i u jednu i drugu stranu algoritama podpunosti identičan, mi neamo potrebu za implementacijom i enkriptijunog i depriptijunog algoritma već samo za jedan od ta dva za koji se odlučimo. I sad možete da pomislite da je možda potrebno dova funkcija f treba da bude reversibilna, da bi smo mogli u nazad da dobijemo praktično isti rezultat na ovom ksoru, jer ksoru je sigurno reversibilan, tako da ak jemo rezultat i jedan drugi operant, dobit ćemo onaj prvi operant, mjedeš u tim nemora funkcija f da bude reversibilna i to možemo da vidimo na ovom ovdje primer. Recimo da o jednoj rundi s leve strane imamo ovo vrednost, desne strane ovo vrednost. Ok, desna strana se očigledno samo preslikava na ovu ovde stranu, a leva strana se ksoru je sa funkcijom ove desne strane i neko kluči, to ćemo značiti ovako funkcija, toga, i sve.
 taj ključa plus ova leva strana. Sa druge strane kada vršimo dekriptiju, ove vrednosti će se pojaviti u drugoj rundi u koliko je ovo sve bilo rađeno u 15. rundi i naravno u drugim pozicijama sa obzirom da smo na kraju izvršili oneh svop. Tako da prosto ova desna strana opet se preslikava na samu levu stranu što nam je ok je jevo ga ovde se nalazi ta vrednost i zato kažem sve reme vidite da je nekako kop u nekomog ledalo na kraju je bitno da svopujemo taj krajnji rezultat koji dobijemo da bi smo se vratili u plain text. A levu stranu dobijemo kao ovo celo čudo koje ksoru jemo sa opet funkcijom ovog ovde i ovog ključa. Tako da praktično dobijemo funkciju nečeg i ključa plus dakle ksor, funkciju nečeg i ključa ksorovanos sa nečim. Pošto ksora operacija jeste asociativna mi možemo sada grupišemo ova dva i nešto ksor isto to nešto da je ili tako nulu. A nula ksor nešto da je baš to nešto. Tako da s ove strane ćemo rezultat dobiti d e 7 e pšto i jeste ovaj ovde. Deo tako da funkcija koja god f bila ovde bi se skratila i ne mora da bude reversivima. To je od prilik i uopstano nešto o faztel strukturi. E saćemo da pređemo na des algoritama, ali pre toga je to da pitan da imate neko pitanje. Da sam nešto previše zbrzo, da li vam je nešto ostalo nejasno ovom prvom delu? Dobro, nema pitanja. A sam odoproverim da si dalje čujem. Ne bude da se ne čujem. Da, da. E dobra, hvala. Ništo, onda idemo dalje. Dakle, sam algoritm koji ćemo ovde prikazati, jeste data encryption standard algoritm koji je usvojen tamo negde 70-ih godina i najčešće korišćen algoritm do pojave algoritma koje ćemo učiti sledaće nedelje, označen skraćenicom AS, koje tu negde početkom ovog veka i usvojen zvanična. Sam des algoritm prati faztel strukturu i encrypto je podatak veličina 64 bita, koristeći ključ od 56 bitova. Međutim, sam ključ koji jedna i druga strana imaju etokoment, i toga strana imaju etokođe 64 bita kao i podatak, dakle, kao i blok koji encryptojemo, kde o porukje, dakle, samo poruku delimo na blokove, a kako delimo celu poruku na blokove, kako oni utiču jedni na drugje, prosto videćemo kada budemo radili temo o dobe funkcionisani za 1, 2, 3 nedelje. Dakle, ovoj algoritm služi isključivo za jedan blok i sada encryptojemo ta jedan po jedan blok. Esad, do dovih 64 bita ključan, nekako se svedemo novih 56 bitova i nadalje koristimo samo tih 56 bitova iz samog ključa, da encryptojemo ovoj podatak od 64 bita. Sam algoritm pošto je fajstel struktur u osim ova neka dva dela koja ćemo oskoro objasniti. Na sledeći način, sam, dakle, sastoji se iz 16 nekih rundi, pričemu svaka runda se sastoja izgomilo nekih substitucijnih i permutacijonih algoritama, nači ulas dolazi prosto taj ceo tekst od 64 bita, odnosno izlas predhodne runda ili šta god, i sam deo ključa koji smo nazvali pod ključko i dobijemo na neki način, nekim generatorom pod ključa od ovog našeg početnog 64-obitnog ključa. Pa, sa jedne strane zapogledamo prvo kako plain text prolazi kroz ovoj algoritma. On prolazi prvo kroz nešto što nazivamo inicijalnom permutacijom. Ta inicijalna permutacija prosto jedna tabela gde u svakom koloni tabele je naznačena brojka koja kaže koji bit će u prosto na koju poziciju da se permutuje. Na primer ako imamo neke bitove 0, 1, 0 i na primer naša permutaciju na tabela izgleda ovako. Na primer ako ovo neki nizi indeksiramo sa 0, 1, 2, neka tabela izgleda 2, 0, 1, to znači da će na ovaj poziciji da se preslika ovaj drugi bit iz originalne poruke odnosno 0, na ovu poziciju će da se preslika kao što piše 0-ti bit odnosno 0, a na ovu poziciju prvi bit iz ove predkone poruke odnosno kjec. I ovo je prosto neka velika tabela sa 64,5, 10 biti permutuju. Onda prosto prolazimo kroz sve te neke runde. Na kraju izvršimo svop leve i desne strane dakle ovo isto na ideo paistal struktura, je bitno zbog dekriptije i prosto izvršimo neku inversnu inicijalnu permutaciju koja kažem suprot na ove inicijalne permutacije. Dakle, kao da vratimo sve te bite koji su se permutili na početku na startnu poziciju ako naravno ovo su slučaju ovdje će totalno neki različiti biti da budu i time proizvodimo sajfer tekst. Kluč sa 64 bita svedemo na 56 bita tako što takođe koristimo neku permutacijunu tabelo, ali veličine 56. Tako da prosto u toj tabeli nekje vrednosti se neće naći i u nekoj standardnoj implementaciji svaki osmiji bit ovog 64-obitnog ključa se izbacuje, a ostali se miksuju. Onda taj 56-obitni ključ u nekoliko iteracija se deli na dva dela, dakle, na levo i deštnu stranu, i svaka o te dve strane se rotira na levo za 1 ili 2 bita, dakle, cirkularno, dakle, ako smo stigli do kraja, vraćemo se kružno, kružno rotiranje upitaj. I prosto to uradimo za onoliko puta koliko imamo iteracija i izlaz svakog tog šiftovanja provlačimo kroz drugu permutacijonu tabelu, koji opet izbacuje nekih 8 bitova, videćemo zašto baš toliko, i proizvodi pod ključ veličine 48 bita. Tako da tu su neke ključne brojke 64 za plain text, 64 za početni ključ, ali generomno se koristi ključ od 56 bita, a pod ključe vi su veličine 48 bita. Kako izgleda jedna runda? I može pitanje samo zvo predpada. Moš, moš, moš. I moš da sam ovaj slajd. Ništo, ovaj 32 bitni svopijel, to ovaj da je ovo levo što ste cratali? Ovo 0,1,2. Ovo ovde? Ne, ne, ne, to sam objošnjavo kako izgleda ova inicijalna permutacija. Ovo ovde pošto veličine 64 bita blok, on se podeli na ovako 2 dela od 32 bita i samo se zame ne mest. Di dela od 32 bita. Tako da ovaj prvi dođe ovde, a ovaj 0-ti dođe ovde i onda se kunkatenira podleka. Oho, ok. Možeš više napititi? Možeš. Samo, koja je razovljašta ovo inicijalne i ovoposnije permutacija? Ovo i ovo. Da, da, zbuk čega se to radi, a ovo to popravljalo? Mislim, kako to popravljalo? Statističke bilo štao, kako ima veliki prejrond? Pa praktično videćemo ovde sada da ovde ne vršimo toliko tih nekih permutacija, tako da nam ovo pospešava onu difuziju. Tako što ćemo sada da izmiksujemo koji biti će sve da utiču na koji delave poruke. A dodatno pospešava poruku, tako što ovu faistel strukturu ne unalazi sama poruka, pa da neko može da nas napada sa onim poznatim cipher i plaintextom, ne ugulazi neka permutacija koju neko neće znati, jer ne zna u opštom slučaju, i ako zna da ovde ima inicijalne permutacija, ne zna brojke koje se ovde nalazi. Tako da opet nećemoći da napadne samu faistel strukturu, jer neće dobiti ništa na ovom ovde izlaz, ovo njemu ništa. Dakle, nama je plaintext.tek gore. Tako da nam je to neka dodatna zaštika, o neka dodatna vrata koja imamo u tom našem algoritmu. Ja ota inicijalna permutacija odnosno tih brojev je, ja su oni da ključa, odnosno sam menju... Nisu da je ključa? Svakim shiftronom je. Ne, ne, ne. Dakle, prosto, vezani su za algoritam koji vi imate i se jedne sa druge strane i ti detalji su nepožmati. Osim ključ, mi si možemo da kažemo da to jeste nešto što što jedne i druga strana moraju da imaju, jer je u opstim plučaju, dakle, ta tabela radličita za svaku implementaciju, ali ne pretavlja deo ključa, ne možete da izvucete iz ključa kako se to permutuje. Ali morate da imate se jedne sa druge strane. I to, a, i desi, ovo je ušlištenje, ovo je ušlištenje, ali taj deo, takođe, znači u implementaciji je tako, definisam negde i to se nemenja ili to dolazi porad ključa sa svakim shiftronom. To mi je ošli jasno. Pa implementacija se napravi da koristi neku konkur...
 kretnu tabelu. A koju tabelu ta implementacija koristi se ne zna, koristi uvek istutu tabelu ta neka permutata, ta neka implementacija. Pitan samo zato što ako je to fiksno, onda može da se implementacija reverse ingeniruje i da se nadija tibroje? Pa naravno, naravno, to uvek može, ali treba doći do implementacija. Paži, hvala. Niste. Dobro. E sad, svaka runda izgleda ovako. Dakle, rekli smo desna strana se samo preslika na levu stranu, a leva strana se k soru je sa izlazom neke kompleksnije funkcije u koji učestvu u desna strana i sam podključ. Sa desna strana je vezičina 32 bita, dakle, polovina od 64, tako da se ona da bi se u ovom nekom trenutku ksorovala sa ključem ekspanduje na 48 bita, opet nekom ekspanzionom permutacionom tabelom koja prosto u sebi ima neka ponavljanja ovih bitova, dakle, ne znam, 16 biti, 16 biti će dva puta da si skoriste ovde, dakle, nekako se povečava sa 32 na 48 bitova. I onda se tu ksoruju to nešto i ovaj sam ključ i tu prosto učestvuju ključ i sama poruka u nekoj konfuzionoj funkciji. Nakon toga dodatno da bi smo usložili priču, sve to prolazi kroz nešto što nazijemo S-Box, to je neka substitucionan, substitucioni algoritm, a onda od tih 48 bita nakon te substitucije se svedemo na 32 bita i sve to dodatno permutujemo, naravno ostajevči, u tih 32 bita i onda to ksorujemo sa ovom levom strano. Tako da prosto, dakle, ova faistel struktura ovdje je primenjena odnosno leva strana uvek stara desna, desna strana je ksor stare levej funkciji zmeđu stare desne i nekog ključa. Sami S-Box-owi su ovako neke tabele sa 4 reda i 16 kolona, na čijem ulazu se nalazi 6 nekih bitova. Tako da imamo za ovih 48 bitova koji dolaze na ulaze tih S-Box-ova, nekih 8 S-Box-ova, pa samu poruku delimo na velicine od po 6 bito, nakle isečemo redom na grupe od 6 bitova i imamo 8 takvih grupa. I onda ovaj prvi bit i ovaj poslenji bit na ulazu indeksiraju jednu od 4 reda u tabeli, a ova 4 bita indeksiraju jedan od 16 kolona u tabeli. I naprimer neko su indeksirani ovaj red i ova kolona, u njihovom preseku se nalazi ono što predstavlja izlaz samog S-Box-a, a izlazi uvek na širini od 4 cifpe. Onostno praktično što se dešava pa ova 4 bita se permutuju, odnosno menjaju, tako što ih ova 2 bita nekako nadžu u ovoj tabeli. Al na to se svodi praktično priča. U suštini od 6 bita na kraju dobijemo 4, sve prostoponovoko konkateniramo i tada dolazimo na ulazone permutacije i nadalje se nastavlja priča sa predhodnog slajda. Što se tiče samog ključa, tu smo već videli priču, delimo one i 64-obitni ključ, prvo ga svedemo na 56-obitni ključ nekom permutacijom, pa ga delimo na 2 dela i uradimo left shift za oba dela, za 1 ili 2 bita. I onda nekom dodatnom permutacijom kada spojimo ta 2 dela dobijemo 48-obitni ključ, a izlazi samih shiftova ulaze na ponov neke, da kažem, ulaze na sledeću rundu, odnosno na ponov ove neke rotatore koji opet rutiraju te dve strane i opet izvrte celu priču dok se nene izgene rizu svih ključa i to smo već videli. E sad, sam des algoritam je implementiran tako da proizvodi ovaj neki efekat lavine, sve one brojke, a pogotovo one s boxovi moraju da budu designirani tako, da imamo ta efekat lavine koji kaže da izmenom samo jednog bita od 64-bit originalnog teksta ili izmenom samo jednog bita od 64-bit ključa mi utičemo na izmenu mnogo velikoj broja bitova shiftprovanog teksta. I na taj način neko ne može da nas napadne poznavajući neke cyfer tekstove i provlačeći pro neke dekripsionalgoritme i gledajući kako se ponaša naš plain tekst, jer da je ta zavisnost manja da je izmena jednog bita u plain tekst utiče na neki manji broj bitova u cyfer tekstu, mi možemo da nađemo neki cyfer tekst, pa da menjemo jedan po jedan bit i provlačimo kroz dekripsionalgoritam i na taj način gledamo kako se ponaša naš algoritam i izvučemo neke vrednosti deo ključa ili ceo ključ od atle, pa svedemo opseg ključeva za brute force napadne neki manji opseg. I ovde to je predstavljeno to neku istraživanja na nekom konkretnom primjeru za neki plain tekst i neki ključ, gde je posle inicijalne permutacije svakje runde i završne inicijalne permutacije su prikazane vrednosti konkretnog plain tekstu u tom trenutku. U ovaj kolon je prikazan primer kada se samo jedan bit kaže internet connection is unstable, da li me čujete i daj? Čujemo os. Da, dobra, dobra. Dakle, samo jedan bit originalne poruke se menja i gledamo kako to utiče na izlaz svaki od ovih rundi. Vidimo, na početku je samo u jednom bitu razlika. Nakon prve runde opet samo u jednom bitu, naravno, ovo su heksa decimom nevrednosti. Nakon drugi je runde, jomo, četri heksa cif predrugači ukupno, naprim. 5 bitova, a tamo negde pred kraju imamo razliku na čak 32 bita u šifrovanoj poruci, što je dosta doba rezultat. Isto bi smo dobili kada bi smo promenili jedan bit u početnom ključu. Na početku jomo neke manje razlike, ali što više rundi imamo, zato desima 16 rundi, te razlike su dosta velike na kraju od priliku na neki 30 bita se razliku o šifrovana poruka za ovaj primer. Tako da jomo ta jepeka tlavi na prostom mala greška u početne poruci, dovodi do mnogo različite šifrovane poruke i to nam doprinosi, naravno, sigurnosti algoritma. Sama sigurnost se sada već svodi na veličinu ključa od 56 bita, što nekada nije moguće, nekada nije bilo moguće napasti brute force-om, međutim, danasni računari to odrade i za manje od 1 saat, tako da sam desi više nije toliko siguran, ali triple deso kojem ćemo pričati, je i takako i dana siguran, dakle čak i super računari, dakle ne avi neki kućni računari kojima bi trebalo evo viditi od priliku koliko, i oni super računari ne mogu u nekom normalnom doglednom vremenu, čak i da ih dosta koristimo da brute force napodom nadju šifru nekog konkretnog algoritma, a je skoristi veličinu ključa od 128 minimalnom, da ima i neke druge implementacije, i za njega takođe nije mogući brute force napod. Tako da des je dosta zamenjen dana s nekim drugačim algoritmima, ali on je preteča svih današnjih algoritama, prosto se svi današnji algoritmi na njemu zasnivaju i nekako je dugo bio na snazi, dugo bio aktualan u standardu, i prosto, naravno, ovde je bitno da ga spomenemo kao jedan takav algorit. Naravno, osim brute force napada, primećeni su i neki napadi na implementaciju, dakle, ukoliko poznamo te detalje implementacija, nekako možemo da pretpostajemo neki ili sve bite podključeve, to su neki statistički napadi, međutim, nigda nije fablikovanu nijedan takav napad, dakle, sad al se nije desilo, ne znamo, ali prosto nigde javno nije pokazano da je sama struktura desa može da bude napadnuta na taj način da si oddatle odma izvuček ljuč, tako da tu možemo samo da pretpostavljamo da takvi natok padipo stoje, a dodatnu preetnju predstavlju napadi na dužinu trajanja algoritma, koji pretpostavljaju da za različite šiprovane tekstove, kada provučemo sve to kroz dekripsijuni algoritm, ćemo imati različita trajanja dekripsije, pa na osnovu toga da vidimo kako biti utiču na vrema izvršavanja dekripsije, pa da oddatle izlačimo te implementacijone detalje samog algoritma i pokušavamo da svedemo obseg ključega, koji treba da pretražimo brute force na neki manji obseg, tako što ali mi nisemo neke bite u ključu, koji nisu mogući ili piksiramo neke za koje smo sigurni da su takvi.
 i tako dalje. Međutim ni ovi napadi se nisu pokazali kao mnogo bitni s obzirom da neamo nikakva informacija o tom da je neko uspeo novoj način da provali šifru. Dobro, sad da ćemo da pređemo novu jednostavniju verziu des algoritma da će vam dodatno biti pojaš, misim jasnije nekako vama lično kako funkcioniše i sam des, jer i ovo isto kao i des samo smanjeno da radi sa malim veličinama blokova od 8 bita i saključujemo deset bita čisto da bi smo to na papiru mogli da rešimo. Ali pre toga da vas pitam, da li imamo neko pitanje? Može biti jednostavniju. Da li treba da znamo napomjet za des ove specificnosti kako dužina posljučila te stvari? Pa te neke osnovne informacije bi trebalo da znate. Sad ne znam ako me pitate, napr. ovako čemu treba to ne. Ali veličinu ključa, veličinu bloka to bi trebalo da znate. Ne imate tu sa nešto specialno mnogo brojki, vrti sa nekih par brojki i generalno algoritm bi trebalo da znate kako funkcioniše. Dakle da ovo šemu umete da nacartate ili da konkretno ovu funkciju umete da nacartate. Dakle često na koloku imamo tražimo, je nacartaj šemacki kako god ne mora to da bude precarstan od avdja. Ali prosto da vidimo kako izgleda jedna iteracija des algoritma ili kako izgleda ce algoritm bez ulaska u konkretne runde, u detalje ili kako izgleda na primer generisanje ključeva i tako dalje. Dakle te stvari bi trebalo da znate. O, ništa, neko pitanje. Evo upravo nam je žarko poslao da je malo pre par minuta postavio novu verziu simulatora sa novom lozinkom i poslao je lozinkom. Tako da imate sreće možete ćemo ustati da stignamo ovaj da vidimo i sam simulator a stiče vam sutra email sa lozinkom. Mislim mogu i sada vam kažem lozinka je zp do nja crta 2 0 2 1 veljikim slovima zp. Ali poslaćemo i na mi. Sam algoritm SDS je prosto pojednostavlja na verziya des algoritmo koji koristi 8 bito za veličinu bloka i 10 bito za veličinu ključa. Ima dve runde. Dakle ima inicijalnu permutaciju pa 1. runda pa ini pa opet drugu runda pa ovu obrnu tu inicijalnu, odnosno inverzo-inicijalnu permutaciju. Dekriptija ide u nazad. A prosto ključ se generiša opetnisti način od 10 bita, nekom permutacijom se svodimo na neki manji broj bita i onda šiftujemo u jednom u levu ili 2x u levu one neke polovine i drugom permutacijom dobijemo prvi ključ. A ako ponova šiftujemo nešto, dakle samo vodite računa da izlaz, ulaz na ovaj šift izlazi u zovog šifta. Dakle, ne idemo nakon permutaciju ovdje u šift, nego sve reme šiftujemo. I onda prvučemo to kroz neki drugi permutacijon i algoritm dobijemo drugi ključ. Dakle, sve je isto samo svedeno na dve runde i sa manjim blokovima podataka rati. Dakle, detalji ovde za ključ su da sve to bitni ključ permutacijom nekom se dobije neki drugih 10 bita, podelimo na dve polovine od 5 bita, šiftujemo za 1 ili 2 sa zavisi kako implementirano i dobijemo nekih 5 bita i nekih 5 bita koje permutujemo zajedno i osmo bitni ključ od atle izvučemo. A sve to ponova šiftujemo i ponova permutujemo do dobijemo drugi deo pod ključa. Sami detalji i teracija, jedne runde su isti, kao i u desu. Dakle, imamo levu i desnu polovinu. Desnu polovinu odma možemo da smestimo na levu polovinu, dakle, sledeće runde, odnosno ovde, kao, imamo neku desnu polovinu, pa neki sopali. To je to, dakle, desni deo ide u levi deo sledeće runde. A levi deo predhodne runde se ksoruje sa celom ovom funkcijom desnog dela i samog ključa, na isti način, kao i u osnovnom algoritmu, imamo nej ekspanzijoni deo gde sa 4 bita idemo na 8, pa sabiramo ključeve, delimo to na 2 dela, odpo 4 bita prolazimo kroz 2 s boxa koje sa 4 nas spuštaju na 2 bita, to spajamo, permutujemo i to nam je ulaz na ovaj ksor deo. I naravno sve ovde kad završimo, ovde bi smo radili jedan svop, pa drugi svop, pa se to svodi na isto, tako da tu nemamo ovaj to načrtano i onda imamo ovu inverznu permutaciju. Kako izgledaju konkretni zadaci koji ćete imati na svakako na lab vežbi, ali i možda nekada i nakolokujemo ili ispitu, pa imate neku poruku, imate neki ključ i imate detalje samo galgoritmo, mi tražimo među rezultat svaki operacija, dakle postupno da rešite problem i vrednost na kraju šifrovane poruke. Tako da idemo redom, prosto što što vam predlažem da uradite, pa nezavisno bez obzira na poruku i možete da generišete sve ove ključeve. Dakle prvo što treba da uradimo, jeste da prođemo kroz ovu permutacijonu tabelu i ja sam ovde i naveo permutacijonu tabelu, dakle ovdje smo značili indexima pozicijom nekom mizu od 1 do 10, od pruk do 10 bita, a ovo je vrednost našeg ključa. I prosto ova permutacijona tabela sad kaže ovako, idemo 3, 5, 2, 7 i tako dalje, što znači da će na ovoj prvoj poziciji kada se permutuje, dolačimo ovo sa 3. pozicije predhodnog ključa. Pa sa 5. poziciji z predhodnog ključa ćemo da dovučemo biti, smestimo ga ovde, dakle, ovako. Pa onda sa 2. pozicije predhodnog ključa dolačimo opet neki bit, smestamo ga ovde i tako prosto popunjavamo deo po deo dok ne izvrtimo, odnosno ne izmješamo sve ove biti u ovom našem početnom ključu i dobijamo najulaz koji ide na one rotatole. Sada ovaj ključ koji nam je 1 pa 4. 0 pa 0 pa 2. ketca pa 2. 0, delimo na 2. dela i svaki zasebno rotiram po, etopet, implementacijonim detaljima, algoritma kaže, za 1 u levu prvoj iteraciji i za 1 u levu drugu iteraciji, pri čemu vodite računa, dakle, ovde iz nekoj razlega studenti stavno greše, mi nekad na kolok u imu ovde kažemo, druga iteracija ide za 2 mesta u levu i to niko nevic. Ili naučite da prosto ovo jedini zadate koji imamo na prezentaciji do uvek šiftujete za 1 u levu, dakle, to ne mora da budu da slučaj, možemo i za 1 i za 2 mesta u levu da idemo u opštom slučaju. Tako da, ovde šiftujemo sve za jedno mesta u levu zasebno svaku polovinu, tako da, odo ovog dobijemo ovo, a odo ovog dobijemo. Ovo vidite da ovde je to šiftovanje cirkularno, dakle, ovaj kec i otišo ispav iz levog dela i ušao na ovaj desni del i sve to konkateniramo ponovom. Tu konkatenaciju sada provlačimo kroz drugi permutacijonim algoritm, odosno, permutacijonu tabelu za ključ koja je, ope, data u zadatku, kao 6, 3, 7, 4, 8, 5, 10, 9. Ope vidite da keca i dvojku ni ne koristimo, jer svodimo ključ sa 10 bita na 8 bita i redomo opet dovlačimo bit po bit, kako nam je već u ovaj permutacijon i tabeli račeno, dakle, 6 bit, pa 3 bit i tako dati. I to što dobijemo je ključ K1, to nam je ključ prve iteracije. A ključ druge iteracije dobijemo tako što se vracimo na ono šiftovanje od malopre i dodatno opet šiftujemo sve, pa opet pogledam u teku su zadatka, za jedno mesto u levo, tako da ove keci ide ovde, a ova dva keca se išto rotiraju za jedno mesto u levo, pa se nalaze sada. Ovdje vidite radljeviti bojima, smih bojili da biste lakši ispratili gde je nulak, gde je jedinica. I sve to ponovokon kateniramo, dakle, istaj je pričakao i malopre i provučemo kroz isti ona i PC2 permutacijon i algoritam 6 i 7,4,8,5,9 i na taj način dobijemo ključ druge iteracije. Tako da na ove način nezavismost izvukli ključeve prve i druge iteracije, onda možete da počnete sam algorita. Dakle, sam originalnu poruku prvo provlačimo kroz onu inicijalnu permutaciju, koja je data u tekstu za datka ovom, ovim nekim redosledom bitova, tako se permutuju, 2,6,3,1,4,8,2,5,7 i opet dakle...
 povežemo sve te bitove, kao što smo veći to sada i videli, pa neću ovde da davim i dobijamo ulaz na prvu rundu samog algoritma. Rekli smo, s levim delom ne radimo praktično ništa za sad, a desni deo provlačimo kroz onu funkciju iteracija. Dakle, 1 1 0 0 se provlači kroz funkciju iteracija koja se sastoji iz 4 dela. Prvo se sastoji iz ekspanzije, dakle proširenja sa 4 bita na 8 bita, opet nekom permutatijonom tabelom da vidite sada neke vrednosti se ponavljaju, jer prosto nemamo dovoljno vrednosti u ovom ulazu da proizvedemo izlaz. Tako da opet, redom samo prevučemo, odnosno prekopiramo te biti, tačno koji na koju poziciu treba i dobijamo off. Sada to ksorujemo sa ključem te tekuće iteracije i dobijamo rezultat koji dalje provlačimo kroz funkciju celu iteracije. Dakle, sama ksoru operacija sećete sa ako su različiti biti, imamo jedinicu, ako su isti biti, imamo 0. Dakle, bez ovdje, da bihlo 1 1 ili 0 i 0, idemo redom, ksorujemo sve bitove zasebno i dobijamo neki rezultat. Sada rekli smo, taj rezultat provlačimo kroz 2s boxa, tako što ćemo prosto, u nutračnji, odnosno spoljašnja dva bita, prvo podelimo poruku na dva delaje, dakle, jedan ide na jedan s box, drugi ide na drugi s box, to smo rekli i u onom desu. E sad, spoljašnja dva bita rekli smo da utiču nabiranje reda, kako su spoljašnja dva bita 1 1, to nam je ovaj poslednji red, a u nutrašnja dva bita utiču na kolonu, dakle, 1 0 nam je dvojka, ako tako označavamo sami redove kolone, tako da, kolona koju indeksiramo je ova i u preseku se nalazi 0 0. I ovdje smo napravili vizualnu reprezentaciju, dakle, 1 1 indeksiraju poslednji red, a 1 0 indeksiraju predposlednju kolonu i dobijamo 0, odnosno binarno predstavljeno na 2 bita, to je 0 0. Na isti način i sve prolazi kroz box s2, kjeckjec indeksiraju poslednji red, 0 0 indeksiraju prvu kolonu i dobijemo dvojku kao rezultat, što je predstavljeno u binarnim cifterama 1 0, ta dva sada spojimo i to nam dolazi na ula za one permutacione tabele i sve vreme smo u funkciji teracije. Ta permutaciona tabela samo malo izmiksuje ove bitema, da vidite ovdje ih nije ni izmiksovala, jer samo smo na trojici, imali jedinico, trojka, ostala na trojici. I to nam je izlaz prosto iz same funkcije. Dakle, da se pocitimo, ovo nam je bilo ono što smo dobili na izlazu iz inicijalne permutacije, podelili smo na dva dela i sada smo rekli po faistelu desni deo preslikavamo u levi deo za sledeću rundu, a levi deo k soru jemo sa izlazom koj smo dobili iz ove funkcije. A izlaz iz funkcija smo malo prevideli, to je 0 0 1 0, to k soru jemo sa levim delom i to što dobijemo kao rezultat je sada desni deo ulaza u drugu rundu. Ponavljanjem celog ovog postupka, povom ovde sada, imamo levi desni deo, opet desni ekspanduujemo pa k soru jemo sa ključem k2, provučajemo kroz dva s boxa, permutujemo, dakle to je sve ovaj ovde deo i dobijemo nešto. I onda opet, novi levi deo je stari desni, a novi desni deo je stari levi k sor, ono što smo dobili na izlazu funkcije, to je ovo ovde i na kraju uradimo ona i četvorobitni svop, to je ovo ovde i provučajemo sve kroz inversnu inicijalnu permutaciju, ko opet sa početka ovog zadatka možemo da vidimo kako je konstruisana tabela i ako odradite ove deo zadatka, vida ćete da ćete dobiti ovo resenje kao konačnu poruku na kraju. Dobro, dali imate neko pitanje za sdsalgorita? Dobro, da imate neko pitanje za sdsalgorita? Dobro, da imate neko pitanje za sdsalgorita? Dobro, da imate neko pitanje za sdsalgorita? Dobro, da imate neko pitanje za sdsalgorita? Dobro, da imate neko pitanje za sdsalgorita? Dobro, da imate neko pitanje za sdsalgorita? Dobro, da imate neko pitanje za sdsalgorita? Dobro, da imate neko pitanje za sdsalgorita? Dobro, da imate neko pitanje za sdsalgorita? Dobro, sovzirm da smo probili dosta od časa, nebih vam sad pokazivao taj simulator, osim ako baš neinsistirate, jer kažem on je dosta jednostav, ono opšte nećete imati problema s njegovim korišćenjem, reku sa vam koja je šifra, pa sad možete da ga preuzmete srednetnog sajta, dakle on se negde nalazi na sajtu, ja se nadam da ga je u stvari žarku postavi, onam je postao, poslao sliku, odnosno šifru, tako da to proverite. Dakle simulator je bukvalno ovako nekako naprođen kao gomila nekih tabelica sa nekim vrednostim, ali naravno za des algoritam. I onda vi tamo imate da klikčete po ovim rundama, dakle klikčete i delovima tih rundigledate šta je izlaz iz svega toga, ili u delu rundigledate šta je izlaz iz ekspanzije, kako izgledaju s voxovima možete da ih otvorite i tako dalje. I tačno u nekom delu simulatora možete da vidite šta je izlaz iz te konkretne funkcije i tako se dovedete do konačno grješenje. Simulator koji koristimo na lab vežbije za njan su drugačiji, tako da ne treba sad napame da učite gde se šta nalazi u simulatoru, jer videte što je dosta jednostavan. Zakorišanje, ovaj na lab vežbije malo drugačiji u smislu designer, dakle neke stvari se ovde nalaze levo, neke stvari se ovde na lab vežbi u simulatoru nalaze desno, ali s nači ćete se već na lab vežbi. Mislim, tu smo i maja, ja s ovrema jo bilazimo, tu će biti demonstratori, imate sa svim dovoljno vremena da odradite cel zadatak, tako da taj simulator neće pretplatljati nikakavu prot. A dobro, da li imate još neko pitanje za kraje? Ja ću da preprojimo ovnu prezentaciju sa rotorima, pa ću postaviti na sajti, postaviti odnosno na mudli, ovoj prezentaciju na model, dakle nekom trenutku večeras i snimak. A mi se naravno vidimo, dakle na lab vežbi odnosno sledeće nedeđe na času ko ne bude dolazio na lab vežbe. Eto, to bi bilo to od mene za dana, spas se vidimo. Sledaće nedeđe pozdrav.
