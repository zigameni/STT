 dok le god neko ne dođi i kaže čer jednako jednako jedan. Kada postane u suštini čer jednako jedan, to jest različit od nula, mi ćemo se probuditi, mi ćemo doći na ovaj ovde red čer minus minus. Znači vidite imamo ping pong, ovo me smo rekli budi se, a onda čekamo da taj nama kaže ja se probudio da čer postane različit od nule. Kada čer postane različit od nule, mi možemo da umođimo to čer. I sada i Berberin dobio povratnu informaciju. A postoj mušterija i mušterija je sela za stolicu. Sada ja mogu da vadem da krenem da mlatim tamo makazama i ovde Berberin, ovo je naš serevski proces krene da mlati, šta go da radi, to ne znamo šta radi, nitka zanima kako Berberin radi. To neko drugi treba da napiše. Mi se ovde bavimo synchronizacijom. Tako da se to obavlja ovde izvan našeg monitora. Nemojte da okupirate previše dugo monitora. A što je, ako možda da šiša samo jednog? Može on da šiša samo jednog, a ne mogu ostali da čekaju. U gotova, ako bi bilo ona druga varijanta, a gde se zove mušterija treba da gvirne, ako je puno da odredi nešto, ako nije puno da uđi u nutra. E u tom slučaju mušterija ne mogla ni da gvirne da vidi, jer ima slobodnog mesta. Toga, nemojte okupirati monitor, takvim poslom. Monitor se radi synchronizacija, posao se radi izvan monitora. Možda može se odredi neki jednostavn posao u monitor. To je prevežil list u baci nešto, nešto što znamo, tačno, koje posao koje se obavlja. I to su namenski napisan i onda monitori, kao što smo mali ba on the buffer monitor, gde smo imali baš to naše čudo, te podatke smo čuvali. Isto tako ako bi bila lista, mapa, stablo ili tako nešto. To je to preveži i ta dva pokazivače. To je taj posao koji treba se obavi, to bi smo odradili u nutra monitora. Ali sve ostalo bi trebalo je raditi i pan monitor. Šta radi ove, šta radi finiš? Kada završi šišanje, kaže vrata su otvorena, možete ići. Ali ona ne smjeda pređe na obsluživanje naredne musterije. Dokle god ona musterija koja se nalazi u nutra, ne završi, šta go treba da završi da progleda o frizure dobra, da ostavi tu novac ili šta već. A ovaj ovde reko, ok. Šta radi onda musteriju, obavestio musteriju i čeka dokle god open ne postane jednakonula. Kada kako će saznati da je open postalo jednakonula, nekako što će neko da probudi ovu ovde stranu postavljanjem ovog ovde customer left. Berberin je uvećao open na jedan i čeka da open postane jednakonula, da bi smo mogli da pređemo na sljedeći koran. Če vidite, imamo rendezvous. Kako radimo rendezvous? Jedna strana obavesti drugu stranu, druga strana obavesti ovu ovde stranu. Šta je to bilo obaveštenje? Bilo je obaveštenje na ovu ovde stranu Barber Plus Plus. Plus Plus, ove ovde čekao na Barber i imao je Barber available. A ponovno? Ovo je uvećao Barber Plus Plus, to je s ove strane što je došlo, a ovaj tu kad primi, on će imati obavnom tom revlose, dočekam na to, a ovaj ću umanjiti. Randevuse u suštini realizuje, svaki od ovih ping-pongova, svaki od ovih koraka, neko promeni promenivu i obavesti na cemaformu. Ovežimo se obavesti nad uslonom promenivom. A ova druga strana primi obaveštenje pa promeni promenivu. Na taj način realizujemo randevu pointe, znači ove tačkice u randevu, obavestim, dobijem informaciju. Imamo ping-pong između ovih strana, ako bi trebalo još plati, slikaj se na miriši, šta godeće zaradi, one Barber i tamu Barbernici, to bi moglo se realizuje ubacivanjem još takvih ping-pong portova. Pointa ovde, pomoću kojih bi to mogli da radimo. Da bi bilo potrebno oddijemo dodatne promenjive, a ovde u ovom ovde stučni ne bi moralo oddijemo dodatne promenjive, opet bi su mogli da realizujemo koristići verovatno slične ovde promenjive, da opet uvećavamo nešto na neku vrednost, ali vam u suštini sigurnije da stavljate za svaki taj ping-pong, ovak u jedno par čekoda, postavi obavesti, a na druga strana ima primi resetuje. Evo ovde vidite, prijemna strana kako izgleda, imam čekaj, čekaj to je da primim resetuje, a strana za oboveštavanje postavi signaliziraj. I ove tehnika možete koristiti, to je tehnika koristinje rendezvousa. I ona se koristi kad imate u suštini dva procesa, pošto mi ovde imamo u suštini dva procesa, jedan, koji god, koji je prošao All of the Barber available, nezanima na sberberinu, na tenetno nezanima koje će mušterije doći na red. Ove zadatak može još malo da se zakomplikuje, a tako što bi mušterije možda trebala, među sobno da se sigurnizuju, pa bi smo onda imali možda dva reda stolica, jedne su one stolice koje su, za mušterije među sobno, a onda druga stolica je ona koja služi za synchronizaciju sa berberinu. Tako da može da se pojavi ovde još neko ko treba, još neka faza koja treba da odradi synchronizaciju, ali posob je opet bio isti. A kako samo odrediti koje taj prvi koji treba doći na red? A jedan od načina je da napravimo sličnu stvar koji smo imali pree, a koja slična stvar koji smo imali pree? Šta smo imali pree uopšte? Imali smo, onaj interval timer, kojeg sa onim prioritetima, gde bi smo mi mogli da kažem, oje prvi, oje drugi, oje treći, ili bi smo to mogli da realizujemo ovde baš potpuno koristiti Andersinov algoritm, a zato što bi rešenje bilo tako napravljeno da imamo tačno n stolica, odnosno n stolice za čekanje i još jednu za samu opradu. I tako da u tom slučju bi trebala, ako imate berbernicu, gde imate konačan kapacitet, a nemate usluhne promenjive sa prioritetnim redojima čekanja da iskoristite tehniku, koja je proistice iz Andersinovog algoritma, da ćete iskoristiti jedan niz i buditi tačno po tom redosledu, jer a kod ovog ovde ovo je naše varijante imamo tačno n, nemojte će biti više od den procesa, koji su tu za blokirani, kao što smo možda maloče smogli da imamo kod onog predkonog problema koji smo razmatali, pa smo onda morali dovodimo, dovodimo tamo još jedno dodatnije red, da će čekati sviju ostali, kod interval timer ili tako nečega, ovde toga nema. Ovde ih može biti maksimalno n, ako imamo tako nekakvo ograničenju, tekstu, zadatka, onda to možemo iskoristiti, jer da ponujem i još jednom, kakav god da je monitor, ustvona promenjiva kod monitora, koliko god da je poštena ili nepoštena, ako postoji jedan koji je zablokirano, kad kažete signal, ta jedan se se proboditi, nema koji drugi da se proboditi. Tako da to možete iskoristiti, to svojstvo, da vam je garantovan redusted, ako znati da je jedin i neko. Okej, i ostanem još jedan, synchronizacijni problem, a to je problem vožnje kružnji tohko. A čimamo ovom, oprovno na crtem, a ako imamo crteš, a kojoj opisuje našu raskarsnicu. Ova naša raskarsnica je jedan, kažem, relativno jednostavan kružnji tog. Imamo mogućnost da uđemo u raskarsnicu sa tri različeta mesta. Ovo je ovdje može da uđe pa da se lozi. Ovo je ovdje može da uđe i da se lozi. Ovo je ovdje može da uđe i da se lozi. Ovi što izlze, mogu da ovom slučaju nastavlja da se lozi kružnim togom ili da izadju na svakom od ovih ovde mesta. Može neko da nastavi, može neko da izadji. Dobro, koliko automobilja može biti u kružnom togu? Više. Dobro, a koliko automobilja može da ulazi, izlazi isto vrnima od iz kružnom tog? A možda, može više. Koliko traje kretanje kružni tog? Nemam poima, ako se se nekad vozir i slavijom, to možda potreja. Tako da to nije nešto što se trenutno odesava. Zašto vam govorimo ovo ovde? Nije trenutno što se desava. Nije kao preveži dva pokazivača, koje imamo kod viste ili uveće jedan brojač, u manji i drugi brojač. Ovde je neki posao koji traje. Taj posao koji traje, možda traje neodređeno dugo. To neodređeno dugo, svarno može da bude dugo. Da li znam, koliko će trajiti? Nemam poima, da znam, kako se upravlja u tom motorni vozilom. Nemam predstav, kako su upravlja u tom motorni vozilom. Tako da taj deo, glede će uvijete samo upravljenje motorni vozilom. Treba da bude potpuno izbačeno iz našeg monitora. U monitoru se ne upravlja motornim vozilom. U monitoru se radi synchronizacij.