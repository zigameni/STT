 Da, što se tiče ovak, sad, je ovo ih vež bit deset, ovaj bit treba odbude deseti čas da redovno idemo na fakute da se ovo drže live. Dakle, ovde sada danesnja tema treba da vam bude sad nešto novo, nešto s tova nema veze sa onim vašim projektom, no tako to, o što u danas budem priča, ovde nećete implementirati u projektu, ali, naravno, čekujete na ispit. Dakle, da jadu kraja kursa, imam još ovu temu danas koja brađemo, to je njegu generisanje među koda. Zatim ćemo na sljedećem čalstvu raditi generisanje koda za x86, a onda tamo ćemo ostati još jedna tema, neko izvešno okruženje da zavrešemo, bi ja ću se potruditi da se to pokušam da spakujemo možda i jedan duži sljedeći čas, ali, evoče, to lo možda nam budu trebali jož dva. Tako da ne mogu da vam garantuje koko ćemo i treba, ti još nisam ni primprijednjimo te prezentacije, to ćemo viditi. Da imamo danas, znamo šta je sada ovako ovo gde teba, tema danasni danas. Dakle, imamo danas nekako generisanje među koda i sve ovo će biti u svarim nekakve sad da kažemo kompajderjskie tehnike koje opet kažem ne implementirat u projektu, ali, ja to da ih prezentamo ovdje, da lice, na primvrš, šta je još se tu poslojim. Pa, ajmo redom, ovako. Kaža je konstruisati syntax u stavlu i acyklički grad za sveći izrza. Odno će prečine za zadata kem, pa ćemo da i dologo zaključiti šlami za provod, da danas se radila. Za slučaj pod b se traže jedna zada damo implementaciju syntax u stavlu, da vidite sad. Tražite sa ovdje od nas nekako izsid. I tako smo stavlo acyklički grad, a za ovopod b hoćimo iz stavlo zapis i vektor zapis. Pojenta dakle našnih času će biti da mi različite nekakve iskaze ovde, prikazujemo na nekakve različite načinete, to je da vidimo koje se to representacije njihove posloje i u početku ćemo samo nabrojati nekakve sad da ovdo tako o stavlo zapisa, vektor zapis i različite varjante, a onda ćemo malo više vremo naposvetiti nekima od njih. Pojenta srega toga je ste da vi sada imate nekakav izvorni program na kojem je napisana, primjer nekakav izraz kao što ovaj koji trenutno vidimo, da to je da a je 1-d putac c, plus, pa i tako dalje, a pojenta je da sad ne želite da prenosite taj izvorni kod, nego želite da prenosite nekakav medju kod. Dakle nešto što nije već izgenerisan byte kod iliti neki možda čak i izvršni kod, nije izvorni kod nego je tu nekde na pola putrstvu, rekao tako da to ga izvama neki medju kod. I sad različite reprezentacije toga jedna nibi na primjer bila da ovej prvi izraz nekako sintak smo stavljali. I to sintak smo stavljali kada smo radili i ove gramatike, tako da to sintak smo stavljali bi za ove izraz ovde gore koji je vako malo povelik izgledalo ovako. Dakle u svariji što bi bilo, kao da ovod je sad puštati nekakvom gramatikom da si isparciro i gledate šta je taj parser u svariji u radiju. A je jednako i onda si spuštate skroz doli kažetim, ako je ovaj sad na primjer unarni minus, onda ću imati samo jedan čvoril, tako potom, ako ću jedan samo biti u ovom sablu ovde, a na primjer ovoputa ću imati dva potom kako se radi u nekom binarnom operatoru. I onda je ovo što, minus b, pa se to pomnožlite c, pa se sabere sa d minus c podljivno sa f, pa se sabere sa minus c, pa se sabere sa d minus c podljivno sa f i sve to se dodeli u a. Dakle, ovako bi zledalo to neko simtak sa sablu, to smo vići crtali, nećemo mnogo vremo nebu biti na to. Profesor je ovo već radi na predavanjima, ako sam dobro uputjen, tako da ove zadatke uglavno neće da je on. Zadatke što stiče ove oblasti ovde koji dozili obzir da damo koleginica Maja i ja, njih ću raditi malo kasnije, a sad da i čisto da predvim okroz ovo sedav da vidimo šta to se poslojite. Zdajem ovo cikličko grafa, njega dobijemo svar i od ovog sablu ovdje, tako što nekako je zajedničke podizraze, ako nađete da se na više mesta na primje nalazi neki podizraz koji je veći, onda možete to da zaminite tako što ćemo samo tako napraviti nekakav a ciklički graf. Dakle, ajmo jedna mala animacija ovako. Pa se sad ove desili, i kako je sad ovo nastalo ovdje, pa ajmo da se vratimo nazad. Pogajte ovo da vidite da imate zajedničkova jedna dela, ovaj jedno podstablo ovdje i ovo podstablo ovdje su zapravu identično, dva identična podstabla. D-e podileno sef, i ako pogledate u izvara uz ugore, vidite da ovdje ima d-e podileno sef i ovdje imam d-e podileno sef. Da bi ste prati li ovo reprezentaciju, možemo to dobrojimo tima cikličkim grafom, okoliko primetimo da ima više ovako, vakvih nekakvih ponavljanja i onda zapravo samo uvedemo tako ovako jednu linju da kažemo da ovako ovaj ovde grani pripada celokupno ovo podstablo. Dakle to su nekada razvijeta variante, kako to možemo da crta. A neopogledamo ovo pod b, šta se stuvio još javlja, dakle ovako će izgledati to naše ovako sintaktnost ablo za ovaj izvara, z koji je prikazano ovdje, dakle f je jednako minus pa šta, a puta b plus c, ako bi izgledalo svar je ovako izvašavanje ovog ovdje. E sad, to tu naše sintaktnost ablo i aciklički graf za ovaj izvara, ovdje će izgledati identično, zato što svako nemamo ništa što je zajedničko, da bi to bilo ponavljeno na više mesta, pa tako da to mogu nekako da ovde sada tako skraćino način. E sad, ajmo to sintaktnost ablo na stranu i da vidimo sada šta je to stabilo zapis, i šta je taj vektor zapis. Ovdje ćemo sad već da krenemo malo da tako ulazimo u tu oblas, kako sada taj nekakam među kodu stvari, dakle ovako nešto predstaviti tako da bude standardizvano i da vidimo na primjer možete spakovati ili poslati nekome za, znači zapakujete u neku datoteku, i onda kastnije možete pošeljeti da nekom i da neku uzme taj nekakav vaš među kod i da onda generiše nekakav svoj kod zašto već on sad želi. Za konkretno neku architeturu. Dali sad za tu nešto vašu, tako, micro-A, virtuolo mašinu, dali za java virtuolo mašinu, dali da generiše x86 kod. Dakle potpona nebitno važno je medijemo neku među reprezentaciju. E sad tu vidu stabila zapisa, to bi izvedalo ovako. Dakle inacimo čvorove i dalje trpam stabila, dakle, ovako, bukvalo isto, kao ovog orjela, tako, na crtano, samo što sad ovdje već ulazima malo u standardizaciju toga, kako sad treba da igla to stabilo, da biš al tako to lepo sad sve spakalo. Dakle, sudak da si pojavljio je promeljiva, ja imam jedan čvor, koji će reći, ok, da je to promeljiva i koja je to promeljiva. Ovo treće polje o vamo neću koristi. Okoliko se radi o unarno operatoru, prvo polje koristim da kažem koji je to unarno operator, drugo polje kažem da, naprim. ovaj unarni minus ovdje, tako šta je njegovo operant, da o ta šta će on to u svari negirati, treće polje po što unarno operator ne koristim, a okoliko se radi o binarno operatoru, prvo polje koristim da kažem koji je to binarno operator, zatim narjedno dva polje da kažem koji su to operanti. I sad ako pogledajte ovo sve, o vamo, o celo stabilo, u vidu stabila zapisa se srta ovako. Dakle, vidite sad ovdje, idemo redom maj na primeru od ozdo, kažem, ovo je množenje, promenljive a i promenljive b, zatim se to sabira sa promenljivom c, zatim se uvradi negacija toga i zatim se to tu dodajlje ovoj promenljivo f. I to bi sad bilo u vidu stabila. A onda, ovo je drugi način, kako ovo se možemo da zapišemo još, ovaj će biti povnoć u nekakog vektora zapisa i ovo zapravo ako pogledajte, je ovo sad svano izgleda nekako tako strukturirano, gde ovaku tabelu ja samo mogu da ubacim u nekakakav file. Ako pogledate sad ovo naš inicijelno syncaksno sadlo, nije ga al tako spakovati u nekakakav file, pa mogli biti se sad na različite način, al ovo ovde sad je u tako predstavlja sad neka ka našna hajdera, kažemo santerizovan način, kako mi to možemo da spakovamo i kasnije da učitamo i da znamu saj korisnik tuh te. Kako smo dobili, kako se dobija, ovo je vektor zapisa ovde sada, pa ovo bi lozite zapravo o stabilito, i go bi lozite i dete z desna, od desne strane, dakle, odem z kroz desna, što znači krenete iz korena, a korena je ovo assign, idete desno granus, spuštate se do ovoga u minus, idete z kroz desna, nema ništa, ok, dakle, onda bi lozimo ovoj level, tako ovoj srednji slan, al tako doko čvora, ulozimo njeko, bozimo doko čvora, ovdje idem z kroz desna i doozim do promeljive p. Pa radite, kada ne ilazite na promeljivu, pravite novi zapis, zato je ovo zovemo al tako vektor zapisa, tako pravite novi zapis i njih redom indexerom od 0, kažem, taj zapis na 0 će biti promeljiva, koja se zove ovo tako c, ovo ovde polje četvrto tako nine koristi, dakle, došli smo tu. Ako smo obradili tu promeljivu, vraćemo se nazat, dolozimo i idemo sada ovoj srednji, ovdje čvora, spuštamo se dole, dolozimo do ovoj čvora, ove noženja, idemo z kroz desno, spuštamo se dole i dolozimo do promeljive b. Pravimo novi zapis, ovdje, na jedinici, id, id označa bo sori promeljivu nekakvu, kažemo b. Vraćem se gore, idemo do srednjih čvora, spuštamo se dole, na ilazimo na promeljivu a i sad, tek nakon što obidljete, al tako iskroz ovej desni i srednji, al tako deo čvora, onda al tako, te o taj čvora zapravo završavamo. Ako da sad, ovde ko do ovom noženja, kada smo obišli ovo i a i b, onda kažemo da se tu sada pojavlja jedan zapis, da se to množi. Evo ga na adresi 3, tako na indeksu 3, kažemo ovde to je množenje, množenje čega? E ovde sada neću pisati celokotnih izrga, znašta je to množim, nego sada, ovde se samo referenciram na predskotne zapise, koji već kostoje. Dakle, ja ovde sad množim a i b, ako pogledajte, a je bio sreindeksom 2, a b je bio sreindeksom 1, dakle kažemo ovde, kao od reciji zapis, to je množenje, nečega što je bilo na dvojci na kjetcu, a to su ovde ovde a i b. E sad, kad se vratimo gore, jedan korajak još iznad, dakle što ovaj plus treba da se bere, pa ono je tako što je njegovi sredni član i ovo što je skroz desni član. Sredni član njegovi je ovom množenje, množenje se nalazi na indexu 3, tako da ov množimo, tko je sabiramo trojku, a je bio desni član, desni član je bio ovu IDC, to je bilo na nulit, tako da kažemo ovde to je plus i sabira se trojka i nula, tko je sabiraju se ovde index, ono što se nalazi na indexu nula i ono što se nalazi na indexu 3. Nemajte mešati ovo ovde da sabiramo svar i konstantu 3 i nula, s antam nibi smo ovdje imali poseban čvor, koji ne bi ovde reko da je to ID, nego bi smo napisali da je to const i onda bi smo ovdje upisali u stvari koja je to vreda. Dakle, sve će imati svoj neka ka v čvor u ovom neka kom sablu zapisa, a fakom tom čvoru u sablu zapisa će odgovarati jedan od takovoj ovde backpack zapis. I ako preblujite čvor, ovaj kogu ih ima,
 u 3.368, videte ćete da toliko ovdje imam i zapisa, dakle od 0 do set. Ako sam došlo do plusa, videli smo kako smo pravili njega, vraćemo se tako s kroz goru anda, dolazimo do ovog unarnog minusa, pravimo novi zapisi za njega i kažemo, on treba da negira, ono što je tako srednji član, našta je njegovu srednji član pokaziva, a to je ovaj plus i to je u stvari četvorka. Ovo poslednje polje kod unarnih operatora, o tako ne koristim. Zatim dolazimo gore s kroz, kod ovo ga assign, skoro zesni švor smo cjego bradili, ajmo sredni čvor, sredni čvor je ovo idf, evo ga na indexu 6, i na kraju, o tako za kraju, obrađujemo ovo assign, kažemo assign i to šta gde, dakle treba u ovo f što se nalazi na 6, na indexu 6, smestiti ono što se nalazi na indexu 5, a to je cjela ne izdar za takovoj naše unarnog minusa. Kažemo, ovo profesor je o takovoj različite, reprezentacije i dobrovacno detaljnije radi na predavanjima, ale imam ovdje jednom primvara čisto da imi pokažemo šta to se postoji. E sad ima tih različitih reprezentacije i još pa ćemo ih videti dosta danes. Ajmo, da li? Ako imate neka pitanja, slobodno kucite na 4, li su ključite kako godo vam je lakše. Kažemo, da je zadatav 2, imamo primer nekakvu sekvencu kod napisano na progrenoskom jeziku c, i sad kaže, napisati troadresni kod, pa ćemo sad evimo šta je i to znači, i njegovo implementaciju putem nekakvih štvorki i trojki, dakle sad će to biti nekakve opet različite reprezentacije u tog mašljeg nekakvog troadresnog koda koji opet nekakva varijanta među kod. I onda kaže, ode su premeljive i i p, deklarisane na i, p i a, deklarisane na sljedeći način, dakle i je uslali nekakva samo integrarska premeljiva, p je nekakva pokaziva, čoško mošte li i zato će to vdegore, a a je uslali nekakva vniz, kako i implementacije. E ano da imamo sad prvo od ovog koda kako se generiša taj nekakvog troadresni kod i šta to zapravo sad ovde znači. Mićemo sad, pakko ovu jednu naredbu, koja je napisana na programstvom jeziku C, da rasparčamo na nekakvog tako delove te naredbe. To je s kako sad ta naredba treba da se izvršava, kojim redoslo da, pakko šta se radi sve. Naprena možemo samo da kažemo, e, u index, i, b, niza, a, smesti, da reserencijra no p, to je zdofati podatak sa adresena koji prikazila pokazila šte, saborano sa dva. Dakle, to tu vidite da sad dok sam izgovarao, sve to reko sam da treba dosta nekakvih akcija da se izvrši. E, mićemo sad to sve da rasparčamo na one najprostije moguće akcije koje pospaje. A da dok to budem rasporčala, uvodiću nekakve pomoćne promenljive, al tako koje će mi panititi te nekakve vrednosti među rezultata. I onda kažem, za početak ovako. Najprostije što mogu ovde dobrodim, jeste, ajde, dofati mi podatak sa adrese p. I onda smestim, naprim. taj podatak, kada de-referencerimo to p, smestimo neku lokalnu, to je, privrjenu promenljivu, t je 1. Nakon toga, sledajće, minimalno što mogu da kažem, jeste, ajde to t je 1, sada saberi sa 2. I to smestim onda u t2. I onda na kraju, te ko mogu da kažem, je onda sad ajde na taj index a od i, upiši to sada t2. I ako pogledate sada, svaka od ovih linii, a ovde treba dodređuje jednu nekakvu tamo instrukciju, koja će kasnije pospajati da se tako nešto odrati. Ovo ovde, napim, de-referencirajne pokazivacate, a onda ne možemo objasniti na primjero mikrojava, jer mikrojava nema pokazivača, ali napim, ovdje vidite druga, i u stvari mikrojava na operacija et. Preća bi bila mikrojava na operacija a100, to je istrukcija a100. Dakle, treba da rasparćamo sete na redbe na pojedinašno u tako delo. Ajde, imamo sada ovu drugu, napim, ako ćemo nju da osaku podelimo na delove, šta treba dovradimo? Dakle, da smestimo na adresu pokazivača 5, to je ste gdje pokazuje pokazivač P u memoriju, da smestimo element niza a, a koji je index ili tako tog elementa i-1. Pa onda ću ja prvo dovradim, jestli da izračunam ovo i-1, no tako prvo kažem t3 je jednako, nekada pomoćno prameđiva, jednako i-1, oduzmem to. Dohvatim tu vrednost u t4, dohvatim vrednost ili tako elementa, a od t3, ako pogledajte, ovdje bi u mikrojavil, tako bila šta, bilo bi istrukcija sad, ovdje bi bilo neka istrukcija alo tko a, njoj bi odgovaralo to. I sad pekad 1 to 4, onda kažem zvezda p tako upiši u memoriju ovu vrednost t4 koji sam ovdje dobija. Da ga imamo ovo i plus plus, tako ćemo to uraditi, pa moramo prvo tako da ovo i sberemo se jedan i onda kažemo e sada u i upiši o tako to nekako tp. Ono što morate da znate, ovde sada kar bilemo pisali ovaj tradrstnik, odvodite se samo logikom, da u jednoj linii ne smet da vam se pojagio tako dva puta nekako pristupanje memori. Dakle, ode nisa mogu da napišem, i je jednako i plus jedan, ovdje to zahtevalo da nešto pročitam iz memorije i upišem u memoriju, nego tako zahtevamo da se prvo to učitav, neku privrminu promelju, pa se te konda upisuje ovo i, pravo što bi se realno i uradio. Kad smo napisali taj troadrstnikot, kažem sada kako ćemo sada taj troadrstnikot da sadarizamo opet, da nekako predstavimo, ovdje ćemo tratati nekako tabelu, da ovdje to sada nekako redno se poradio, da se ima nekako svoje mes. I kažem tamo imate nekakve četvorkje i trojkel, možemo da prestavimo sada na različite opet načine, ove četvorkje će značiti sledeće. U jednu odmah prvu da prikazim, pa ćemo sada redći, ova tabela ovdje kaže sledeće, treba da kažem za svaku u dovih linija gore, za svaku u tako linju koji se navio dovih hosa, koja je to operacija, koji je operant, eventualno kubo stoji neki drugi operant i gde se smešla rezultat, gde ide rezultat u toga neček. I onda ja svaču za svaku u dovih linija, da, ako nju uparim sa jednom linijom ovde dole da kažem kako će to reprezentovati. Kažem ovde gore, u t1 treba da dofatim sa adrese na koji pokazuje pokazivače p vrednost. E to tu, pošto tako da je referenciramo, pokazivače to, tu ćemo pisati kao assign zvezda. Pokusavam ovo ako je zvezda izla, kažem onda da to, ako pogledate gore kako je izla notacija, jedna ko je zvezda, možemo i to dopičimo, slobodno možete ga ugotrati, ispi da pisate ovde i jedna ko je zvezda, da i ti ime jednako zvezda, u stvari, govorimo da treba pročitati nešto tako sa te adrese koji nosi pokazivače p. Ka operandi 1 prosledinam taj pokazivače p i onda kažem rezultat treba se smesti u ovu privremenu promeljivu gore p1. Nakon toga, ako gledamo slješu, kaže t2 je jednako t1 plus 2. Dakle treba da se odradi operacija savdiranja, šta treba da se sabere p1 i 2 i rezultat treba da se smesti u tako u neku novu privremenu promeljivu a to je promeljiva tako ovdeg ored t2. Ajmo, dakle, sako od ovih linja, će se sad upariti sa jednom o tako četvorkom doda. Kaje, a odi je jednako t2. Šta radi? Ovdje ćemo operaciju nazvat i indexiranje jednako, ovako ćemo biležavati, da su stvari radi nekako smeštanju element niza ili tjegodinamik, ovaj bi jo nekakav a stor. I onda kažemo šta su operandi. Značite index niza i vrednost koju smeštan, a rezultat u ovopolje rezultat ćemo pisivati koji je to nizvolta koji želimo nešto da nesti. To je o tako notacija koji ćemo koristiti za o tako pamćenje ove četvorki konkretno lafte. Každa, da je sljedeća linja, t3 je jednako i-1, to je operacija al tako minus koji su operandi pa i i jedinica, gde ide rezultat i do promeljivu t3. Evo govod. Dalje imamo t4, je jednako a od t3, kako izgleda ta četvorko tu. Tako da sada kažemo, sada treba da učitamo nešto iz elementa niza pa ćemo se voditi istom logiku on koja malo prej samo što ćemo to sada beležiti kao jednako ovaj operator za indexiranje. Ime označavamo da treba da se pročita nešto i da se dodeliti nekako. Dakle vidite koja je razdika između ovog čitanja. To je smeštanje u niz i čitanja al tako iz niza. Samo ćemo tako obbranuti redu sada ovih zagrada za indexiranje i ovog al tako jednako. A naodimo ovde, pa je slično al tako kao i koji kao naše mikrojave. Da treba da učitamo nekako u vrednosti iz niza. Koja o prvi operant ćemo navesti koji je to niz kao drugi operant ćemo navesti koji je index nego učitamo, a kao resultat ćemo režit će od tako gde treba upisati tu vrednost. Nekako i onda al tako to ide u t4. Dakle a od t3 treba da se smesti u t3. Tako će izgledati ova na primvrš četvorko. Kajemo, da je zvezda p je jednako t4, to će učitamo, da ćemo će izgledati ovako. Dakle, kao što smo gore imali da treba da pročitamo sa adresi našeg pokazivaca p nešto, pa smo pisali assign zvezda ili jednako zvezda se jedno. Tako sada ovde kada kažemo da treba da se smesti nešto tako na tu vrednost. Dakle, ne čitam, nego smištam. Onda samo zvezdi smo izbaciti ispire. Zvijemo, zvezda assign. Šta upisamo upisam u ovom t4, a gde, e onda ćemo sada o polju resultat ovde reći da je al tako to adresa p. U polju resultata ćemo reći da je to u svariji ovo našto pokazuje, pokazivac p. Jednje ove redo ovdje ćemo zameniti ili tako to operacija plus, ili tako i i 1 se sabiraju, resultat ide u t5, a što će ovo poslednje ili tako i jednako t5 operacija samo assign, dakle, sada bez zvezdica, bez znakova zainviktiranje, kažemo, ovo t5 treba da se smesti u i. I sada ko pogledat ovo ovako zapisano, ja, na primeru tako, operacija, to jest operacija, operant i 1, operant 2 i resultat, imam redomo tako za svakog dolih instrukcija troj adresnih, gore, ja, al tako i jem po i 1 redo ovdje lepo zapisano pa ona radnji. Neko sada kasnije, kada dođi i kada vidi, na primer, konkretno, ajme, na primer evo četvorka, na primer, nije loša da se objasni, ovdje kažemo ovom četvorkom, da se vratimo samo da vidite koje je to bilo delan, dakle, to je bilo ovo. Akko ovdje sada je prooznačavalo, t4 je jednako a od t3, i ja sam to zapisalo ovom operacijom ovdje, a, t3 i t4. Ukoliko nekod dođe u ovako našto pročita, želi da izgeneriši, na primer, kod za mikrojavu, on će ovdje ovdje ovdje ovdje izgenerisati instrukciju a load. Amo, nekde ja, na primer, dođete sada pak oćete da izgenerisete kod za neku drugu architetu, u drugu, neku virtualnu šinu zlično, ona će imati nekada svoje drugi instrukcija, ali vama je samo važno da je tu potrebno iz nekakog niza a učitati ovdje ovdje, tako našto se indeksak koji t3 i smestiti nekog upromeđivu tečete. Tako da ovdje ovdje, tako sam dedizovanom.
 napisanu, a vi onda s tim radite što go odpoželite na dve. Ove četvorki je to jedan način kako to možete prikazivati. Kore tih četvorki možemo zradimo sledećem. Da zanema limo da postoje ove privremene promenljive, gore t12345 koje smo na vodili i da umesto tih privremenih promenljivih koristimo u svariji ove indexo ovde sa strane. Dakle, koji vidite, ja sam ovde sve vreme vodio indexe 0, 1, 2, 3, 4, 5, 6, 7, a sad ću ovde umesto da govorimo tako o t1, t2 i slično, ako koristit ću te indexe kako bih skratio, kako bih izvršio određeno kompresio. Dakle, da mi ovo ne bih zuzimalo mnogo mesta kada to budem pamitio nekdo i sva već, ja onda u svariji izbacujemo zako jedno od ovih kolona, sad ćemo sva ko vidite i koju i koristimo u svariji ovej index, al tako te neke predkodne trojke koja se pojavila. Tako da te trojke će izvedati ovako. Ima ćemo operatiju, ima ćemo operant 1 i operant 2, ali kolona za rezultat neće postoje. Nego ćemo reći da podrazumevamo da je taj rezultat ostav, pa sad vidjet ćemo u kom operantu. Ajmo reći, kažemo gore i dalje operacija će biti istim, znači samo u par iz uzetaka, kažemo ovdje assign zvezda, dakle i dalje je ovo jednako zvezda i onda kažem, u prvim operantom ću reći gde se smjestila rezultat i reći ću da to ide u index 0. Zato znači u index 0, reći ću ovdje al tako ova 0, al tako treba da pamititi u priviromeno promeljivo. Irolo t1 ako pogljate u vama u vašem programu njegde nini postoje, ovo to smo mi uveli kao nekako u pomoćnu promelju. Ovdje sad da pri likom zapisivanja ovih trojki, ja ću tako im direktno pamititi da je to u stvari t1 ovde sa strane, ja ću sebi zapisati i okolo ovdje njegde neće postoje. Te bi ste vidjeti posled kako ću ja sad referencirati o t1 kada go budem koristio. A kažem šta treba da se pročita, pa treba da se pročita ovo i pokazivaš ptf. E sad kada kažemo t2 je jednako t1 plus 2. Koja je ide operacija? Ide operacija plus. I onda kažem šta su operandi t1 i 2. Ja ovde sad u mestu prvog operanda da pisam ovde t1, ja kažem ok, tu koristim rezultat ove prve trojke, toh zna ove trojke se indeksom nula i vidite da je tu bilo zapravo to t1, a drugi operandi na primer broj dva. I onda sebi na primer sa strane, ja sam ovde za potrebe vas da bi smo pracili koje tek zatka, pisan sa strane da je to u stvari to nekako t2. To inac se gubi skrotu, tako više nepantim, opšta, da pokoje te nekako pri vrame nepromeđite. E sad vidite kako se zelajte prve dve. Jedina iz uzeta kod ovih trojki u odnosno četvorka je ste što ćemo sad ovo indeksiranje niza morati uvek da razbijemo na dve trojke. Dakle, videli ste da ovde sad na primer ovde što se nalazi na Dress i 3 o tako, toh zna, indeks u 3, dakle, ovo A o D je jednako T2, to smo kod oni četvorki prestadili jednom četvorkom. Eko trojke ćemo to morati da razbijemo sad na još sitnije detalje, a ti detalji se odnosno na A o D i, ako se pristviti, ma šta znači A o D? Znači da treba da smestite nešto na I, T, indeks, niza A. E, a kako se to zapravo radi, tako što dol tako prvo izvrkvnate adresu gdje se ta element nalazi. Kako se raču na ovo adresa, pa možda se sečemo tamu, kde prije da smo pričali da ovo A o D, naprim. na jeziku C, možda se napisati kao zvezda pa u zagrdi A plus I. Dakle, vidi, u stvari određujete koja adresa tog elementom memori i onda na nju nešto upisuje. E, tako ćemo to i uraditi ovde, ako uradite sledeći. Prvo, navodim jednu trojiku i, reći ću, isti, istaj operacija, dakle, indeksiranje jednako i navodim, tako, niz i indeks, to je A o D. I tu, tako, u toj trojici ostaje adresa gdje je potrebno da se smesti taj podat. A nakon toga, uvodimo jednu trojiku, dakle, one obavizno idu u paru, ide jedna trojka koja kaže, a sign, sada na adresu ove dvojke, a dvojka je u stvari, o tako, adresa gdje treba smestiti to nekako u vrednost, treba da upišem P2. P2 je zapančeno tako u, o tako, ovoj prvoj trojici, ovdje, toh zna, ako trojici sa indeksom 1. I onda u stvari to izgleda, ovako. Dakle, kažem, a sign, do deli, čemu? Pa ovo me adresi A o D, dakle, upiši u memorisku lokaciju ovoj elementa A o D, vrednost koja je određena tako trojkom na indeksu 1, a trojkom na indeksu, trojka na indeksu 1 u stvari to nekako P2. Dakle, to je, to, možda, malo sad, komplikovanje, možda vas od ovo zbunjoje, ali, eto, ajde, prođemo još odo kraja, pa ću možda biti jasni. Šta ne kaže sljedeća trojka? Kaže, T3 je jednako I-1, dakle, opet, kažem, zaboranje, onda postoji T3 i samo kažem da je to minus I-1, dakle, I treba da se oduzme 1 i ja, kažem, opet, zapotrebio vas da pracite, pan, tim da se tu nalazi T3, ali, vidite, četere kasnije, samo kada mi bude trebalo T3, ja ću koristiti ovo je indeks od T3, dakle, da je to, ta vrednost koji koristim je o tako ostala, kao rezultat ove četvorto. I stada kada je koristim, kažem, ovdje, T4 je jednako A od T3. Znači, šta se pa treba da se desi? Opet, isto kao i malopre, razbijam ovo na dva dela, jedan del je računanje adrese tog elementa niza, doez, ovo A od T3 i to ću raditi opet istom operacijom kao malopre, kažem koji je to nisto, je niz A, a koji indeks mi treba, je treba mi indeks T3. Vite, sada kada mi treba T3, ja sam ovdje napišamo tako da mi treba četvarta trojka po indeks. I tu stavljako nalazi sada adresa toga A od T3, a da bih to pročito, opet koristimo tako ono assign i onda kažemo, sad vidite, pošto smjestam nešto u privrvenu promeljivu, ja ću onda reći, ok, neka taj rezultat ostane ovdje u ovih šestic, kao rezultat u tako ovdje, T4 kao šestat trojka, njen rezultat je taj u svariji to 4, a šta treba da pročitaš, treba da pročitaš, tako ovu petit odate, to je A od T3. Znači u ovih petoj trojci mi smo dohvatali adres u tog elementa niza, a u šestoj trojci dohvatamo tako vrednost u tog elementa niza i ostavljamo tu vrednost kao rezultat u tako ovdje naše šeste trojka. I na kraju onda u tako ovdje, za kraju ove, u tako naredbe, kažete zvezda P1 koj t4, kažem zvezda assign, u P treba da upišeš, a šta je T4 koja u svariji ova šestica tako ovdje? Poslednje dve trojke su u svariji dosta jednostavno, je o tako plus, u tako i i seberete sa 1, to će biti u svariji to T5, i sada u i treba da upišete to T5, kažete assign, u i treba da upišem, a šta treba da upišem pa to T5, a to T5 u svariji ovo stavlo kao rezultat pove trojke se indektuvanite. Ostat, u tako veren da je o tako malo zbunjović, neba ćete da pogleda tamo na materiale, imate još neki primer tamo, imate i kod profesora na predavanjima primere ovoga, pa samo pogledajte to, kažem profesor zna nekada, na primer da je ovako na ispitu uvidu jednog zadatka. Ja ću sad nastaviti dalje, mi je ovdje zadate ko dosta od takog u tih reprezentacija različitih, kaže formirati sintakstno sablo za dati iska, za zatim generisati troj adresni među kot. Zato prvo što stiče sintakstno sablo to je ono isto koje smo videli malo pri, a ono što mi je sad zanima, jeste kako se sad ove izvršava, to je skako će sad izgledati ove troj adresni među kot za ove izvraz koji vidim u ovaj stiče. Tako opet koristimo one pomoćne promenjive, da vidimo samo da korizacer 3, čisto samo da još jednom povežete ovo sintakstno sablo, ovamo i ove troj adresni među kod i te različite reprezentacije. Šta su ove deshava? Dakle troj adresni među kot će izgledati ovako. Prvo što je potrebno duravite, jeste da u neku priviromiru promenju u t1 smestite a podeljenost sa 2, tako ti me ću izvršiti ovo je ovdje, da je to tako delo pod sablo ovom mokim tati mokim stadovom. Zatim sljedeće što moram da radim, jeste u t2 smestam minus b, da bih onda mohalo da u t3 smestim 3 puta, pa to minus b se sad naozil tako ovom je t2. Nakon toga uvodimo nekako t4, a to je zbir sad al tako ovoga a podeljenost sa 2, što je t1 i ovoga 3 puta minus b što je u stvari ovo t3 i to smestam u t4 i na kraju, kao poslednji otakom instrukciju, tog nasom nekako u među koda, ćemo napisati tako da je f i jednako tom nekako u t4. Dakle potrebno je njih 5 da bih smo u stvari ove izraz gore izvršili. Koji primjer je ove zadatak 3? Njega sam navjela sam još jedan otak, da bih smo se pocetili toga, prenego što ja sad, krenem dovadim nekakve zadatke koji će sad da biti primjer i zadataka, kakve možete očekivati konkretno naprimeri od nas, što si ti čistitno delo. Eka, to je naprimer zadatak 4. Kažem ovako, ovdje ćemo sad da spojimo dosto svega što sam ja ovog ispriču i sad bih treba da to malo postavno jasnije, kaže zadati progranski fragment, napisati odgovariti među kod i prikazati graf toka kontrole na nivou osnovnih blokola. Ja sad ćemo dovediti ovdje ovom zadatku i te nekakve osnovne blokole i vidjet ću da ovde sad ima dostan nekakvi zanimljivi stvari za istritati. Alajmo, prvo prenego što krenemo da pričemo taj del, koji su odnosnije na drugi del zadatka, da vidimo kako se generiše među kodu tako da ovo što je prikazano ovdje. Dakle, taj među kod idete redan. I je jednako nula, i od će je jednako jedan. E sad, kao trećan instrukcije ovo našem među kodu treba da se pojavi šta. Kažem ovdje imamo vajl petlu koja se vrti sve dok je i manji ili jednako od jod. To znači da će ja pisati ovako nešto. Sad, kako ćete vidi, koliko konkretno zapisati nije nivazno, važno samo da mi razumemo šta ste chteli. A ja sad kažem, proverevan kontra uspo, kažem ako je i već je od jod, onda treba da se radi, pa sad ja sam napr. iskoristi ovog ovo go to i kažem, nekde se sad skače. Dakle, nekde treba da skočim, to je treba da izveđem iz ovaj vajl petlje, treba da je preskočim s prosim. Dje se sate za sad ne znam, videte će teki kad završim te ovoj svej među kodu. Da ovo se spajamo, vidjetimo ovako nekako se spari dodvoljamo. Napr. ovde sada kada generišite ovoj među kod, ok, da nam napišete da je ovde t1 jednako i puta jod, a onda kažete jod je jednako t1. Samo da ne imamo sad ovo tako milijon nekotih pristupa, ne mora i dva. Ovde ovo tako tolerišemo da budu ok, kad radite ovakze zada. I onda kažete jod je jednako t1, zatim kažem t2 je jednako i plus 1, a i je jednako t2. Došli smo do kraja ovoj vajl petlje ovde i onda kažete go to, vraćete se nazad na ovu trojku gore, to je se napravio od takoho guslava koji smo imali gore. A onda...
 kao dole naredba ispoc se nalazi al tako ovo joć je jednako i. Zna mogu da kompletiram ove svoje među kod ugovor, al tako koji sam pisa. Ovo je ovde upitnik je sad znam da razvršim, jer ukoliko ne treba da se izvršava telo ovaj wild petlje, to značaj treba da preskočimo sve ovo ovo ovo i da skočimo na ovo joć je jednako i, a to je usvario našem 9-ka ovde, tako da to u svariji treba da piše go to, go to da. Ideja oziratka ovde njih bila da ginerišimo taj al tako naš neka među kod, nego da vidimo sad kako ćemo ovo ovde da isekamo na negac ve basicne blokove ili ti osnovne blokove kako gođelite da izolete ili imaš sva su svariti osnovni blokove. Pa ćemo postav u esti još nekako s s formu za te blokove i sad i ćete svašte što što tu kompaldari upozad nirate. Prvo što nam je važno ovde sad vidimo šta je taj neka ka basicni blokove. Ljudi koji su možda evno tolno već slušali, paravlana, računerski sistem je to sigurno znaju, ko tek planira da sluša taj predmeci je o tome slušati dostal tako, a ja ću ovde sad samo ukratko pričao ko toga. Dakle, jedan basicni blok, kada kaže, mislim na skup nekakvih instrukcija ovde u konkretno ovom medju kodu ćemo mi to raditi koje se izvašavaju sekvencijevo, dakle, koje se obnovizno izvašavaju jedno za drugom, da je i da nije moguće da vi iz to basicnog bloka negde sa sredine to bloka iskočite ili da o uskočite da izvašavate neku instrukciju unutar tog basicnu blokove. To će on najastnije biti, ako kremo da imamo sad šta su ovde basicni blokove i ovom zadatu. Kako vi dolazite rednom, sad je i izvašavate, ja ću stvrtati to kao graf nekakak, kažete, i je jednako nula, i ot je jednako jedna. Estat, ovo je jedan basicnog blok i ova instrukcija koja se nalazila tako na indexu 3 ovde ne pripada o tom basicnog bloku zbog čego, zato što ovde dole neko kaže go to three. Go to three znači da se skače na to treću instrukciju, a jasno rekova da za basicni blok treba da važi da sve instrukcije koje se nalaze unutar tog basicnog bloka te obaviozno nalaze tako jedna za drugom, obaviozno se sve izvašavaju jedna nakon drugje i nije moguće otako izkočiti iz basicni bloka i sredine, tek na kraju mošte da skočite negde, i nije moguće otako uskočiti u basicni blok, ko tako sve na njegu vkoček. Tako da, ako pogledite, kada izvašava to ovo i je jednako nula. Obaviozno si se nakon čogaj izvašati, ovo joć je jednako jedan. Dakle, nije moguće da vi, nakon ovo je jednako nula, preskočite ovo joć je jednako jedan, tako da se sigurno izvašava nakon ovog. A isto tako nije moguće da nekde sa strane samo uskoči na ovo joć je jednako jedan. Tako da, krema, joć je jednako jedan, sa obaviozno izvašava samo nakon ove i je jednako nula i zbog toga te dve instrukcije predstavljuju jedan basicni bloka. Da, sad dolazite doove treće vaše instrukcije, a to je ovo ako je i već od joć i onda radite go to death. Dalise instrukcija je četri obaviozno izvašava nakon instrukcije 3. Ne, zato što ako ovo je uslov izpunjen, ja ću skočiti na 9, tako da ova trojka odde sama za sebe predstavlja jedan basicni blok. E sad, ako pogledajte dalje ovamo, instrukcije 4, 5, 6, 7 i 8 obaviozno si izvašava i sve jedno za drukem. Dakle, ovo celo ovo vajl petle nema nikakve skokove, nikako ne možeš da se iskoči i niti možeš da se uskoči u deo te vajl petle. Tako da to se tu za sebe predstavlja jedan basicni blok, Dalise instrukcija na 3.9, vite da se basicni blok završava instrukcija na 3.8, Dalise instrukcija na 3.9 izvašava nakon instrukcije 8. Ne, upravo zbog toga ono nini pripadat ovom basicnom bloku ovde, nego će ona pripadat ili tako nekom odgojenom tamo basicnom bloku i ona će sama za sebe predstavlja jedan basicni blok. Ode poštijemo ovo golu 2, 3, prtamo naravno i jednu povratnu granu kanala. I ovaj u svaru je kako izlava sad taj graf toka kontrole na nivou oznanih blokov. Kako pogledate sada ovaj ode graf koji sam ja istrtao, za svaki od blokova, za sve instrukcije u njemu važi da je skok moguć samo na kraju, nikde ne smet da postoji skoku sredini i važi da nikako ne može da se uskoči. Otači sve ove grane, kada vidite ovada od ovog basicnom bloka ovde, gde je instrukcija 3, kada učamo granu da se, nakon njega mogući ići u basicnom bloku kočinje instrukcijom 4, vidite ovde ovde ovdje ovako učamo na desnu stranu, ovdje ovdje ovdje ovdje ovdje ovdje ovdje ovdje ove prestede samo jedan basicni blokov. Nakon ove trojke, ne postoji instrukcija, tako koja se obaviozno izvršava poslenje, tako da ovde ovo ove presta se samo jedan basicni blokov. Tako ćete najlakši otvrđivati gde su na ti basicni blokov i kako vam je najlakši kada rajete taj ispit. Samog pogledat u svom ovoj, tako kada napišete ove među kod za taj nekakav program, pogledate gde imate sve ove go to instrukcije, ili kako go da ste ih tamo nazvali, ali je ove preporučno mode, i vidite koje su to adrese, vidimo ovde go to 3 i vidimo go to 9. To znači da se obaviozno, te instrukcije na adresi 3 i na desi 9 moraju biti počeci nekadmi basicni blokov. Ovde kada rajete go to 3, vi ne možete rekli smo da je pravilo važi da ne mogu da uskočim u sred basicni bloka, nego ova trojka morat da bude početa k tog basicni bloka. To je prvo pravilo, a druga pravilo on važi, i u instrukciji 3, tu se automatski basicni blok zavaršava, tako da vidite da ovde kraj basicni blok, vidite ovde na 8, imamo go to, nebitno gde se skače, tu je kraj basicni blok, zato što se tako nekadnim skokom prebacujemo nekdo drugi. To je bio jedan primer, ajmo sad još jedan primer dodradimo, pa ćemo tako biti vratno malo i jasnije, alo sa nekako novom programom ovde prikazujemo, i za njega sada treba da crtamo tako istije, zelata kako zelata kreter, i samo drugi programski kod, tako najoš jednom primeru što što radi. Tako izlama jedžu kod, a je jednako jedan, zatim radi sa nekako i do wild petli, znači ne nemnikakam skoku startu do wild petli kreće se izvršava odmah, i kažemo, t1 je jednako a plus 1, b je jednako t1. Dovozimo do ifa i kaže, ako je a1 ko 7, radimo break. Ja ću onda ovde ispitati baš to, dakle, dali a1 ko 7, i ako jeste, radim go to, ovo break treba da isko čiste, do wild petli, dakle, skačimo ovde dole a1 ko b puta 2. Nastavljamo dalje, kažemo, ovde t2 je jednako b plus 1, a1 ko t2, dakle, to je ova naredba ovde, i stigli smo do kraja, o tako je do wild petli, pošto uslo petli je true, da ja onda kažem da se ovde automatki vraćamo tako u gore, to je sradim go to na 2, dakle, vraćemo se na ovu b, a plus 1, a to se nalazi na instrukcii 2. Odmah znam, gde će se vratim, pošto se vraćemo nas. Nakon ovog, imamo da je t3, jednako b puta 2, i a je jednako t3, to je ova naredba ovdje, koja se nalazi ovdje. Ako smo se isprtali, gledamo onda ovdje ovdje ovdje, go to treba da skoči, on je trebalo da skoči nakon ove naše do wild petli, gde je kraj t2 do wild petli, pa to je ovo go to 2, ovdje t3, jednako b puta 2, to je već ovaj del, nakon petli, tako da treba da skočimo na adresu u stvari os, dakle ovdje go to os. I kako sad natratati, ovo sve ovde, evo da isprit ćemo oprvo na osnovu medju koda, kako biste se vi sad gledali, gde će ovdje šta da bude bazični blok. Dakle, imamo instrukcije go to osm i instrukcije go to dva. Dakle da automatki smo sigurni da od instrukcije dva kreće jedan bazični blok i od instrukcije osm kreće jedan bazični blok. Na instrukcije 4 se uslovno skacen negde, što znači da ne mora da znači da će obojezanu, akon instrukcije 4 biti izvršana instrukcija 5, da 3 se završava bazični blok. Ako smo to sve ispričali, kažemo onda redom. A jednako 1 je bazični blok za sebe, zbog čega, zato što dvojka ne smenjoj da pripada, jer smo rekli da imamo go to dva i da ovo ovde s sedamo tako moramo da skoćemo na početak bazičnog bloka, to je na instrukciju dva. Zatim, sva smo rekli, 2, 3, 4 mogu slobno da budu tako jedan bazični blok, četvorka, pošto se obavjedno nakon njen ne izvršava, ovdje odlazimo na 8, tu je kraj bazičnog bloka i tu se granamo na 2 moguće od tako strane. Jedna strana je da idemo 5, 6, 7, došli smo do ovoga go to, ustaemo, a druga grana bi bila da skačemo na adresu 8 i da izvršavam ovo 8 i 9. Ovdje, tako pošto na kraju imamo go to 2, sva mogućemo još jednu povratnu granu i vidite, je dobito zapravo sličan graf, kako izgledao i ona imala. E sad, čemu ovo je graf toga kontrole, ovdje se da se moguće ovo podula nove osnovne blokove, ako nista sušali te paralelne sistema, mi ćemo sad to prikazati u zadatku 6 i 7, o tako koja je upotreba toga i šta sad za tim još može da se rajte. Ajmo da imamo kakvog zlada za datak 6. Za datak 6 opet je dad neki fragment kodda i ovdje se traži od nas ponovot da napišemo odgovarići medju kod u nekoj SSA formi, to će biti static single assignment u takojoj skračenica o SSA i opet je traži graf tog ka kontrole na osnovnih blokove, tako isto što je malo prej samo što ćemo od dodati tu nekako ssf formu a vaj o tom nećemo poskrat. Ajmo da imamo kako izgleda ovoj graf naš. Ja su krenuti odmah da ga crtam dakle neću prvom kutrati medju kod pa onda crtati graf, nego ćemo odmah svako jednom da gledamo i kako izgleda medju kod i kako se sad to se crtram. Krenat je redan, kažete i je jednako 1, i ot je jednako 1, kaj je jednako 0. Ovdje nam, ajmo, možemo da razmišimo, kaj je vajl pet, da je što znači da tu ćemo nekako da se vrtimo i skakaćemo ponovno u ovoj uslovo ovde, da li je k manje od pet, tako da to tu će biti za sebel tako nekak novih bazični blok. Ove 3 narebe tako gore se obavizno izvešavaju zatim dolazimo do ovoga. Kažem, ovdje što će da izgledašim kao instrukciju medju koda, dakle petlja se vrti svedu ki je k manje od pet. Ja onda kažem, ako je k već ili jednako od pet i zađi iz petlje pali tako treba da skočim nekada. Staviću upitnik i namer na ostavljanj praznom prostvu ćemo poslati nešto dodati u ovom zadakom. Kažemo, skačemo, pa osvećemo poslati ćemo da zakrpimo gdje. E sato. Ajmo vama na stranu, ako ulazimo u telu, ovaj petlje na adresi pet, dolazimo do čego? Dolazimo do ifa ovogo ovde i sajta se izvršava ako je jot manje od 2. Ja onda kažem, ako jot već ili jednako od 2 treba da skočiš na else granje. I opet ovde stavljam upitnik, pa ću viditi da će biti ta else gran na našem. Tako da i ovde za sebe predstavlja jedan basicni blog
 da se otakvo završava go to. Čim imamo go to u kraju bloka imaoćemo nekakve dve različite smera i to ćemo i crstiti otakvo ovdje u graf. Jedna gra na ovoga ovdje je se da uđemo otakvo u ta if da je uspovi ispunjen i u tom slučaju izvršavam ovo jot je jednako i, t1 je jednako k plus 1 k je jednako t1 i na kraju ovo gif a ovdje to smo pokazali na prošljom času kad smo radili ono generisani koda treba da preskočimo celu otakvo ovo l z granu, to je cel kod koji se nalazi u razgraniji izbog toga stoje ovaj go to. Na terada nakon ov gif prekočemo svešce kod je nalazi u l, poslite ćemo da imamo gde to treba da skočimo. A druga varijanta ovdje kod ove petice jeste da u slučaju nije bio ispunjeni da smo odmah skočili na l z granu i to bi izgenerisalo ovako, dakle i oče jednako k, t2, jednako k plus 2 i k je jednako otakvo t2. Is i else se stapaju dole u kraju ove naše wild petle, to je spajaju se u jedan ovdje tako blok, dolazimo sa dve različite strane ove bloku ovdje i na kraju otakvo tog gif l se ovdje došli smo i do kraju wild petle što znači treba da se vratimo na početak ove naše wild petle. U ovstvenu slučaju ne znamo da li će se ovdje nalaziti neki kod, bo ktoga ovo trtamo kao poseban bazični blok. I ovo ovdje treba da se vrati na četvorku to je smo na ovaj naš, tako wild gore. Dalje što nam je još ostalo, ovo return jot to tu se nalazi u koliku uslo petle njih ispunjene, što znači da bude to je ovdje koji smo ispunjene tako projeravali. Degli smo ako je k, već ili jednog koju je pet, znači petle ne treba da se izvaši i onda skačimo na bazični blok ovoj dole poslednji a to je ovo return jot. E da pokrpimo sada ove sve upitnike koje nismo znališ stak, gde treba da stoji, pa smo onda ovdje recli sada ako treba da se izkoči odmah iz ove naše petlje, onda je skačimo na instrukciju 14, da to je ovaj return jot, dakle preeskočen celu vaj z petru. Kod ovoj gifa unutar zako vajla, rekli smo ako jot manje od 2 treba da se izvaši telo, ovoj gifa usuprtnom skačimo na else. Ja sam onda reko suprtan uslo, ako jot već ili jedna koji z 2, koji odmah na else, else je nalazi na 10, tako da smo da stavili 10. I ovdje smo imali 1 go tog, gde smo rekli kada se završi ova den gran na naše gifa, treba da preeskočimo celo else i da idemo nge dole ispot, else se završava na zvanis, tako da slet će instrukcija na 13 i onda ovdje imamo tako go tog 13. E sada, ako te smo ovo natratali, ako pogledajte sada zbog čego su ovi bazični blokove ovako, vama neakša da ih prvo ispišate sve ovi instrukcije, pa onda trdatite tako te bazični blokove, ali ako odradite par zadace, ka već će vam to ući u ruku, tako da vas nećemo riterati, da pisate, muneći to, znao da nacetati ovaj graf. Dalis u dobro nacetani bazični blokove, bakle pogledajte, za svaki mora da važi, ako imamo go tog 13, to tu mora da uče srelicu ka bazičnom bloku koji kreći sa brojem 13. Ako imate, na primvom, ovdje go tog 4, srelica ide ka bazičnom bloku koji počinje 4. Go tog 14, srelica ide ka bazičnom bloku koji počinje 14. Go tog 10, ide kao tako bazičnom bloku koji počinje 10. Ovo je ovdje bazični blok, nakon dvanajcice se obavizno izvršava instrukcija koja je na adresi 13. Međutim, zbog čega 13 nije u nutar ovog bazičnom bloku ovdje. Zato što ovde sa 9, ke imamo go tog 13. I rekli smo, ne može da se uskočio u tako u nutar tog bazičnom bloku ovamo, nego to onda moramo da izvojimo u jedan poseban bazični bloku. Što sad počimo s ovom, sada s formom, da kažem, ljudi koji su tušali, ali ajde sada uvedamo sledaći. Ovdje nam je sada, vidat ćemo već i na sledaćem času, zbog čega na primer ovako jedan mekanizm može da bude važan, ali biće na važno sledaći. Dalje je neke naredbe unutar jedno bazičnom bloka moguće izvršavati nekim drugim redosledom, nego ovim redosledom koji je koristnik na primer zada? I sad ako pogledate, na primer ovaj ovdje ovede bazični blok, način neću gledati među kod, možemo gledati čak i pravi ovaj kod ovaj. Unutar ovo gifa ovdje, dali je vama sada važno, dali će se prvo izvršiti j1 i j1 ili će se prvo izvršiti k1 k plus 1? Ove dve naredbe nemoj nikakvu zavisnost među sledaći. Dakle, slobodno mošli prvo da izvršite k1 k plus 1, pa onda j1 i j1 koji. Dakle, nema te nekakve čuvene zavisnosti po kodacima, tako da kažem, slobodno mogu da zamenej mnjihov redosledom. Zdašto mi je važno zamenej mnjihov redosled, ja ću pokazati jedan primjer, zašto će nam to biti važno, ali postoji dosta nekakvih različipih optimizacija, načina da nešto brzate, ukoliko, na primjer, zamenite redosled izdašavanje nekakvih istrukcija. Dokretno, je ovdje odmah da najelim, ako rajte, j1 i j1 koji, i k1 k plus 1. Jedan, na primjero od razloga, zašto vam je zgodnije da odaljete prvo, ovo k1 k plus 1 može biti to, na primjero, ovo k već imate nekdo u registru, a na primjero, ovo j1 i koje su potrebni ovde gore, su u memori i jedno i drugo. I sad, nogo je brže, da ono da ovo što imate u procesorskom registru, na primjero, saberete prvo, sačuvate gledam treba, nego, na primer, da, sad, ukoliko hoćete izvršiti, ovo j1 i j1 koji, pa sad treba da dovučete ovo i, onda bih se na primjero morali da izbacite ovog k, iz tog registra, pa posle ponovu da ga doblačiti i sljedećete. To će praviti na sajčem času, je to čisto samo da, značim, jedna od nogo brunih prime na toga da se menja redosled izdašavanje tih instrukcija, jeste i, na primer, i alokacija tih nekakvih registara i generisan iltako samo kodna na kraju. Šta hoćemo s ovom ssa formu mozi? Da bih smo mogućili da se, što više tih nekakvih instrukcija unutar jednot bazičnog bloka, može seliti iltako gore dole, to je znači da im se može menjati redosled, mi ćemo urajiti sljedećem. Prvo da imamo gde je problem, dakle, ove reko sam j1 koji i k1 koj k plus 1 slobno mogu zameniti mesna, neđutim, da li ovde dole mogu da zamenem esna? Dole nam piše šta, j1 koj k, a zatim k1 koj k plus 2. E ovde ne smem da menjam zašto, ako izvršite ovdak o prvo o k1 koj k plus 2, onda ovo j1 neće dobiti istu rednos koji bi dobilo ako to k1 koj k plus 2 izvršite nakon. Dakle, pošto ovde sada ili imate dogranicenje da ovo sad mora da s izvršao im redosledom kako je navedeno, onda možete da se snažite tako što urajite sljedeću stvar. Kakvu promeljivu označite nekakvim indexom, dakle sve promeljivate, će dobijeti nekakvim indexom. Izbog togo ovdje imaju ovo prazno, tako prostore da bi ja sad njima tako dodelimo indexe, pa što jovi pri vreme ne promeljivimo i nekakvim indexom, tako ću sad i ovim koristimkim promeljivim, tako dodelivati t-index. I šta je ideja? Ideja je da svakoli promeljivo i mogu samo jednom, koliko mi zvašavanja programa da dodelim rednos. Kako će mi to pomoći? Epa, a je sad da odmah dodelim t-indexe. Ako ja se do to prikazam, kako su ti indexi dodelili, pa ćemo objasniti sad sve to, ali šta mi je samo važno? Prvjenog što budemo objasniti u kako sam ovako što ovo i index je dobio, ajde sad da pogledamo ovdje. Dakle, ja sad da kažem ovdje, jot 4 je jednako K2. Zatim kažemo T2 je jednako K2 plus 2, i jem do kažemo K4 je jednako T2. Ako podlejajete ovo ovde sada, ovo K2 je ovo K4 mi vodimo kao 2, to tomo nezavisne promeljive, dakle to sad više nije ista promeljive. K2 i K4 su kada su nekakve dve odvojene promeljive. Šta dobijam time? Time sam dobilio da sada s njemem dobrodim šta. Ja ovo instrukciju 11 i instrukciju 12. Svem frebodno da izbacim iznada ove instrukcije 10. Zašto? Zato što će i od 4 koristiti K2, a ja ovde dole postavno je vrednost do ovo K4. Dakle, K2 jednom je dobilo vrednost i nikada više ta vrednost nesme da bude promeljena. Slejesi put, kada ja želim do dodeli našto to i promeljivo da ja dodeljam zapravo novi index pravi, novu promeljivu koju sada zove nkakve. I ako pogledajte, kažem ime dobiljom da mnogo više kodal, tako s njem da reorganizujem. To je da pomeram gore dole i da sam im tim sebi olakšavam nekate neke stvari, to jest nekaj na primjer optimizacije koji bih eventulno radila. Ako smo razumeli zašto, na primjeru ovdje sada olakšava stvar, hajcada vidimo kako u ovopšte te indexe sada nima dodeljamo. Krenete redom gore i sada jih u startu su i 1, jot, 1, k, 1. Znao sada važno. Najrločne mi je to da vam na primjeru objestnima ovdje dole, pa ćemo se vratiti na primjer gore. Pogledajte ovo je bazični blok ovde gde imamo jot, 3 i k, 3. A onda imate ovo je bazični blok ovamo, dakle to su if i else, te dve odvojene grane koje su alternativa jedna druge, dakle ili si zvašava jedna ili si zvašava druka. Ja ovo jedno imam jot, 3 i k, 3. Ovam u elseu ako sam ponovod dodeljivo vrednosti dodajem novi index. Dakle njegde ne smo u ovom vašem grafu da se pojavi jot 3 sa leve strane, tako dodeli zva put. Sme samo jedno. Tako da ako mi treba ponov u else grane i dodeljujem nešto promeljivo jot, ja to zovem jot 4. Isto važi za k, k4. Tudno moraju da budu različiti index. Gledajte šta se sada dešava tu. Na kraju kada se stopate iz tog if i else dela u jedan bazični blok, kao što se ovde dešava, da mislite sada da nakon ovog if i elsea ovde pise, zna, primver bilo šta nešto radite sa promeljivom ka, na primjer. Dalibis moh da koristili promeljivu k3 ili promeljivu k4. Tu je sada u tako nas u sada taj novi problem što smo mi to razvojili po tim nekakvim indexima i onda sad to kako se sada to obezbeđe, to ćuće raditi na paralelne večunarski sistemima, mi ćemo da samo koristiti tu nekako u finotaciju gde ćemo reći, ok, ova promeljiva ka, njena vrednost može doći ili z ovog if dela, to jest ove den grane ifa ili iz else grane ifa i može biti ili ovog ka3 ili ovog ka4. Mi ga onda nazovimo novim indexom nekim k5 i kažemo ovako nekako na notacijom, kažemo to je phi od k3, k4. Dakle, uzaviste se u togo, ako ja sam došao, prajim nekako novu promeljivu k5. A onda pogledajte sada ovde gore, sad se desala sa ovim gore bazičnim blokom, u ovom gore bazičnim blokom koji ima samo ovu instrukciju u 4, mogu doći iz ovog gorenjek bazičnom blokom gde su vrednosti j1 i k1, a isto tako mogu doći iz ovog bazičnom blokom gde sam odredio vrednosti j5 i k5. E sad, košto ne znamo, dakle sam došao, opet ovde otakli ja sad da prajim vidite svoje j2 i k2 i kažem da su oni u stvari phi od j1 i j5.
 Ili ovo davde jot, ili ovo davde jot dole uz avisnoj sve toga od ate sam došao. Ako prođete taj bazični blok, da je li to ste dodelili j2 i k2 na početku bloka, i zatim u tom bazičnom bloku ja koristim to k2. Bilo od ate sam došao, da je li da sam došao sa k1 variantom ili k5 variantom, ja koristim o k2, isto važi za jot. I sad gdjegoda skačete dalje iz ovog bazičnom bloka, na primjera ako iskočite iz viral petlje, vidite koristite u stvari to j2 koje gore postavite. Ako uskočite u viral petlje u ovom ifu koristim jot 2. E sad, kada uskočite ili tako u ovaj Denny li Els, vidite da se i dalje ovde koristi k2, i ovde se koristi k2, i ovde se koristi k2, ali šta se dešava kada želite da postavite vrednost, je onda menjate indexetak. Jot 3 i k3, ovde su jot 4 i k4. Po im redu sledom 4 dodelivate te brojeve. Dali će ove biti jedinice, ove dvojke, trojke, četvorki, to je potpunno nebitno. Tako, ovo je samo jedan predlog, kako smo mi u radilu zadatku, vidite brojeve, možete potpunno proizvomno izabrati, ne mora to biti ovako kako je prikazano kod mene, ne znamo, obšta nije dalje u rešenju na sajitu prikazano ovako, tako je važno, je samo da jednom indexu jedne promenljile, samo jednom da deluje te vrednost. Ok, i tako, ovak zadateki ispidovozi, obzir do ovak našto dodelite na ispitu, dok dobiete jedan fragment koda, treba da istrta, da te vratel, tako, ovo je cel, tako, graf, i da te vratel ispišete, to je si funkcija, tako, kažem, ko bude slušao paralelne računovski sistema, tamo ćete imati polo tog kursu, će se zapravo babiti ovako nekakajn stvarima, koji su dosta zanimljive, mi oddajel, tako samo prikazujemo, kako to sad izgleda, i naprim. kako je sad ovde moguće, ovo što sam malo prepričao, tako da u koliko odrede tova indexiranja o ih promenljivih, vidite da ovo sad u tako mnogo više seksibilno, ove zna možete u tako mijenjati redosad izdačavanja tih nekakvih instrukcija. Zakraj, čas sad rajicimo još jedan zadatak u saovin, zadatak groj 7, koji ću se bi imati nekakvu for petlu, da vidimo još jednom kako to izgleda, pa ćemo tako, tamo, neto su klopiti nadam se u ovih 60 minuta, nakaj, ovoj zadatak je malo ljednostavni, pa da vidimo sad redom. Dakle, šta se dješava? a1 konula, b1 konula, x je 1 konula, i sad ako pogledate for petlu, ona je sad malo karakteristično zaštun. Imamo tri ova dela nekakva, ovi prvi dela for petle, ovo ovde a1 ko x i b1 ko y, to tu se izvršava na početku naše petle. Ovdje u sredlini narodno je uslov, koji se izvršava u svako iteraciji, petle a ovo a plus plus i b plus plus je stvari koje se rade na kraju iteracije neke naše petle. I imamo telo ovdje. Šta je važno? a1 konula, b1 konula, x1 konula, 2. I ovo ovde a1 ko x, b1 ko y, izvršavaju jednom i to obavezno jedni za drugim. Tako da budemo crtazi grafiti, ovo sve je jedan bazični blok. Dakle, vi se nikada uunutar for petle više ne vraca te na ovoj prvi dela for petle. To kada se jednom izvršava, to se više ne izvršava. Ono što se izvršava, jesta ovo je uslov, i ovve ovde što kut samo tako što se izvršavati nakon svakim iteraciji. Ali ovde a1 ko x i b1 ko y, to je ona inicijelizacijun idea, for petle, ono se izvršava samo jednom, da njega nije moguće skočiti ponovot, tako da on pripada u svaru ovoj bazičnom bloku oga svega gore. Da tim sledil, dakle, on je naš u slav, proveravam o kontro u slav, da li a je već ili jednog od b, i ako je to ispunjeno treba da iskočimo iz ove for petle, pa sad vidjet ćemo gde treba skočimo stoji u petnik. Ako to nije ispunjeno, izvršavamo telo petle. Telo petle će biti sta. Ovo a plus b smo sabrali u i t1 i to smestili u x. Ali isto tako i ovo a plus plus, i ovo b plus plus, to pripada telu tako te petle naše, to je jedno iteracije, zato što se to tu a plus plus i b plus plus obavizno izvršavaju nakon svak je iteracije, to je nakon izvršavanja telo ove petle obavizno se izvrši i to tu, kao što smo li prikazali oze, i pe konda se skače ponovot na prover ovog u slova ovde, koji se naozi sada na adresiji u tako 6. I vidite, ako je to zaprojizledo ovako. Ako u slav nije ispunjen, dakle, izkačemo iz p petli i radimo ovo y plus plus, to je ovako sada na adresiji ovdje 14. Dakle, nam je rastno sada izabroje ove zelata ovde sa por petljem, da prikažemo i njega da bi ste svatili da ovo je prvi deo for petlje, inicijelizacijeni deo for petlje pripada zapravo bazičnu bloku ovoga što se naozi pre petlje, a da se ove treći deo for petlje koji ovako služi za to dobevite nekakva akciju nakon iteracije petlje, da on zapravo pripada ovoj bazičnu bloku tamo ktela petle. Dakle, vidite, se on naozi sada ovdje. I ako zakrpimo tako ovaj kod ovde dobe treba naro na dopiša 14. Da bi su ispunjena sva pravilo koja smo rekli, go to 6 skačena blok koji počini al tako instrukcije u 6, go to 14 skačena blok koji počini instrukcijem u 18. Dakle, sve nam je ispunjeno nikde ne uskačemo u sredne kakva bazičnu bloka, a ovde gde smo imali go to, tu smo odmah i prekimnozili tako tekući bazični blok. I ovdje vam je sada dosta jednostavno, da kada ovde opet treba da podelimo tako nekako na njihove indexe, što ovde treba da vam se desi, dok le imate a1 i b1, to su ove vrednosti koje ste dobili ovde kada ste i postelili na 0. Zatim ovom inicijalizacijanom delu for petlje, poštu ponovopostelite vrednosti toga a, menjete im indexe. Dakle, rekli smo nikada ne smete jednoj promeljivoj sa jednim, toh z toh z tistim indexom dodelite vrednost. Dakle, imam a2 i b2. Ovdje dole sada, govo je bazični blok, moguće je doći od toga što se nalazi pre for petlje, a moguće je doći i nakon jedne iteracije for petlje. Odbog toga ovde uvodimo nekako a3 i b3 koja ćemo naravno reći da sada zavisel tako od ovoga gore a2 i b2 i od ovoga što dolazi samo jedne iteracije for petlje, a jedne iteracije for petlje pogledajte šta radi. Dakle, ona će promeniti vrednosti ovoga a i b u ovome a plus i b plus plus, tako da će napraviti novo a4 i b4. Tako da vidite, dovo ovde a3 i b3 i od ovih a2 i b2 ili od ovih a4 i b4 i od a5. To bi bilo i zadatak broj s7, dakle imate ovih primera još pokačenih na sajtu predmeta u materialima. To bi bilo to što se tiče ovih ilte i gomila nekakih različekih varijanti za reprezentacije tih među koda pucene tog među koda ove ssa, forme i slične. Ikanje kaže, kolega, da li bi bilo i ljubazan da postani snimke vežbi na Timsu kašta je profesor postavi snimke predavanja? Snimci vežbi su okačeni već na Timsu, dakle imate gore kada dođete na kanal General, imate gore karticu koja se zove vežbe i tamo vam se nalaze na MS streamu sve vežbe koje su do sad držane, a okači ću naravno i ove o istima ko danes. Dobro, dakle, bih ja završio danasni čas ili imate vi možete još neko pitanje. A i dakle ima neko pitanje nekuca a ja je onako standardno kojoj uvek što volim, dakle da najavim za sljedeći čas, dakle sljedeći čas ćemo da se bavimo generisanjem koda za x86 arhitekuru pa ćemo se baviti ovim delom što sam malo prespomeno oko alokacije, registara pa da vidimo sad šta se dešava, ukoliko imate tamo naprevi ćemo namerno nekakov uveštačku situaciju da imamo malo nekad pih registara pa onda sad treba nekako da ih izvršavamo kada ćemo koju promeljivo smestiti u registar, kako ćemo čuvati u vrednosti tih registara, opet ćemo spominjaće ove bazične blokove i slično, pa ćemo tu pokazati i jedan primer, da vidite zašto, na primer, menjanje ove redusle da ovih instrukcije, ove indektiranje koje smo radili, zašto može da nam pomogni i kako može otvari da uber za izvršavanje, na primer, neko površa. Ako nevamo pitanja, onda bi smo time završili čas za danas, pa se onda vidimo opet u sledji četvrtak. Ne to, pozdrasima.
