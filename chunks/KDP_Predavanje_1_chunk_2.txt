Ovde to hoćemo... Znači, želimo da iskoristimo da se odradi neki posao. Zašto nas ne zanima možda kako radi operativni sistem? Zato što možda operativni sistem neće raditi taj posao, neko će možda taj posao raditi virtuelna mašina. Programski jezik Java ima virtuelnu mašinu. Ona će raditi deo od toga raspoređivanja, parkiranja, isparkiravanja i rada sa nitima. Neće to raditi naš operativni sistem, operativni sistem će to raditi na malo višem nivou. Većinu posla će ovde raditi naša virtuelna mašina. Možda možemo da u nekom trenutku uzmemo i posmatramo sam izvorni kod Jave, da vidimo kako su tu neki delovi razrešeni. Kako je tu napravljena neka sinhronizacija u pozadini, a da to radi mnogo brzo? Što je nezavisno od operativnog sistema, ali što zavisi od toga kako izgleda naša virtuelna mašina, odnosno šta nama virtuelna mašina pruža da bi ovaj naš sistem mogao da funkcioniše? To se menja tokom vremena. Ono što je postojalo pre 20 ili, kad je već, 25 godina kada je napravljen programski jezik Java i ono što postoji sada su dosta različite stvari.

A uzmite da gledate programske jezike... Ako ste učili pre dve godine Python kada ste krenuli da radite, da slušate ovde na fakultetu nešto, Python je imao jedan skup mogućnosti. Taj skup mogućnosti se nešto malo proširio sada. Još uvek to nije dovoljno dobro, ne koristi dovoljno dobro niti na našem računaru, postoje tamo neki koncepti, ali to još uvek nije toliko razrađeno. Isto tako ako uzmete da gledate Javu, tek deset godina nakon kreiranja su ubačeni neki veliki koncepti koji mogu mnogo da olakšaju sinhronizaciju, mnogo da ubrzaju rad s nitima, što će nam biti baš potrebno na ovom predmetu. Vidimo šta je to cilj i šta je ishod ovog predmeta.


Upoznavanje studenata sa osnovnim konceptima konkurentnog i distribuiranog programiranja. Da vidite kako izgleda konkurentno programiranje, kako te niti tu nešto rade, kako njih treba da sinhronizujemo. Ne zanima nas kako su implementirane niti, nego samo kako mi njih da sinhronizujemo, kako da omogućimo njihovu komunikaciju, u konkurentnom i u distribuiranom programiranju. Jer će nama možda i u distribuiranom programiranju biti potrebne niti da bismo odradili neki posao. Kad budemo pravili klijent-server arhitekturu, videćemo da kod nekih stvari mi moramo da podižemo veći broj niti na serverskoj strani. Ako ste nekada konfigurisali aplikativni server ili veb server, tamo obično postoji pitanje koliko niti želite da kreirate. E, te niti su napravljene na neki način, super kako su napravljene, kako god znaju i umeju su ih napravili, ali one funkcionišu, olakšavaju nam rad. Dobro, šta je sledeće? Uvođenje pojma različitih nivoa apstrakcije u konkurentnom i distribuiranom programiranju. Znači, nisu samo semafori, nisu samo monitori. Videćemo da postoji više različitih načina kako sinhronizacija može da se napravi. Sinhronizacija može da se realizuje čak i kad nemate semafore i monitore. Videćemo ovde na početku našeg kursa da krenemo da radimo sinhronizaciju, a da nam operativni sistem uopšte ne pomaže. Nećemo uopšte koristiti usluge operativnog sistema, kod semafora, "signal", vidite ili tako nešto, nema toga. Hoćemo da napravimo najbržu moguću sinhronizaciju. To je sad pitanje, da li je to najbrže, to su sada pod nekim uslovima najbrže. A sa onim što smo imali na predmetu Arhitektura računara, ili sa onim što ste možda videli, ali kad niste konstatovali da bi to bilo kome moglo da pomogne za sinhronizaciju. Neke čudne instrukcije koje tamo postoje, danas ćemo videti da postoje stvarno neke tako čudne, da kažem, instrukcije koje ćemo mi stvarno koristiti.

I na kraju, kao treću stvar, mi ovde želimo da vas osposobimo da napišete jedan program. Možete i više programa da napišete. Koji će se izvršavati, bilo na jednom računaru, bilo na više računara. Ovo pisanje programa, mi ćemo na predavanjima i vežbama prolaziti kako se to piše, a na laboratorijskim vežbama ćemo objašnjavati kako konkretno na alatu da koristite i kako da to čudno istestirate. Nije samo da napišete program. To treba da proverite da radi za konkurentno i distribuirano programiranje. Jer je dosta teško tražiti greške. A kada pišete ovako sekvencijalnu aplikaciju, to je da kažem trivijalno traženje grešaka. Znači, mi je trivijalno, to je veoma teško. Ali u poređenju sa konkurentnim programiranjem, to je trivijalno. A zato što ovde vama rezultat izvršavanja programa ne zavisi samo od onoga što ste vi napisali, nego i od toga kako je neko drugi napisao scheduler za taj računar. Kako je neko napravio nešto u arhitekturi računara za taj računar na kome se to izvršava. Čak zavisi od stvari koje ne pišemo mi, koje neki posao treba da doda. Ne mislim na bagove, je l' to ispravno radi. Ako imate hardversku grešku, to se pojavljuje, koji je od svega ovoga se, da kažem, odnosi na to, što mi možda ne znamo kako funkcioniše naš računar. Ko drži ovaj predmet? Ajde, da se predstavim vama, ja sam Zaharije Radiša Vojvodić. Bog da vam kaže da sedim dole u kancelariji 37, ali ne sedim sad. Ne držim nastavu tamo iz kancelarije, ali konsultacije ponekad možemo organizovati dole 37, ako vas nema toliko mnogo, ili možemo organizovati negde drugde na fakultetu. Ali za sada ćemo se truditi da komuniciramo koristeći email. Moja email adresa, ako niste do sad zapamtili, je zakijet ETA, Bog ACR. Znači, nije zakijet online nešto. Zakijet online je meni nalog samo da se ulogujem na ovaj Teams. Vi možete poslati email na tu adresu, ali ta email neće meni doći.


Zato nemojte to koristiti, nemojte nikome u suštini od nas slati na tu adresu, nego na nove adrese koje vidite. Vežbe drže koleginice Sanja Delčev i Tamara Šekularac. Njihove imejl adrese su Sanja Da i Taša et ETA, Bog ACR. Možete im pisati ako imate nekih pitanja. Možete i meni pisati ako imate nekih pitanja koja se odnose bilo na predavanja, bilo na vežbe. Dakle, možemo se dogovoriti oko održavanja konsultacija. Mi ćemo konsultacije samo inicijativno organizovati pred kolokvijume koji su tokom semestra i pred ispite u prva dva ispitna roka, zato što znamo da tu studenti imaju pitanja. U ostalim ispitnim rokovima samo ako bude bilo studenata koji imaju pitanja, onda ćemo organizovati konsultacije, to će najverovatnije biti preko MS Teams platforme. Tamo imate i snimke prethodnih konsultacija, tako da možete gledati šta su studenti nekada pitali, a što se odnosi na predmet Konkurentno i distribuirano programiranje. Šta mi radimo na ovom predmetu? Hajde da vidimo sada malo detaljniji prikaz. Imaćemo osnovne pojmove. Danas na početku narednog časa ćemo se upoznavati sa ključnim rečima: šta je to konkurentno programiranje, šta je distribuirano, šta je paralelno, da vidite neke koncepte koji se koriste, koji nisu identični, gde postoje razlike između svakog od tih koncepata. Znači, mi hoćemo da vidimo šta je šta? E, ali ja moram malo da ubrzam. Videćemo onda procese i sinhronizaciju koje ćemo na neki način sinhronizovati, a da nam operativni sistem ne pomaže. Videćemo šta su semafori, regioni i monitori. A nešto što nam je potrebno za sinhronizaciju konkurentnih aplikacija, kako izgleda prosleđivanje poruka i udaljeni pozivi procedura. Ajde, sada malo detaljnije o svakom od ovoga. Dobro, to možete videti u svojim materijalima. Kako izgleda? Ajde, da ponovimo još jednom ove naše stvari koje ćemo obrađivati. Imamo neke karakteristične probleme. Neke od njih ste već videli, kao što su čitaoci-pisci, proizvođači-potrošači ili filozofi koji jedu. Te probleme sinhronizacije ste videli već na predmetu Operativni sistemi i možda i na Objektno-orijentisanom programiranju. A mi ćemo na ovom predmetu znatno proširiti taj skup sinhronizacionih problema. Videćete da, pored ta četiri sinhronizaciona problema, ćemo imati i one lane bridge, pa ćemo onda da ćemo ostaviti jednu kolovoznu traku, pa filozofi ne sad koji jedu, nego koji piju, pa medvedi i pčele, pa kretanje tela u gravitacionom polju, pa berberin koji spava, pa parking i kviz.