 operacija. Ali, se bi smo mogli ovo doodradimo, imamo mogućnost kao u jeziku CSP na više različitih mesta da radimo prijem iste poru. I kako se omrili? Ariše u ovom ovde našem konceptu, u sestini kaženo modu i onda kažemo operation. Ovo je ovde del, je identičan kao one del koji smo imali kod repaca. Nakon toga u sestini dolazi del, gde mi pravimo lokalne promenjive njihovi inicializaciju, nakon toga dolazi del sa prijemom poruka. Kažemo n i kažemo koju operaciju želim da prikvatiti. Znistu kao smo imali u CSP, u tako da maš da kašte, ovo ovde je sada klijen server varijanta CSP programijerenja, koja postoj u programstvim jezicima i ljudima. Ovo ovde je klijen server varijanta onog da smo stavili kod CSP. A-ha, dobro, način mi možemo da stajemo in, kažemo koju operaciju prikvatimo i kad je prikvatima, četim, četim, imamo strelicu, idemo i radimo neku sekventu. Dobro, s je zaštičena, onim tamo in koju se nalazi ispren. Ako je stigla poruka, idemo na taj del. Ako nije stigla poruka, ne idemo dalje. Svjetno je pitanje, ok, a kako napraviti ove problemku s imao da razrešiti problemku imamo? Da vi, ako nam nije stigla poruka, a treba da očekujemo poruku sa više po više različitih operacijama. Oni se zamislili, opet išto, ono što smo imali u CSP-u, ono što smo imali u programstvom jeziku GO, a to je alternativne operacije koje mogu da budu zaštićiti. Možemo da stavimo opet, ok, jez i jedan kao pre, ili proveraio ovo, ili proveraio ovo, ili proveraio ovo, ili proveraio ovo. Ne mora da bude jedan, po jedan, nego možemo da proveraimo više istodremeno. Ako se sečete modela CSP, mogu smo naprimu guard. Ako je stigla poruka, samo postoje jedna velika razlika u odnosom na CSP. U CSP-a smo imali direktno imenovanje, morali smo tačno da navedemo od koga može da nam stigne poruka. A ovde ne navodimo koga poruka može da nam stigne. Ove imamo na strani prijeva, takno imenovanje. Kogod da mi je poslao poruku, dobro došla mi je ta poruka. U CSP-a smo uvarali tačno da navedemo koga smo njeli poruku. E, znači, ja sam je rekao, ovde imamo prijem poruke, imamo buljen, ako je buljen ispunjen, možemo primiti poruku, ako buljen ispunjen ne možemo primiti. I onda možemo da stajemo ovo kvački C1, to je otvornan, zatvornan uglas da da gada, koja nam omogućava da naprimu više ovih alternativar. Ovde prosto je sad jedna mali dodatak u odnosom na ono što smo imali u programiskom jeziku, odnosno modelu CSP, a to je postoji ovaj dodatak, gde možemo da kažemo, ako je više uslova ispunjenom, ome da damo prednost. I ako je više uslova ispunjen, možemo da kazemo da je se prednost tonome, na primetku, kupiti buffer ili ne da je se prednost tonome razni buffer. Ako da imamo to još kao mordići modičnih moditiv sela i accept, ovde, malo se možemo da gaće pisali, vidite ćemo da je tista stvari. Stavimo, što smo nam opcioni stvari, pa ako imamo prijem poruke koje nam je obovezat, u ZIN mora da dođe prijem poruke, buljen, bulov izrezi je opcioni, ne mora da postoj, i ne mora da postoj, a ovo je naš prioritet koji smo sada uveli koji nije povrte opre. Avo je na nas na pitanje. A šta se radi u slučaju da nam je stiglo više poruka, onosno da je više uslova ispunjen? U slučaju da je više uslova ispunjeno, a ne imamo ono ideo za rasporedjivanje priva prioritetu, a ovde se obsluzuje najstariju pozit koji je. Ono i najstariji koji smo mi uspili da do uradimo, taj će biti obsluzirati. Šta još radimo, a je da ponovim s jednom, ako operacija ozvana i ako je ona i uspob tvu, idemo da radimo nesta. Kasnimo, ako nešto od ovoga ne uspe da se odradimo, ako je više uslova ispunjeno, istiklesno poruke, onda imamo prioritet koji će da nam kaže gde treba da se preće. Ako imamo prioritet ili ako imamo više onnih, ako imamo istu vrijednost, koristi se najstariji pozit. Ovo ovde velika razlika u odnusu na CSP. CSP nema pojam o protoku vremena. Ako CSP je ulazim u stini najgoru variantu, ono koje će dovesti do dedloga. CSP, da ću ući u najgoru variantu, oći ispitati sve moguće variante. I pošto će ispitati sve moguće variante, on će doći i do one koje može da izazove mrtvobodne našeg programa ili neku nepreredadjenu situaciju. I novi način mi usteške imamo moguće da imamo malo veću plexi. Preko CSP da ponovim ištenom, moralo da bude direktno iminovanje. Ovde ne znamu ko nam šalje, indirektno iminovanje. Poruka ovde, možemo da kažemo koji su prioriteti. Prvima prioritetima je da se ulazio nekod grana i možemo jozda znamo ako je stiglo više u koju granu ćemo ući. Ali i dalje imamo synchronu koji kaće. Imo moramo randevu, ono išto salje poruku i ono išto prima poruku moraju da se nađu na isto mesto. Ono išto salje poruku čeka da server završi da dođe na nideo da bi mogao na nas salje za svojim rate. Zavrećemo viditi dva primera iz one naše knjige koje koristimo na englijskom jeziku iz ovefom Dejšu Sof Gregorio Degendriesa koja treba da nam pomogu na primer opet naš primjer. Isti primjer kao maločasno, če ono je buffer konačnog kapaciteta. Imo se to se piše koristiti i randevu. Prvi deo to se ostatka sveta tiče izgleda identica. Imo operacijan deposit kažemo item mogu da primim objekat koji se ubatili. Ok, element. Imo fetch metodu fetch result element. Imo isto tako nešto možemo da vraco dobijemo nazav. Ali tu je svas ljubnost sa onim svojim mali code. Codaj se završava smidljivost. I sada prelazimo na razlike. Tamo smo imali isti deo ovakav. Te smo imali deklaraciju naših promenjivih. Ali ako se sećete tamo smo imali i neke semafore. Sem full, empty i 2 mutex'a. A deposit i... ...and here semafora nema. Sašto nema semafora pa sve se izvršava u jednoj niti. Nema koga da synchronizuju ti semafori. Ako dođemo hvijetnom navit, to je deadlock. Nema dalje. Ako ne dođemo na... Šta ćemo da bomo da? Aha, dobro. Kako je onda ovo ovde realizovano? Ovde je realizovano sada kao jedna velika alternativna. Kao jedna veliki case. I al mora da postoji samo jedan case ili možemo imati i case u case... Možemo imati case u case. Znači ovo ovde iličina aktivni monitor, ali i i aktivni monitor. I ovde možemo sada staviti već i bilo je puta da primemo neku poruku. Amosimo moravi primimo poruku i odrađemo poruku ili odrađemo poruku iz buffera. Ovde toga nema. Ovo je sada nešto s kajsima vlijičina CS5. Imamo prim poruke, deposit od koga god. Kad sem imam da prim poruku izgubacit nešto buffer ako je count manje od 1. Ako je to ispunjeno, idem i radi nesto. Kad sem ubacit poruku u buffer, uveć je brojač, mrni se za jedno mesto napred. Imam alternativu. Ako mi neku salje poruku fetch, sta onda? Ako kažem fetch, da neku žele dokoniti poruku. I ako ima bio od cega u bufferu, ja kažem može item. To je sada taj item. To je ono što će biti dato kao povrat na vrednost. To je taj item. To je povrat na vrednost. Ovdje će biti vrat će biti povrat na vrednost. Ovdje će biti prosluđeno klijem s kod strani. Dohvatili smo nesto iz buffer, umanili smo brojač, mrni su jedno mesto. Dobro, a kada će tu korisnik dobiti stvarno odgovor? Znači sada ako bi ja ovdje stavio jednu petlju, nekažem forinti jednako 1 do milijardu, radi nešto množi dva broja. Korisnik dobio odgovor. Kad sam ja rekao item jednako...