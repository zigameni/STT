 Na pretodom predavanju počeli smo sa temom web-sigurnosti i tada sam vam uveo TLS-protokol, videli smo jedan njegov ključni element, to je TLS record layer, kako se po datci koji treba da se pošalju putem TLS-a razdvoju u fragmenti i kako se posle šta se s njima sve radi, kako se dodaje mesič takođe, pomenuli smo dva manja protokola, to su alert protokol kojim se javljao neki problemi u prenosu podataka ili u synchronizaciji između dve strane koja komuniciraju i onaj chain-sacr specification kojim se javlja signolizira da se dolazi do primi nekriptografijskih mehanizama. Sada smo došli do ključnog i najvažnijeg dela TLS-a, odnosno onog koji određuje šta će si tačno vešavati sa podacima koji se štite putem TLS-a, to je TLS-henšik protokol. TLS-henšik protokol je protokol u gome se nekoliko stvari dešava, dakle prvo se dogovore o kojog poveći algoritme da koriste, zatim izvrše razminu ključeva i narodno među subno utvrde identitet jedan drugom. Vidite, tu postoje neke četri fazi opiru TLS-henšik protokol, oni koji su slušali mreže 20, sada ništa neće za vašog generaciju da sam jovo pričao i nisam, možda ste već čuli nešto odmene o tome, ali ako i niste nije neki problem, sad ćemo se to ponoviti i još proširiti kako funkcioniše TLS. Sada, o čemu ću vam ja pričati, ovde to je TLS-verzija 1.2. Ja sam napomenuvalo da je od 2018. godine postoji i TLS-verzija 1.3. Takođe sam rekao da su ove dve verzi u smislu sigurnosti ravnoprovni, odnosno jedne i druga mogu da pruže adekvatne mehanizme, nivoje sigurnosti sa adekvatnim i modernim protokolima, vidite ćemo u čemu je razlika pred kraj ovog prvog časa. Prostop TLS-verzija 1.2 je jednostavnije za predavanje i bolje razlaže šta je sve ono što treba da si desi, okom razmeni kritogarsku materijala, dok je verzija 1.3 napravljena više da bude ubrzan, odnosno da taj cel proces traje kraći. Tako da radimo TLS-verziju 1.2, pomenućemo i vidite ćemo koje su razliki u verzi 1.3. Danas je ravnoprovno koriste ove. Recimo ako idete na sajt poput Google-og, onda ćete se tu sresti se TLS-verzija 1.3 i tu nećete vidjeti neki od ovih elementata u kojima ćemo mi ja sad pričati, jer su oni izbiđu ostalo kšifrovanji, a ako odete na neki sajtove koji je na primer sajt naša fakulteta, onda tu možete vidite kako izlaje TLS-verzija 1.2. No dobro, da ne pričam tako napomet, sad ćemo da se vacimo konkretno na TLS. Dakle, kao što sam rekao, jedna z stvari koja se radi u okiru TLS handshake, to je razmina ključeva, odnosno ono što mora da se ostvari na kraju te razmine, to je da i klient odnosno vaš browser sa jedne strane i server, web server sa druge strane imaju isti krytografski materijal. I sad tu postoje različiti mehanizmi kako to može da se ostvari i u specifikaciji TLS 1.2 postoje četiri različite mehanizma. Prvi mehanizm je mehanizam koji se zastniva na RSA algoritmu, gde recimo ako govorimo o sajtu naše fakulteta, sajt naše fakulteta košta k pitanju HTTPS sajt ima svoj digitalnih certifikatu, njemu se nalazi javnih ključ fakulteta, vaš browser ći da pokupi taj certifikat i skoristiće javnih ključ koji se nalazi u tom digitalnom certifikatu i tim javnih ključom će šifrovati tajnih ključ koji će se kasnije skoristiti za izvođenje svoj kljutografskog materijala koji je potriban za zaši tu pojatak. To je jedna varijanta. Druga varijanta je da se poristni Diffy-Helman algoritm. I sad tu postoje tri različite varijante Diffy-Helman, a kao što možete da vidite na ov slajdu, jedna varijanta je fiksni Diffy-Helman, kod koga se koriste, kde podrozumeva slajdeću situaciju. Da, i klient i server imaju tako digita necertifikate u kojima se nalaze, kao što sam pomenu, ako dere se certifikata nalazi javnih ključ web servera koji je potpisa na strane neku certifikacinom tela. Tako bi ste u ovom slučaju fiks Diffy-Helmana, imali to da i browser i web server imaju Diffy-Helman vrednosti koje su potpisa na strane neku certifikacinom tela. Dakle, malo drugačije digita necertifikat, u kome nisu are sa ključev i nego javni Diffy-Helman vrednosti. Što se tima postiže? Tima se sprečava meni do midl napad, tima se osigurava ona, ako se seđete ona Merkle šema koja podložna meni do midl napadu, time što se uspostavlja čvrsta veza između javnu ključa i identiteta svačje od strane koje pomuniciraju. E sada ono što je mana toga je ta situacija, rećimo da ako si poristi ta fiks Diffy-Helman šema, ako pretpostavimo da se takav digita necertifikat, odnosno da se takav ključevi podpisuju nebaš tako često, na primer ide da kažemo jednom godišnje, rećimo da ako bi smo uzali taj primer E.T.F. da je rećimo vi onda kao studenti dobijete takav neki certifikat od fakulteta za svaku školsku godinu, onda to znači svaki put u toku te školski godine kada bi ste se povezali na taj web server požičenim tako digitarno certifikata, uvek bi ste dobili isti sessistik ključ, zašto zato što su javni Diffy-Helman vrednosti fiksne, i podpisane su strane tog certifikatcinoj tela. Tako da ova fiks Diffy-Helman varijanta ona jeste sigurno u smislu da nije podložno meni da mi do napadu, ali otvara neki drugi vrste napada, kao što je to da napadač ima sada mnogo veću količinu šifrovanog materijala koja kasnije može da mu posluži za neku vrstu statističke analizia koja im će pokušati da dođe do originolu tekstu. I ovo jedan od razloga zašto je recimo ta fiks Diffy-Helman šema izbačena iz TLS-1.3 spacifikacije, prosto zato što da je na padaču više mogućnosti da izvaši napad na tu raznam. Druga šema koja se takvođe smatra za nesigurno je šema koja se zove Anonimus Diffy-Helman i sada ovo što začuđuje ali je to še uvep u toj TLS, odnosno ona je naprodjena za TLS-1.2 spacifikaciju, to je šema koja je bukolno odgovara ove merkle razmini kojoj dve strane samo razmene javne Diffy-Helman zvednosti bez ikad po provere autenticnosti tih javnih vjučeva. Što onda ostavlja mogućnost za meni da midl napad i onda ne bi trebalo da vas začudi da i ova Anonimus Diffy-Helman še ma izbačena iz TLS u verzi 1.3. Ono što je ostalo i u verzi 1.3 to je ovdje efemeralni Diffy-Helman kod koga se radi Diffy-Helman razmena ali tako da prilikom svake razmene tih javni Diffy-Helman zvednosti uzima se različite javne Diffy-Helman zvednosti s tim što su te Diffy-Helman zvednosti podpisane RSI ili DSS algoritmo. Vi vidjet ćemo sada nekim primerima kada vam budem pokazal neki variante TLS-a koje se koriste da se to zaista radi. Znači ako recimo web server ima svoji digitami sertifikat i ako se koristi efemeralni Diffy-Helman onda će taj njegovaj javno vrednost, mora da bude uspostavljena veza između te javne vrednosti identiteta servera i taj javno vrednost mora da bude na neki način podpisana ključem za digitano popisivanje koji postoji u okuju digitano certifikata. Dakle to je verovatno danas najčešće šema koja se koristi za razmeno ključeva, to je efemeralni Diffy-Helman. Obdje na slajde imate neku forteca šemu koja se koristi nekim specijalnim situacijama kada se koriste neke hazvirške kryptokartice i se to nećemo razmatrati, ono što treba da zapomknite to su ove četiri varijante koje postoje za razmeno ključeva. E sad tu postoje dve različite varijante razmene, jedna varijante razmene to je ono koja se najčešći koriste i koje ste vi danas koristili najmanje 50 putra kakvosti otišili u nekih HTTPS i, a to je situacija u kojoj digitarni certifikat postoji samo na jednej strani, odnosno samo na serverski strani. I sad ćemo da prostudiramo malo kako izvada taj handshake, odnosno šta se tu sve dešava i šta se tu postoji u okiru te razmene, samo da kažem, maj to ćemo viditi na narodnim slajdu, da postoje i druga varijanta, a to je varijanta u kojoj postoje digitane certifikati sa obje strani. I klient i server imaju digitane certifikate i to se koristi u jednom relativno redko skupnu slučajeva, to se koristi u ovim situacijama kada je potrebna jača, odnosno dodatna autentikacija klienta i to se obječno koristi i onda, recimo, može banka da vam da, digitane certifikat koji ona krirova, da biste, recimo, mogli pomoći tog digitano certifikate da izvršite plaćenje sa vašeg računu. Ako imate na logu bankci koji je mogućevo samo da vidite stanje na računu, onda to nije nepodno. Onda je dobro ili da se napravila obično zaštite i da vi pomoći u zanemi i password da se ulogavite, vidi ti, mako treba da se uredi neka akcija koja može da podrozumiova neke finansiske oboveze, e onda je bitno da ta zaštita bude kvalitetnija i da i jedne i druga strana imaju digitane certifikat.
 Zelovo, sada ćemo da vidimo prvo tu varijantu u koji nema kljenstvu sertifikatu, dakle to je klasična situacija, vi sada odlazite na site google.com, kliknete na enter, tog trenutka počinje dešava se TCP, handshake, nakon toga se dešava ove i teles handshake i kada se to završi, počinje da dolazi sadržaj stranice. Pošto vi znate da kad vi kliknete na google.com, vama se stranica pojavi u roko jedne 2 sekunde koliko već, to znači da se ce ove handshake i sve to što je potrebno da se desi, desio unutar te i jedne sekunde, dakle od trenutka kad ste kliknete na enter, do trenutka kada se pojavio sadržaj stranice. E sada ćemo da vidimo šta tu u se postoji i koje su to fase u okiru teles handshake. Prva faza je faza u koje se client i server upoznaju da tako kažem. Naravno, zakaj teles handshake inicira klient i to klient inicira porukom koja se zove client-hello, znači nakon što je napravljim TCP handshake, klient je taj koji prvi šalje poruku i to je nekakoologično zato što biste u okiru browseru uzeli i rekli da hoćete da odete na određinosti. Tok trenutka vaš browser inicira rezilu prema serveru i šalje client-hello poruku. U okiru client-hello poruke vaš browser će da pošadja nekoliko stvari koje su diti. Prva stvar to je skup svih protokola koja podržava i svih mehanizama zaštiti koja podržava. Vida ćemo, imamo najedno modernih slide-ova primer toga, kako to izgleda, nači na primer vaš browser može da podržava 10, 15, 20 različitih variantik ritograficih protokola i on će to sve poslati na drugu stranu prema serveru, kako bi serveru mogalo da izabere odgovarijići mehanizam zaštiti. Takođe, ono što smo na prošlom času komentari se li to je da kompresije nema, praktično se znači nekoristit tako da ovo može se zaborevi, ali ima jedna stvar koje bitno i to će vam isto pokazati, to je da se u okiru ovo client-hello nalazi jedna slučajna vrednost, ta slučajna vrednostam je bitna, to ćemo kastnije vidjeti zakreiranje onoga što se zove premaster secret. Znači premaster secret je nešto što je na kraju, što se dobija na kraju ovog celog procesa razmine ključa. Šta se posle radi sa tim premaster secretom, to ćemo takođe da razmine. Esad, znači client je poslo svoj zahte i rekova ja, znam sve ove protokole, nakon toga server kad je dobil tako zahtem, server odabere jedan protokol i on kaže koristit ćemo taj protokol, znači to je specifikacija prihvaćeno protokol, i server šalje svoj slučaj angloj, tako zvanje server angloj i to ćemo isto da vidimo čemu nam služi i kakvo radi. Esad, nakon što su se upoznali da tako kažem, kreće faza u kojoj server šalje svoj kriptograski materijel, znači ono što obovezno ide, to je da server šalje svoj digitari certifikat ili može da posalje jedan certifikat, može da posalje čita vlanat certifikata u koliko je potrebno to browseru da bi mogo da izvoši proveru identiteta servera. Esad, da ovde imamo jednu varijantu i ova linija vam je nije slučajno objeražena drugom bojom, zato što zavisi od toga, da li se koristi razmina ključeva koja je zastavana na eresa varijanti ili razmina ključeva koja je zastavana na difi helman varijanti. Ako se koristi razmina ključeva koja je zastavana na eresa varijanti, onda je ovaj digitari certifikat dovoljeno i nemora ništa dalje da se šalje, nakon toga server kaže server hello done, to je, jasno, završio, nemamo više ništa da šalje. Sa druge strane, ako se šalje, ako se koristi neka vrsta difi helman razmine, onda server mora da pošalje ovu server key exchange poruku, a okviru te server key exchange poruku je će se nalaziti javna difi helman vrednost. Dakle, ovo ovde ne možemo jednom šemom da pokrijemo sve varijanti, ali prosto nadam se da je ovako objušljeno jasno. I ti me server završio, nje poslo ono što je bilo bitno da on uredi. E sada nakon toga, client je dobio digitari certifikat, client, naravno, mora da proveri digitari certifikat, on proverava digitari potpis, proverava lavan certifikata, proverava odcisi serpog protokol obovezno, ako je to sve u redu, onda client šalje poruku koje se zove client key exchange. E sada opet što da će biti client key exchange zavisi od varijante, ako je varijanta a da se koristi rsa algoritm, onda će tim javnim RSA ključem iz digitanoj certifikata web servera biti šifrovan premaster secret koji je generisao client, znači client će da uzmjeno neki generator slučenog brojva, generisa će premaster secret i generisa će neki slučen broj ovo je zbog sprečavanja, rippla i napada i sve zaidno to će šifrovat i javnim ključem servera. To bi bila varijanta RSA. Ako nije varijanta RSA, ako je varijanta diffi helman, onda će u operu client key exchange'a client poslati svoju javnu diffi helman vrednost. E sada ako je u pitanju RSA varijanta, onda ovom porukom je client zapravo on već posleduje taj primaster secret i client zna i može da izvede sve ključeve koji su mu potrebni da bi mogao kasnije da vrši enkrypciju podatak. Onda z toga, naredna poruka koju šalje client je chain-scifer specification što znači od sada svaka moja naredna poruka će biti šifrovana i šalje poruku finište, timi kaže, jasno, završio svoje slajne. Ovo je ovom ovde porukom, odnosno slanjem primaster secret, klient zapravo jasno je da klient ima taj primaster secret i generisao i može da izvede sve kryptografski ključeve. Z druge strane, to bi bila i resa varianta, koja je difi-helman varianta. Takođe, klient je u ovaj ovde poruci server ki exchange dobiljo javno difi-helman vrednost. U okuru ovde vrednosti on šalje svoju javno difi-helman vrednost, da će on posleduje obe javne difi-helman vrednosti, on može da izvrši difi-helman razgledan, odnosno može da izraču na sada primaster secret. Znači da isto u okuru ovde poruke, on praklično, nakon te poruke ima sve kryptografske podatke, te može da se prebac i da izvrši ovaj change-sifern specification i može da počne da šifre podatke. Znači to bi bio dea u kome klient šalje svoj kryptografski materijal i na kraju ono što server radi nakon što je dobil primaster secret bilo pute mere sa algoritnom, bilo putem difi-helman razmene, sada i server može da odredi ključeve koje se koriste za šifrovanje, on šalje change-sifern specification i šalje finish i tog trenutka, znači sada i klienti server imaju savkriptografski materijal i klienti server mogu da šifruji sve podatke, dakle, teg tog trenutka počinje HTTP razmene, odnosno počinje slanje, sadržaja web stranjice i tada počinje dolazi o mošnosti videota. I kam što ovde možete da vidite, ovo je handshake je dosta veliki, dosta je glomazan, ima više poruka koje se šalju i to je jedno z stvari koje smetala web serverime zato što je to uticilo na zadovojstvo koristnika, odnosno na to kako koristik doživljava kvalitet tog web servera, zato što od trenutka kada on klitne na enter, mora da prođe neku vreme da se desi handshake, prvo TCP handshake pa teles handshake i tek onda da počinu dolazi podaci, tako da je to nekad proozrpovalo to da se čeka i mora da se sačeka da počinu stižu podaci, što onda deluje kao da nešto niju red. Pa je to bila jedna motivacija da se skrati ove handshake i u teles vezi n-3 handshake skraći. Dobro, to je varijanta, u kojoj, način, ovo varijanta prost, tako da kažem u kojoj postoji samo jedan digitane certifikatna strani servera. Ako postoje digitane certifikatni na obje strane, onda je ova razmena dosta slična, dakle ona opet ima četri faze koje su bila i malo pre, znači faza upoznavanja da takažem faza u kojoj servera šalje svoj kritogaskim materijal, faza u kojoj klijen šalje svoj kritogaskim materijal i na kraju potvrda od strane servera, odnosno počinjanje, šifrovanja teksta. U čemu razlika ove še m-e u odnusu na predkudnu? Pa razlika je u tome što u ove še m-i se zahteva da i klijent poseduje digitane certifikat, a da bi se to izvelo, odnosno da bi se naterao klijent da pošalje svoj digitane certifikat, postoji jedna dodatna poruka u opiru ovih poruka koje je šalje server, a to je poruka koje se zove odnistite na certifikat, da je sada server traži klijenta da mu poseduje certifikat, pa onda samim tim klijent šalje svoj digitane certifikat, e sad pošto posedovanje digitarnog certifikata ne znači da ti mi izvršili autentikaciju, to bi isto, to ćemo napraviti sedjim na analogija, mislim da me neko pital prošne, ne? Znači, digitane certifikat prosto neko može i da snim, zato što ove poruke idu u kraju, neko u web-sajta. Kliučnost vara za autentikaciju u ovom slučaju nije posedovanje digitarnog certifikata, nego je posedovanje privatnu ključa. Znači da bi se potvrdilo da je klijent upravo vlasnik ovog digitarnog certifikata, mora da postoji ješ jedna dodatna poruka koja se zove certifike i tverify, u koje je neko
 Nek je tekst od ovih slučenih rednosti koje se razmenjuje, podpisan odnosno, enkriptovan privatnim ključem klijenta. E sad kada se to pošeli, kada se pošeli takap tekst koji kriptovan privatnim ključem klijenta, kada se uzme javni ključ koji se nalazi u digitalnom certifikatu i kada se ovo deshifruje i kada se ustanovi da je to taj tekst koji treba da bude, onda server može da kaže da, ja komuniciram sa klijentom koji posledu ove digitalne certifikati i posledu je privati ključku i odgovoravano digitalno certifikata. I način suština ove razmene ključeva je istak kao suština predhodne. Na kraju se dobije taj primaster sikritni skog se izvode svi ostali ključevi koji su nam potrebni za zaštitu podataka. Međutim, ono što je ovde različit, to je što se ovde dodatno zahteva da i klijent ima svoj digitalni certifikat i vrši se verificacija tog digitalnog certifikata. E dobro, nadam se da je ovo jasno, imate ovde na narodnom slajdu ovo isto samo nacrtano, malo možda detaljnije, napisano makar na iglaskom jeziku, šta se deshava u svakvog dovih faza, ali ja verujem da je ovo moje obješnjenje bilo razumno i makar dovoljno jasno. Saćemo da vidimo malo kako izgledaju te poruke, znači ovo ovde što vidite to su snimljene poruke i to bi trebalo da vas uveri u sve ovo što sam ja pričao da je to tačno da ni sam ja to iznislio. Znači prva poruke koji ćemo vidjeti to je client-hello poruka i okru client-hello poruke, kao što sam rekao, client-šalje skup svih protokola koje on podržava i recimo možete ovde da pročitrate jasno, mislim jespo skraći inica ali mislim da je jasno šta se pidešava, znači recimo ovaj prvi to je TLS koji je zastanovan na eliptičnim krivama, Diffy-Helman zastanovan na eliptičnim krivama, DHE znači Diffy-Helman efemeral razmena, znači ovom što sam malo tepiječao, zatim podpisivanje javnu ključu uopiru Diffy-Helman razmene se vrši elliptikr digital signature algoritm, znači ECDSA, a kasnije će podaci biti zašličeni AS128-GCM-om, ahesh funkcija koja se koristi je SH256. I kao što možete da vidite ovde postoje sve te različite variante koje podržava browser, a onda vidite će mu narodni poruci, mu narodni poruci će server odabrati jednu od tih porub. Ono što ovde takođe možete da vidite da je ovde u pitanju TLS 1.2 razmena, i ono što ovde možete da vidite i to je bitan element, to je da je uopiru ove poruki klient poslava nešto, to se zove client random, to ćemo viditi malo kasnije, čemu nam to služi i kako se kasnije koristi. Znači to bi bila poruka client-hellow. Nakrošto je klient poslava client-hellow, vraće se nazad poruka server-hellow, i uopiru te server-hellow poruke se vidi sljedeća stvar, a to je da je server odabro, da se koristi Diffie Hermann ephemeral sa elitičnim krivama, da se koristi DSA sa elitičnim krivama za popisivanje tih Diffie Hermann vrednosti, da se koristi AS-128-M i SH-256, znači upravo ona prva varijanta koja je poslata, a da se takođe kao server random vrednosti koristi o ov vrednosti koji je poslava server. I to su te prve dve poruki. Onda nakon te prve dve poruke imamo poruku sa certifikatom, da je server šalje prema klientu certifikat, i kao što ovde možete da vidite, server nije poslao jedan digitani certifikat, ovo je konkretno u ovom slučaju bilo povezivanje na Google, nego je Google.com je odgogrio sa 3 digitana certifikata i to smo videli na predkodnom predavanju o X-509 zašto ima višetih digitalnih certifikata, odnosno koje je značinit svega toga. Nakon te poruke certifike idete poruka koja se zove server txchange, u okviru poruke server txchange, znači pošto smo videli da su se dogovorili da se koristi Diffie Helmann, onda znači da mora da postoji poruka server txchange, da su se dogovorili da se koristi RSA, onda ne bi koristili server txchange zato što je slajne digitana certifikata dovoljna. Pošto su se dogovorili da koriste Diffie Helmann razminu, onda u okviru server txchange poruke mora da se pošalje javni ključ i ovde kao što možete da vidite imate polje koje se zove pubki, koje je značila taj javni ključ, a takođe taj javni ključ je podpisan, evo ga ovdje digitarni podpis, korišnjenjem ECDSA algoritma i imate digitarni podpis, tako da kljen je odnosno browser može da proveri autentićnost ovog javnog ključa. I to je manje više sva mudrost, znači sve če smo smo pričali da sada u kurštu se zaista koristio na kod jednom kratkom vremenskom intervalu kada se povezujete na web serveru. E sada nakon što su to razmenili, ono što smo rekli, to je da se uopiru te razmene generiše nešto, što se zove premaster secret. Taj premaster secret nije ključ koji će se vršiti šifrovanje pojada tako ili mesič autentićnost kod, istog premaster secret-a ove strane treba da odrede 6 tajnih vrednosti. Treba da odrede 2 ključa koji se koriste za mesič autentićnost kodove, treba da odrede 2 ključa koji se koriste za šifrovanje samog teksta, odnosno onoga što razmenuju browser i server i treba da odrede 2 inicializacijone vrednosti, znači to je u kupno 6 različitih tajnih stvari. E sada pisalo je na jednom od predhodnjih slajdova da taj premaster secret ima 48 byte-ova, to možete izračunati koliko je bita, ali u zakom slučaju, rećimo, ako predpostavimo da se koristi za šifrovanje, rećimo, is256, i ako predpostavimo da se koristi za mesič autentićnost kod algoritm koji koristi ključ veći veći 256, onda nam za ovo ovde treba 6 puta 256 bita, što je više od oni 48 byte-ova koliko smo imali u primmaster secret. To znači da treba da se uradi neka manipulacija tim primmaster secretom, kako bi se izgenericalo više kritograzkoj materialu. E ta manipulacija koja se vrši, se zove korišnjenje cod o slučajne funkcije, odnosno skraćeno pseudorandom function, odnosno prv. I sada ono se sprovodi u dve fase. Prva fase je da se od primmaster secret, a generiše tako zvanim master secret, a ono se generiše tako što se na ulaz u cod o slučajnu funkciju, kao tajna vrednost dovodi primmaster secret, kao tako zvanim seed, a s druge strane se dovodi string koji se zove master secret i dovode se ove client hello random i server hello random vrednosti, koja se vam pokazalo pironi kvorek. Dakle, to sve ulazi u obseudo slučajnu funkciju i od tih elementa se dobija master secret. E sad ja nisam još pokazao šta je celo do slučajnu funkciju, pa to deluje malo možda nejasno, ali tu se nalazi već na narodnim slajda pa ćemo viditi šta je to. Mežekim, generisanje master secreta nije poslednji korak, nego postoji još jedan korak, dakle, ponovos je koristip se u doslučenu funkciju, kako bi se iz master secreta generisalo nešto se zove ki block, odnosno skup svih bita koji su potrebni za ključeve, gde se, kao ulaz sad da se druge strane koristi master secret i koristi se ovo obseudo slučajnu funkciju. E sad ovo ovde na ovom slajdu je tačno, ali delo je zapetljano, a mislim da će vam biti mnogo jasniji kada pogledati i vidite kako izgleda ta obseudo slučajnu funkcija. Znači ona ima tako strukturu da se ovo je ovde deo, ponavlja ono liku puta koliko je potrebno, pa rekli smo da recimo u onoj situaciji malo prekovo je sam ja hipotetičkoj rekao da nam treba na primjer 6 puta 256 bita za različite ključeve, ako je izlizis hmat funkcije na primjer 256 bita, onda će ova operacija morati ovde da se ponovi 6 puta, a ta operacija podrazumeva da sa jedne strane imamo tajno vrednost, a to je ove master secret, a s druge strane imamo ono što se zove seed, to su one neki stringovi, odnosno one neke vrednosti koje sam vam malo pre pokazala. I sada, znači dovodi se s jedne strane master secret, s druge strane se dovodi ovo ovde, imamo taj seed koji postoji na više mesta lovog algoritma i ova se struktura ponavlja, odnosno, ovo operacija se ponavlja, ono liku puta koliko je potrebno, da bi smo dobili ove izlaz, a to je taj izlaz i taj tako zvanji kiblog. E taj kiblog zapravo predstavlja, predstavlja ono što nam je potrebno, da bi i browser i server mogli da generišu isti ključeve i kako bi sada kada šifruje server ono šifruvo svojim write ključem, a to sve desifruvovali kasniji browser, tijim istim server write ključeve. Znači to je ceo proces kako se generišu ključevi, da je, naravno, samostrukturu ove pseudoslučine funkcije.
 Nemorate gubate napanjmeta, posledno ne, ove stringove koji si koriste, ali treba da znate da iz prim master secreta se određenim postupkom generiše dovoljna količina kriptografskog materijala. Dobro, i to bi bio handshake protokol i handshake protokol treba dobro da provučite, zato što u njemu se nalazi praklično sve ono, čemu smo rićali u prvoj polovini, u noj tako zane teorijskoj polovini ovog kursa, i treba da razumete šta zaproko je to vrste sigurnosti koji obezbeđuje teles handshake, a to ćemo još malo pro komentari sati na kraju ovoj čas. E sada ostaje još jedan, ako se sečete skupa svih onih protokol, a ostaje još jedan protokol koji nismo razjasnili, je to je najmlađi od svih protokol, to je hard beat protokol, hard beat je odkuci srca, a to je neka vrsta pink protokol, koja se koristi da se dugo trajne web sesije održavaju. Najme, web sesije mogu da imaju veoma različit ovreme traje, mogu da budu veoma kratke, a to je da dovučite određenu stranu i one se sve završte tim dolačinjem odgledaće ili HTML, sadržaja ili slika ili video. I to su kratko trajne web sesije. Primer, dugo trajne web sesije je ovo što mi sadra. Znaczy svako od nas u pozadini se izazuma koristi web transport, svako od nas ima jednu veoma dugo trajnu vezu prema tamo nekom zoomovom serveru, kako se sve ovo dešava i da se šalju, da ja šaljem i svoj glas i videu, odnosno prezentaciju, a sa druge strane od tog servera ka vama se šalje ovo što ja govorim i mi je sad ili ti čuje. Dakle, to je primer, dugo trajne web sesije. Sad nisu sve sesije mogu da budu, znači kratke dugo trajne mogu da budu da takržem živah, kao što je ovada, da se stavno nešto dešava, stavno putuju neki paketi, ali mogu da budu i takve da se relativno redko šalju pakete, dakle da budu da takržem mrtviti, odnosno ostavi se otvore na sesija i onda se čuti neko vreme. Primjer toga može da bude, na primer, ako ste nekad pratili preko weba teniski meč i nalaziti se povezani na neku web stranicu na koji izlz rezultati tog tenisku meča i onda oni mogu da mlate lotiti tamo 25-35 puta prekomreže i to traje neko vreme, nema promene u rezultatu, znači ništa se ne dešava i tek posled, na primer, minut se desi neka promena i vidobljeta boveštenje na web stranicu da se nešto promene. To bi bil primer web sesiju koji se ne dešava mnogo toga, odnosno kojemrca. E sad pošto takve dugo trajne TCP sesije, oni mogu da stvore probleme u firewall-ovima koji mogu sad da protumače, na primer da se ta web sesija završila i da prekinu propuštenje tih paketa, a i sa druge strane i da bi vaša čunar znao da li treba da održava određeni mrežni soket, da bi se takve sesije očuvavala napravljenje tls-hardbit-protocol koji periodično šalje određeni sadržaj između klienta i server, odotneđu browser i server. I način rada, ovo cardbit-protocol je vrlo sličan način rada pinga. Pinga, komanda radi tako što se pošalje određeni sadržaj na drugu stranu, druga stranu dobijete sadržaj i vrati ga naziv. Hardbit-protocol radi to isto. Ovo ovde možete vidite kako izla hardbit poruka. Znači postoji tip poruke koja može da bude zahtem ili odgor. Pa onda imate veličinu poruke koja kaže, na primer, na primer, poruke veličine deset karaktera i ovde imate sadržaj i 10 karaktera. Na primer to možda bude A, B, C, D, E i tako dalje, prvi deset slova se ubaci. To ostigno na drugu stranu, druga strana ako je primila ovo, vrati nazad i mi zapravo na ta način stvaramo veštački HATTP-saobrać, t.n. veštački TLS-saobraće koji održava tu web-session. Ja se zašto ima potrošio ovdko vremeno na opis ovog mehanizma koji je prilično jednostavan, on je meni jako zgodan primer i ja volim da ga spomenem, posebno za vaš smer, za sotrstvim žinjerstvu, zato što, recimo, u implementaciji ovog hardbit protokola se krijila jedan bug i to je jedan od najvećih bug-ova koji je nastavu zadnji 10 godina, koji se zove hardblit bug, možda se čak i čuli za njega, koji je zahvatio jako veliki broj uređe koji su svi koristili istu implementaciju TLS. OpenSSL nije tajna da mnogi komercijaniji proizvodi koriste OpenSource. Ovrče, taj OpenSSL je korišen u ogromnu broju imrežnik uređe i browsera i svisu imali ta isti bug. A kako je bug napravdjen? Bug napravdjen je na sljedeći način. Ono što je nije bilo iskontroliseno, to je kolika je veličina ovog ovde payload lengtha, gali odgovarar veličini payload. Ono što je neko mogao da uradi, to je da napravi ovaj payload koji naprimes se sastoji od 5 karaktera, znači odgleda lako, a da specificira payload length koji je ovak, na primjer, 50.000. Ako neko to uradi, što se dešava na dolaznanj strani? Na dolaznanj strani se dešava sljedeći stvar. Ovih 5 karaktera, naravno, ću biti upisani negde u memoriju, zato što oni prestavljali taj payload, to je ono što je dobijeno u okviru paketa. A onda kada treba da se vrati poruka nazad, pošto je rečeno da je payload length 50.000, ono što se vraćalo nazad, to je ovih 5 byteva plus 49.995 narednih byteva. Znači da je neko mogo da povuče sadržaj memorije druge strane, i to svih onih memorijskih lokacija nakon ovog što je upisanu memoriju. A ono što je činjnice, ako je u pitanju određeno vrsta aplikacije, da u tom delu memorije su mogli da budu i privatni ključegu i razmarazi drugih togleski materiali koji možda nije trebalo da dobije ta druge strane. I to je bio taj čuveni hard bleed bug. Ono što je bio peč, to je bila jedna linija koda koja je samo proveravala to da li je payload length veći od stvarni dužinje payloada, i naravno to je onda popravdeno, a ja to je jedna škola za vas da mora da se vodi računa i da čak i tako neki najizgled potpuno nebitan i nevažan deo protokola može da napravi probleme kasnije u implementaciji. Dobro, je sada ono što sam rekao, znači od augusta 2018 godine napravljeni TLS versija 1.3 i ovde možete na ovaj sličići da vidite u čemu je razlika između TLS 1.2 i TLS 1.3, znači razlikuje se handshake i tu postoje različite varijante TLS 1.3 handshakea koji mogu da budu kraće, postoji mogušno za browser zapam ti neki podatki ako je nedavno kontaktiralo taj web server da ne proverava svaki put sve one podatki koji dolaze za servera kako bi taj handshake bio kraći. I to je jedno od glavnih motivacija za uođenje TLS 1.3 handshakea da se napravi da on bude brži i kraći. Ono što sam rekao da je urođeno, to je da je izbačena kompresija, izbačenjan unimni difih helman, izbačeni su neki stari protokoli koji se smatraju za nesigurne, ubačeni su neki novi, recimo vaš omiljeni čača 20, znači urođeno je sve da se naravno pojednostavi sama razmena, jer recimo, vi ste gubili u okviru TLS 1.2 samo u ove dve hello poru ki ste gubili jedan ciklu slanja tamo vamo i onda ako imate situaciju da se klient nalazi u Srbije a da se server nalazi u Americi, fizički je potrebno da ti paketi stignu od avde do tamo, na primer, 50 milisikundi u jednom smeru, pa onda imate 50 milisikundi tamo, 50 milisikundi nazad i tako daji, tako daji, to sve traje, taj Henshake traje. E, TLS 1.3 je to skratio, TLS 1.3 je također urođeno da već od prve poruki može da se vrši inkripsija podataka, tako da ako najđete na site koji je TLS 1.3, koje recimo Google.com i hoćete da pronažete ove poruki koje se da pokaza ove client-helo, server-helo i takve, nećete ih naći. Ali, ono što treba da znate, to je da i u okru TLS 1.3 sve isti stvari moraju da se razmeni. Ovde imate kako je napisan taj TLS 1.3 Henshake okru odgovareći gerefce dokumenta, nećemo tražiti od vas da znate, ali TLS 1.2 treba da znate, značno ono, ako doskla lepo i sistematićno vam pokazuje šta se mora da se desi da bi došlo do razmene ključe. E sad još jedno je malo napomena, a to je isto nešto novo što je Google lubeo, a to je jedan novij protokol koji se zove Quick. I sad recimo, ako je opet nekoh teo da se poigra i da snimi, recimo, svoju komunikaciju sa Google'im websiteom i recimo ako koristi Chrome ili koristi neki od browsera koji su zasnovani na Chrome, na primer, operu ili Braves, Braves prei recimo od tih novijih i odete prema Google'u i kažete, ja sad koji ću da pronađem tu tejeles komunikaciju koji je profesor pričo i vi kliknite na, gledajte u vaju šarih snimak, toga šta se
 u svedešava i vi kažete pa ovo da je uošte ne postoji. Uošte ne postoji. Nema TCP, nema TLS, nema ničega. Zašto? Zato što je Google u lednom trenutku, ih teva da potpuno promeni architekturu, pristupanja web-saitovi ima. Tako što je umesto tradicionalne, ove mrežne architekture koje ima TCP protokol, pa iznetoga TLS, pa iznetoga HTTP, uveva jedan novim protokol koji se zove quick, a ispod koga se nalazi UDP. Esad možete tako situacije da pustite i da vidite da snimite taj quick protokol. Quick protokol ima funkcionalnost delom TCP'a i delom TLS 1.3. Znači u suštini, iz perspektive, sigurnosti, ista svar će se desiti. Ja ću vam pokazati malo kastniji, na primeru da taj quick protokol unutar sebe koristi TLS 1.3. Znači njišta manje siguran od klasičnem variante TCP plus TLS. Ono što je bilo motivacija Google zašto su resili ovo da naprave, pa jedan od problema te sporosti je TCP. Ako se setite kako TCP funkcioniše, on ima taj mechanizam prozora koji se lagano povećava kako prolaze paketi kroz TCP-SESI. E sa tu je problem ako dolačite neke stvari, ako imate više paralelni TCP-SESI sa neke web stranice, koje dolači različite slike. Sve te slike će se doblačiti i ti prozori će polako rastu. To znači da će prototi za dolačenje svaki od tih slika biti mali u početku. Oni će posleda se ubrze, ali u početku su mali. I ako vi dovučiti celu sliku dok je taj prozor je šovek mali, to će biti spora. I njima smeta zapravo TCP. Oni su chceli da logiku TCP-a izmeste u quick protocol, da ispod postoji UDP koji nema handshake, koji nema nikakav mehanizam prozora, on samo šalje maksimala brzo pakete, a da se ta kontrola toka nalazi u opiru quicka, koji oni mogu da kontroleši na browseru i na serveru strani. I oni su to pustili tiho u Chrome browser, pustili su na svojim serverima i 2018. godine već 10% internet saobraće činimo quick, pa onda 19. već 20. Ja nisam nima o to u zadnji kodinu dve dana, tako da ne znam kakvi su s odbrojevi, ali svakom slučaju ono našto možete da najdajte, to je da se taj quick protocol koristi i da je to jedna sa sim legitimna, jednako sigurna varijanta korišćenja HTTPS. Dakle nije niko njišta smuvo tu da tako kaže. Naravno, o sada ima neke svoje specificičnost, ja se tu neću zadržavati, više bih teva samo da vam da se tu uverim u ovo, ovo sam ja snimao pre neki dan, u provo kada sam išao ka Google-vom websiteu i ono što vidite ako odete u wire shark, tako vidite da se tu nalazi neki protocol čudnog imena, koji se ne zove ni tlstih, HTTPS ništa što je vama poznato, a onda u okviru tog protokola, kao što možete da vidite, postoji TLS record layer i postoji poruka koja se zove client-hello, dakle ovo čemu se on tričao, u okviru TLS 1.3 postoja sve ove stvari koje su potrebni da se izvrši sigurna razmena i kao što možete da vidite, ovde postoji neka razmena okviru quicka koji u ovom slučaju imala 3 paketa i onda kasnije nakon toga se šadju podaci koje su šifrovani. Onda isto tako postoji server-hello poruka, naredne poruki koje su okviru quicka, dakle ono što treba nekdje dan stojila u glavi, to je da ako vidite se nekdje koristi quick, da to nije ništa manje sigurno od ove klasične varijante. I to da, ovdje ima jedan grafik koji pokazuje, ovo ja mislim od pred 2 godine, pokazuje udeo ude P sa obraćaja prema guglu, to je ovdje, da je ovo slikano recimo pree 5 ili 7 godina, onda bi taj udeo bio veoma mali zgodno da se ne bi videla ova ljubičasta boja, a ovo ovdje vam pokazuje da upravo zbog toga što veliki broj koristnika koristi Chrome, koristi Googleve servera i da se pozadini tako nešto tihodešava, imate ovu situaciju da je tu udeo quick protocola bio prilicno značen. Ono što sam samo htevo da vam je oš pokažem i tu ćemo da naparimo pauzu malo je duži, ovaj prvi časel dobro, drugi će biti s razmenu kraći, to je da u potpunnosti, još jednom ponovimo šta je to što štiti TLS? Znači TLS je transport layer security, on štiti podatki dok se transportuje. I da bih vam to demonstriralo, sad ću da prebacim opet ovaj šer na drugi ekran, a taj drugi ekran će da vam pokaže ono što verujem da dobro pozneti, a to je ova stranica. Znači ako ja ovdje sad upišem neko koristničko ime, ovdje upišem neku lozinku, nešto sam ukucal, i ako tom prilikom uzmjom i uključim ove developeralate, a recimo, o ne što me ne zanimo, to je šta to putuje po mreži, i kažem, prijavi se. Kao što vidite, tu se pojavile razno razne poruke, naravno, on je, pošto sam ja u nobe zvezajim i prezimim, on javlja da je tu greška, međim, ono što me ne interesuje to je ova post poruka. Šta se o njoj nalazi, odnosno, na koji način je poslat moji zakat. Dakle, kao što možete vidite, u okru zahteva, imate ime koje sam ukucal, i imate lozinku koji sam ukucal. Dakle, ime i lozinka, su ukucani u clear tekstu, i oni su takvi predati browser. Browser onda te podatke, šifroje, onim ključajima koje smo videli, i šalje do web servera, i oni se na web serveru raspakuju. Dakle, web server će videti u izvornom obliku vaši user name i password. I to takvo funkcionišeno 99% siteva koji se koristite danas. Što znači da na svim onim sajtojima da ste ostavili svoju user name i password, neki tamo administrator može da vidi vašo kombinaciji user name i password. I ako imate tu finu praksiju da su da koristite isti user name i password, onda će moći da iskoristi, ako zna da koristite još neke naloge, moći će da proba da iskoristite tu lozinku na drugom mesto. Ovo to može da vas pogodi, može da vas ne pogodi, zavisi kakvu lozinku koristite, ali o svakom sluči treba to da znate. Postoje neki sajtovi, recimo Proton Mail, je jedan od sajtova. Proton Mail je web mail service koji takođe, kojoj mogućeva besplatan mail, samo sa daleko većim ograničenjem prostora, recimo nego Gmail, ali on funkcionišno tako sa svih podaci koji se čuvaju na serveru encryptovan i ada ključ posleduje koristite. E recimo, kot Proton Mail ako bi ste ovoprobali da vrodite što sam sad pokazao, to ne bi ste mogli da vidite, dakle ne bi se videla lozinka, zada što se lozinka šifruje veći okru browsera i u takom šifruvanom obliku se šalje na drugu stranu, tako da tamo neki zliadnijsak pro koji bi se to gleda, ne bi mogalo da iskoristite. Prosto ovo ga treba da budete svesni, da transport lež sa curiti i HTTPS znače samo zaštit upodataka u prenosu, ne i zaštit upodataka na krajnim stranama, znači one su na krajnim stranama raspakovanje i nalaze se u izbornom obliku. Naradna tema u okru kursa zaštit upodataka i autentikacija koristnika, odnosno prover unitiliteta i pruženje određenih usluga, uz avisnosti o toga kakvi su atributi to koristnika. To se često u engelskom, ćete naići na recimo skraćenicu AAA, kao skup merea koja se koriste za autentikacija, autorizaciju i accounting, odnosno beleženje toga kada je neko dobio pristup na ekom sistemu. I sad ovo deluje kao relativno prosto stvar, a i za ovoga se krije jedna dosta dukačka prezentacija kao što se videte koji ćemo raditi danas i na narodnom predavanju. I sad neko može da se pita pa šta se tu ima složena, malo presmo slušali o tome kako da zaštjetimo komunikaciju između browsera i web servera, a sa druge strane znamo da onda možemo da postavimo recimo, okru web serveru upišemo user name i password i onda izrušimo prover identiteta koristnika i pustimo ga ili ga nepustimo u sistem. I to zaista može da funkcioniše tako, ali je to relativno jednostavna situacija. Dakle, situacija u koje ste vidoši na ETF, na ETF odobili svoje kredicijale i ETF on proverila kredicijale je prosta situacija i tu verovatno onda tako, služenija priča ne bi morali da se napravimo. I miču ti, malo što se je po posljene vreme dešava, a što ste verovim i vi sami primetili, to je da ljudi imaju sve i više naloga, sve i više mesta da unesu svoj user name i password. I da bi bilo zgodno ako biste mogli da koristite neke objedinje na nalogi za veći broj servise. I sad tako nešto se zovemo, da se je učinila, tako nešto se zove single sign on. Ima te neki svoje kredicijale koje koristite za pristup različnijim sistemima. I nešto od toga ste već mogli da vidite kako funcija na nešto dakle. Veram da ste, postoji, ne, jedan sistem kome ste pristupili koji ostavlja ono mogućnost da ako hoćete da pristupiti u tom sistemu ili da kreirate novi nalog, znači da se kaže sign up.
 ili da se ulogujete na sistem korišćenjem kredencijala neku drugu sistema, naprim. tipečno Google, Facebook ili tako nečega. E tu onda ta cela priča postaje složenija i samo priča autentikacija i koristika autorizacija da se koristio različite servici postaje dosta složenima. Mi ćemo danas da uvedemo ovu priču, uvedi se autentikacijem koristika i pročićemo kroz neke dve-tri razmene koje su, da tako kažemo, od historijskog značaja koje su se pojavili negde 80-90 godina prošog veka da bi nam onda na redne nedelje tijucna tema bio Kerberos, što je mehanizam za autentikaciju koji se koristi u windows okruženjima i ovaj federativni način progred njela kredencijala gde možete pomoći jednog naloga da dobijete pristup većem proje sistema i nešto malo o samloprotoku. Dakle to su stvari koje činujete u sestem malo služeni. E sada sama autentikacija se stoji od dve fase. Prva fase je da identifikujete u kome reč, a druga fase je da verifikujete njegove kredencijale. Da smo da proverite to što vam je ondao, ti neki skupovi bita koji on postao, da on je zaista identifikuje odgoreći koristnika i da pomoći s toga možete da verifikujete da on ima pravo da koristi određene resursi. Taj koristnik koji se prijavljio na određenje sistem to on je neki subscriber claimant, odnosno neko koje upisam da može da koristi određenje sistem. E sada ako želite da koristite neki sistem, ne mora nužno taj sistem da proveri vaš identitet i postoje neki servicij koje mošte da koristite napr. Microsoft i koje mošte da koristite sa fakultetskim kredencijalima, ne znam za vašo imbraciju da ovo to važi, nakazam da je ranije važiv. U tako situaciji, ona i kova verifiku, znači ona i verifier kova verifiku je vaše kredencijale, neće biti ta firma koja vam pruža servis, ta firma koja vam pruža servis i tako zvani servis provider, a firma, naprim. Microsoft, ta firma koja vrši verifikaciju kredencijala je verifier, odnosno ona i ko posleduje bazu. Nijakom malo razmisite jedan od problema pri komau kredicacije koristika je to gdje se nalazi baza koristika i gdje se nalazi baza ono gda što je potrebno da bi se verifikovala autenticnost kod koristika. Na ime, krjučno, vjestno, gdje se baza nalazi. Znači ako se baza nalazi na ETF-u, onda ETF-taj koji verifikuje. Jako loša praksa bi bila da ako treba da pristupite neku Microsoft-on servisu da uzmete i da ETF-u uzmete i da da bazu koristika Microsoft-u. Prosto se ne radi iz mnogo razluga. Nego postoje sad neki mehanizm i o tome ćemo pričati dokom ovog dela prezentacija kojem sada taj pružovat servisa može da od onoga posleduje bazu da povuče informacije i da mu ovoj verifiku i da kaže da taj pera peri će on jesti studen ETF i on ima pravo da koristi Microsoft Office ili tako nešto. Znači ta razmena odnosno provera autenticnosti ne mora nužno da bude tako prostakau što je recimo na ovom sajtu koji smo videli na prave kredigubno privedavanja, dje vam ETF, dao kredicijala ETF proverio i sve se dešava unutar jedne firmu. Takođe proces registracije onoga dobićenje tih kredicijala može da bude relativno prost, tako je odvijete na Gmail sajt i tamo se registrujete i dobijete se što vam treba, a može da bude i malo služeniji, pa tako može da postoji neko mesto da se registrujete, da je vi odnesete vaše isprave, ličnu kartu ili šta već, na primer to se u našem sluči zove studenska služba, ta studenska služba vas upiše drži vaš dosije na fakutetu, a neko drugi vam generiče kredicijale, na primer tamo neko u raču u raču skoncentru. Naravno sve te sviti podaci treba da budu na neki način povezani kako bi ovaj u raču skoncentru znao koje smo je da izda kredicijala. Dakle, kao što vidite priča o autentikaciji koristnika može da bude prost, ali u poslednje vreme je tendencija takva da je sve služene i služenije i praktično autentikacija koristnika može da bude posebam poziv, može da bude možete da celu svoj karijeru posebiti tome imate firme koje se bave isti učivo timem, ne znam ako stvijučuli za verisek koji je nešto imao u poslnji vrem i kod nas imaju svoju koncelariju, imali su neke promene u organizacijnosti misli, ali to je firma koja je potpunosti poseće na samo izdavanju digitarnih kredicijala i proveri autentikaciji koristnika. Znači prosto to je jedna dosta služena priča koja koji ćemo mi malo da zagrebemo kako biste svatili šta su sve teme i o čemu se sve tu radi. Ja sam pomenuo, ja mislim u ovom delu prezentacije reč kredicijali bar jedno 10 puta, a nismo raspravili o tome šta su kredicijali, dakle kredicijali skup podatak ili struktura podatak koja povezuje neći identitet, način vas kao ličnost, sa određenim nalogom i povezuje sa nekim atributima koji imate, reći ako bi smo imali, ako bi smo mi ja i vi bili u istom nekom sistemu, ja bih imao atribut da sam profesor, bih biste imali atribut da se studenti i onda u rećim uspada sa tim atributima bi moglo da se odredi koja ima pravo da pristupi sistemu za upisivanja ocena, koja ima pravo da pristupi sistemu za samo začitanje ocena i za prijevu ispita. To su digiterni kredicijali, sad kredicijali mogu da budu svašta i verujem da znate što su vidite digiterni kredicijali, način način što digiterni kredicijali je nešto što koristih zna, nešto što drži poželjnu glaviji, ja ne napapiriću, a to je lozinka ili pin i to je ono što se koristije u najvijetšim brojih slučeva, zato što još uveke da kažem savršen i od nekih drugih načina za proveru identitet. I to smo nisto više puta tako komkursa komentari sali, ako je potreban više nivo sigurnosti, onda može da se napravi više fakturska autentikacija, da je će pored lozinki ili pina da se koristi nešto dodatno, napr. digiterni certifikat, privatni ključ, neka kartica ili, recimo, oni tokeni koje sam vam pominjao kada smo pričali o hmacfuncijama, dakle, nešto dodatno što će da dodatno potvrdi neči identite. Nešto što koristnik poseduje. Pa onda možete i to ste isto, u verovim posnjih par godina, ja verovim da svi imate sa telefone koji recimo mogu da se ključaju na otisep prsta i to je nešto što presta da biometrisku vašu karakteristiku, ujedinstvenu, taj otisep prsta, mežete im, pa onda može, imate telefone takođe koji mogu da recimo da slikate svoje lice i da na osnovu te slike dobijete pristup sistemu i postojeti sistemi koji koriste neke biometristike karakteristike koristnika, takođe sistemi koji koriste neke dinamiške biometristke podatke kao što su vaš glas, dinamika pričanja, podpis, dinamika kucanja i tako, dakle, možete da budete identifikovanje u raznoj način. E, sad dovi, ova dođe dva mehanizma, pa mislim, deluju na kosa uršenije, ali kako se pojave neki novi mehanizm u neku implementaciji, tako se ono pojave i oni koji ga prevare, pa sam ja recimo, sva skoro gledao, bio video jedan u kome su sistem za prepoznavanje lice, za odvečavanje telefona varali tako što što se pojave neko sa naučadima, zalepe čak selo te ipinaca, što je neke pačkice, to je glume oči i to je varalo, varalo, taj mehanizm za prepoznavanje lice, zato što su morali da ostave da može i neko sa naučadima da se ulugue, zato što suuprotom nebi ni moglo da koristi na primer telefon, a onda te nauče na neki način pokvare taj algoritm, odmast algoritm neprepozno to na adekvate način. Dakle, da, ovej, postoje različiti načini i različiti digitalne kredencijalni koji se koriste za prisput nekom systemu i mogu da budu kombinovanje. Što se tiče protokol, koji se koriste za autentikaciju, odnosno za proveridinitete, oni mogu da budu jednostrani, način u jednom smeru, a to je situacija u koje, na primer, ja vama napišem mail i vi hoćete da budete sigurni da je mail zaista doša od mene. Dakle, u tom slučaju, vi treba da proverite autenticno s tog maila i da ga povežete sa mnom, a ja to ne moram da uradim baš no driga, da da li će vas pet ili 55 da pročiti tu poruku. I sa druge strane mogu da budu uzajemni, a uzajemni smo videli na predhodnom času i na predhodnom predavanju, to je obično ona situacija u koje postoje dve strane, koje treba da razmene neki togaljski materijal, ključeve, pa treba jedna drugu da izroša autentikaciju i jedna druga. I to je ono što je ta druga vrsta, znači uzajemne autentikacije. Ono što treba da autentikacijani protokolo bezgledi, to je tajnost. Znači treba da nekako sa strane posmatra tu autentikaciju u razminu ne može da dođe do bilo kakvog podatke koji bi imamo moguće do dobiya pristup sistemu neovašćena. I ono što je bitno isto to je da se spreče replay napadi. Šta su replay napadi, to smo videli i već smo komentari sali, i tu postoje različite variante replay napada, varianta u koje se v neka poruka ponavlja bilo kada, al može da proizveda negativa nešta kad. Varianta u koje se neka poruka ponavlja unutar neku vremenjskog intervala ako su poruke vremenski ograničene, pa onda je poruka...
 koja se šalje u nazad, znači, recimo, ja sam dobio poruku od nekog od vas, pa onda ja vam vraćem i tako vraće na poruku izazove određenje. Efekat, znači to su sve različite varijante replay napada, ali suština je da se neka poruka koja se već pojavila, ponovir. E sad kako se to sprečava, jedno varijantu smo videli, to je korišnjenje monih nonsova i videli smo ja sam pokazu jednu šemu, kako ti nonsovi funkcionišu, kako bi se sprečuju replay napad. Prosto za svaku razmenu je različita vrednost nonsa i onda ako bi se ponovila neka poruka, taj nonsovi već vreć izte, kao i ne može da se koristi. Druga varijanta bi bilo da se koriste sekvencijan i brojavi poruka, da su poruki numerisane, ali se takva rešenje izbegavaju, zato što treba onda, ako neki sistem ima jako veliki broj koristi, kako čija se autentikacija vrši u nekom trenutku, onda mora da pamati stanja svih autentikacijunih sesija, to troši memori u procesu vreme i tako nešto se ne koristi. Ono što je zapravo druga varijanta koja postoji za sprečavanje replay napada, to je korišnjenje vremenstvih markera. Dakle, da poruke imaju u sebi upisano vreme kadosti u grinerisane ili koliko važe i da onda na osnovu tog vremena se odredi, da li je poruka ponovljena i nimi. Ono što je problem sa vremenstvih markerima, to je s njiharnizacija časanje. I sad idete ćemo neke šeime, to ćemo pokazati, pa ćemo onda pro komentari se ti malo detaljnije tu varijantu za sprečavanje replay napada. Ono sa čim ćemo krenuti i danas se nećemo, kažem, nogu duboko uvaciti u priču autentikaciji, to su 3-4 historijska algoritma za proveru, autenticjosti onoga s kim se komunicira. I ono što je interesantno, mogu da ćemo se opet vratiti na simetrične algoritme. Ja sad zašto si vraćemo opet na simetrične algoritme, kada vama u glavi verovatno stoji da se simetrične algoritmi sami po sebi, ako nešto, decimo, podpišeno privatim pjučem ili šifremu privatim pjučem, to samo po sebi potvrđuje neka autenticjnost određeno koristika, imamo već u samom algoritmu. Pa iz prostog razloga što kažem, danas pristoji jedan sistem, a to je taj Kerberos, koji Microsoft koristili, koji u potvrnosti zasno nas simetričnih algoritma. I videte ćemo koje priče za svega toga, odnosno zašto je sve to takvo, ovaj tako da ćemo krenuti lagavno sa ovim autenticacijemnih mehanizmem. I ono što ćemo sada vidimo, je jedan mehanizem za autentikaciju, koji smo zapravo već prošli u jedna od pretrubi prezentacija, konkretno u prezentaciji broj četri, kada sam ovom pričao o razmeni ključeva. Upotreba simetričnih algoritama je problematićna za proveru neći autenticnosti, zato što simetričan algoritam posledu uvek dva entiteta. Što samim tim je problematićno, zato što dva entiteta mogu da ginerišu istu poruku i onda je problem kako nekako potvrditi neći autenticnost. I ono što smo videli tada u toj prezentaciji broj četri, to je da kada se koriste simetrične algoritme, jedno od rešenja kako bi mogli da se izbrši razmeni ključeva korišnji isključi u drugih simetričnih algoritama, jeste da postoji neki centar za distribuciju ključeva, kom je svi učestnici u toj razmeni veruju. Znači mora da postoji taj neki KDC. I jedna od šema koje smo tada prospubirali je tako zvanim, eto, tad nisam rekao, ali sada ćete saznuti kako se zove, tako zvanim, nidam šrederom protukom. I ako se sećete ta slika za nidam šrederom protukom izgleda, da je ovako nekako, postoja su tri entetak koja kumiciraju, postoja KDC, postoja A i postoja B i sada ako ste se već počili da se spremljate zakolo u klju monoste verovatno o vušemu videli i poznatavani. Znači kod nje u prvej poruci A se obraća Kiddy's in Bushin Centru i kažem u ja sam A, hoću da pričam sa B, ovo je nonz, jedan kojim ja obeležavam u moju transakciju. KDC mu odgovara porukom koji ima dva dela, prvi del A može da razume, zato što šifron tijučim koji razumeju KDC i A, tu se nalazi sesisk i ključ, nalazi se identifikator B i vraće se ovaj ovde nonz, nači čima je potvrda da je ovo odgovor na njegov zahtem, a u drugom delu se nalazi nešto što A ne razume, a či ovo je poruka broj 2, a to što ono je razume je šifrovo na ključom koji razumeje KDC i B, tu se nalazi sesisk i ključ i tu se nalazi identitet toga A. U treće poruci A samo prosleđuje ovoj del poruki prema B i onda u poslednje dve poruke A i B potvrđuju, da su korektno razmenili taj sesisk i ključ. I mi smo ovu razmenu tada koristili u kontekstu razmene simetrično ključe, zato što jedna od stvari koja se dešava okvirove razmene je zaista razmena tog sesiskog ključa, koji dobijaju i A i B. I oni nakon toga mogu da šifruju svoje podatke simetričnih ključa. Međutim, ono što se ovde dešava, takođe, a što nismo tada malo detaljne komentari, ali to je da se okvirove razmene razmenju i neki identitet i A i B i da implicitno izasvega toga stoje ključevi A, ključ A i ključ B, koji zna KDC, koji nekako je entitet odpoverenja, koji me veruju i A i B. I zapravo, okroz cej avaj proces, A i B su sigurni, mogu da veruju da su zaista dobili ključ, koji samo oni razume. Esad, znači, u suštini imamo šemu koja predstavlja šemu za proveru nećej autenticnosti, pori toga što razmene ključe. Međutim, ova šema ima jedan problem. A šta je problem u ovaj šemi, sad ćemo da proanaliziramo, malo ću samo da rasterepim svih kovo ovom delu. Problem je ovo ovdje poruk. Samo moram da je označim. A to je poruka broj 3. E, sad šta je problem sa porukom broj 3? Pa evo sad možemo da zamislim u sljedeću situaciju. Recimo, neka je ovo, neka firma X i ta firma X ima politiku tako da registruje sve svoje zaposlene, ovaj A i B, C i D to su zaposleni, da ih registrujano 3.5 zaposle i da recimo dofligoći zaposleni, naravno imaju svoj nalog, imaju svoje ključeve creiranje, okviru kadicea. Recimo, politika je da se svakih godinu dana osvežavaju tih ključevi koji ima svaki od zaposlenje. E, sad, ako su A i B, neki entiteti koji svakodinu komuniciraju, može da se napravi politika, pošto se ključen KS šifruje veće policina podataka, da taj ključ KS mora svaki dan da se zamijene. Što znači da svaki dan treba da se napravi jedna ovakva NIDAM-SHEDEROLA razmena, da bi oni svaki dan imali novi ključ KS. E, se zamislite na pavdača, koji zna kakva je politika firme i koji dođe i snimi, recimo 1. januara, snimi ovu poruku broj 3. Znači on, naravno, ne može da vidi sadržajte poruke, zato što je ovoj nezna ključ KB, snimi sadržajte poruke i sad krene, znači posleduje veliki broj procesora i krene da brute force-om napadne taj ključ KS, koji je nastal 1. januara. I, on sad potrebljava svoje mašine, on brute force-om napada, kako će to da radi, tako što će komunikaciju između A i B, koja se kasnije šifre tim ključom toku 1. januara snimiti i onda će pokošati brute force-om da dođe do neku sadržaja koji ima snicita. I recimo da predpostavimo, da negde 20. decembra te istegodine, on uspe da otkrije, koji je ključ KS, koji je korišćen 1. januara. Ima gotovo godinu dana i vremena, da brute force-om napadne taj ključ KS, naravno, zavisi od algoritmu, zavisi od njegove procerarske snage, ali možemo da predpostavimo tako scenari. I sad ako je to u radir, ono što napadač može da u radi, to je da 21. januara, nekako on, recimo, a, skinne sam reže, ili recimo sačeka da, a, ako je a nekako osedije za svojim stolom i recimo, svaki dan radi od 9 do 5, a, odlazji u 5 cati po podne kući, a ovaj ostaje tu da radi, duže, taj napadač i predstavi se kaa, poveže se na njegovom mestu, šta godi u radi, znači to je neki M koji se predstavlja kaa i taj M ponovi ovu ovde poruku, ali onu poruku koje snimlja na 1. januara. Znači, napadač i dalje ne zna ovaj ključ Kb, ali napadač i uspio da otkri ključ Ks i on se javlja ovome b. B će pročitati da je u pitanju a, znači mislite će da mu, pošto razume b ključ Kb, pročitati će da je u pitanju, da mu piše a, pročitati će sesijski ključ. Šifrova će non s sesijskim ključem i poslaće nazad, a sad pošto taj sesijski ključ zna ovaj napadač, da vršiti taj handshake i b će misliti da komunicira sa a. Dakle, u jednom takom slučaju, ovaj nidam šeder protokol je podložan određenoj vrsti ripli napada, u kojoj napadač, ako uspenda dođe dobilo kog od predhodnjih sesijskih ključeva, može da prevari ovoga b, odnosno
 metu da tako kažem, ove komunikacije, može da ga prevari i da se predstavi sa lažnim identitetom. I to je jedna od mana ovog protokola, pa su onda bile predložili neki variant i kako bi ove protokole mogli da se pobojša, kako bi se ovakam način napada na njega spreči. Pa prva promena koja je urodjena, to je ova šema koji je predložila Denning, naučnica koja se u to vreme bavila o šifronjem. I da vidimo što je tu urodjena. Ove nema neke velike suštinske razliki odnosno na predhodnu šemu. U prvoj poruci a se obraća kdc i kaže ja sam a hoći da pričam sa d, ono što ovde nepostoji to je non-svrednost, ali vidićemo da se celo ovo šema ne oslanja na non-svrednosti u tom prvom delu. E sada kdc je odgovoriti porugom koja je gotovo identična kao ova poruka malo pred, znači to je poruka koja je šifron na ključen ka a koji razume samo a, tu se nalazi sesijski ključ, tu se nalazi identite to onoga s kim može da se razgovara, tu se nalazi ova ideo koji a ne razume, a ona što je dodatni element to je ovo ovdje t, to t označava vremenjski markir. Znači, e osad prvi put vidimo jednu šemu u kojoj poruka ima vremenjski markir. Ta i vremenjski markir može da bude na više načina implementiran, to može da bude vreme kada je generisana ova poruka, s jedne strane može da bude s druge strane vreme do kada važi ova poruka, a s treće strane može da bude i obete informacije zajde, znači na primjer da se kaže ova poruka i kaže ova poruka je generisana 29. april 2021 u 17.47 i ova poruka važi do 29. april 2021 u 17.52, na primer ima važenje dužine 5 minuta. Znači, ovde nemo korišćinje nonsa, nemo korišćinje slučenih vrednosti, nego imamo ovremenjski markir koji ograničova trajnje te poruki, a ono što je bitno to je da i ovom delu ovdje koji se u treći poruci isto kao i malo preprosledžuje prema entity tub, postoji taj isti vremenjski markir. E sa šta ovo znači? Ovo znači da ako bi sa napadačo, o kojme smo pričali, hteo da primeni onu metodu, a to je da neki od starih ključeva koji je dobio 1. januara provali i snimi poruku koje generisana 1. januara, ako bi tu poruku hteo da ponovi 20. decembra, onda bi ovoj b na osnovu time stampa, na osnovu vremenjskog markira, mogao da kaže, e ova poruka nije važići. Ova poruka je istekla. Sam za vršetak razmene je potpunno identično kao kojd nidem šederove razmene. Ovdje, ono što imamo ko dovoljku u blješanja, to je da su u početnom delu izbačeni nosovi, ali da se ova razmena oslanja na vremenjski markir. E sad, to vuči za sobom neke probleme, a jedan od probleme je taj da svi entity i onda u ovom sistemu moraju da budu vremenjski synchronizom. Ne smedno da se desi da moj računar ima sistemstvj koji kasni sat vremen, ako je relativno kratko vreme ovih time stampova. To ne bi smelo da se desi. E sad, to može da se reši i postoje protokol i koima se ovo rešava. Jedan tako protokol je NTP protokol, Netrup Time Protokol koji ako se podesi na bilokom uređaju, biće tačno vreme unutar jedne sekunde, čak unutar nekoliko desetina milisekundi, znači to ko će varirati klokowi na mašinama. Naravno, svaka mašina ima svoj klok koji ima neke drugače karakteristike i ta vremena se razlikuju, ali posled neku vremena se pomoću NTP-a svi sistemstvji klokowi drže, ako pripostaje unutar jedne sekunde, to je zaista za ove potrebe sa svim dovoljnih. To i način da se to izvede. Ali opet z druge strane, ako postoji tako protokol koji obaveštava uređaja i o tome kakve vreme, onda možemo da zamislimo scenario u kome će sada napadač da postavi svoj uređaj, koji će biti izvor takog vremeva i koji će obaveštavati u pogrežu našom vremenu neki identiteta i na taj način pokošati da ih prevari. Dakle, da li ćeš se koristiti non-sove ili vreme, je priličo sve jedno i jedne i druga varijanta, da ima neke svoje prednosti i neke svoje mani. I vidićemo, kad Kerberos se koristi i jedna i druga varijanta, kako bi se postigla dodatna sigurnost. Ali prosto morate da budete svesni toga da postojanje vremeniskih markira, posebno u situacijama kada su trajanja ovih poruka postavljene da budu relativno kratka, da se mjere naprvi da budu minut jedan, ili tako nešto, zahtevaju preciznici hormizaciju Klockova. Takođe, ove dve še mes uznačenje, a to ćemo, ti mi ćemo se daveiti narodne nedelje, ono su ne, nego za dve nedelje kada bude bilo narodne predavanje. Jednom od važnih elementati to je ove je delo poruke ovdje. Opa, pograšno, tvoj pislim. To je ove je ovde delo poruke. To je delo poruke koji A dobija od KDCA, koji A ne razume i ne može da protumači, da prosleđuje, da bi ostvario nešto ko dolog B. To se vidite, ćemo ko KERBERO se zove tiket. Znači to je neki skup bita koji određen unititet ne razume, ali koji prosleđivanjem takog skupa bita može, pod neku drugog unititeta da dobije određen ustup. I to ćemo isto viditi, da je to koncept koji je preslikan kasnije i koji se koristi ko to KERBERO sa okome ćemo pričati na narodnom predavanju. E sad, pored ovog pobližanja koja je predložila Denning, postoji još jedno pobližanje, a to je nojmanovo pobližanje, s tim što ovo sad što vidimo i jedna potpuno drugačije razmena, koja je potpuno izvrnuta na glavačke, da tako kažem, drugačije koja koristi i vremenski markere i non-svrednosti. Pa ćemo malo samo da prostuliramo tu šemu kako ona funkcioniša. Znači ovde za razlik od predkodne šeme je da se A obreća KDCA, ovde se A obreća drugo istranje i kaže, ja sam A, hoći da pričam s tobom, ovo je neki moj non-s. E sad B se onda nakon toga obreća KDCA i kaže, ja sam B, ovo je moj non-s i šad je poruku u kojoj šifru je svojim ključem, koji koriste ON i KDCA i u toj poruci se kaže, sam nam hoći da priča A, ovo je njegov non-s i ovo je trenuta kada ja gini rješem ovaj zakat. Pa onda KDCA koji je dobio informaciju da A hoći da priča sa B, šad je del poruki koji je naminjeno ovom je A u kome kaže, B me je kontaktirao, koristio je ovaj non-s i to je vesad da bi ja znao da je u pitanju vista transakcija, evo ti sesijski ključ da komuniciraš sa B i ovo je vreme kada je B gini riješao svojim poruku. I gini riješi drugi del poruke u kome se nalazi poruka za B, znači šifrova ne ključem B, u kojoj se kaže IDA, znači s tovom hoći da priča, sa ključem KS, znači to je vas sesijski ključ, i ti se mi poslo poruku u vreme B. I nakon toga, A, ovoj del poruke prosleđuje prema B, A u toj poruci je bio i ovaj non-sut B, a prosleđuje ovaj del poruke i B može da verifikuje, da je to zaista A, sa kojim on hoći da priča, da je to odgovor na njegu u poruku koja generisa u ovo ovde vreme i da je dobio ključ za komunikaciju sa A, a ono što je dodatna potvrga, to je da je tim sesijski ključem šifrovan ovaj ovde non-s koji označava zapravo da A posleduje tačno taj određenis sesijski ključ i na taj način je izbršena sigurna i razmenat ključeva i provera identiteta A i B. Dakle, ono što je pojenta, ovde evamo, videli smo neke 3 variante kojima može da se izvrši autentikacija, odnosno provera identiteta koristnika korišljeni simetričnih algoritama, ali oni uvek podrazumevoju postojanje kidit segrušnj centra i ono što je dodatno bitna stvar, to je da mora i da se spreče replay i napadi i da se za to koriste dve strategije i vrlo često kombinuva nekao što imamo na ovaj ovde sljici, dakle koriste se strategija i korišljene nosova i korišljenja vremnitskih markere. I dobro, to su bili primjeri dvostorene autentikacije korišljeni simetričnih algoritama, da smo kroz ovu priču pokušali da istaknemo neke bitne probleme koji se javljaju prilikom ovakvih razmina, ono što je još dodatno može da postoji to je jednostrana autentikacija gdje opet kovorimo o tom primjeru ja vama šalje mail a vi hoćete da se uverite da je taj mail došao baš od mene. E sad kod jednostrana autentikacije, prime na vremnitskih markere problematićno, posebno recimo za ovaj primjer, zato što ja recimo, ja sad mogu da gineriše mail i vi koji ste tu sad na predavanju, viste dobili, zatajat ću dobiti mail od mene i proverili ste godem. Višti, timo one vaše kolega koji nisu sad na predavanju, koji sad može da putuju negdje ka svoje kući koji pošto nam sledi praznik i koji neće da otvore i da pogledaj suvoj mail na tri dana, na primjer. Znači treba da mogu da provere moju autentikaciji za tri dana. E u tom smislu je korišćenje vremnitskih markera problematićno, zato što ako bi smo ograničili tu proveru vremnitski, onda bi značilo da neko recimo ko gledamo...
 moj mail sutra već ne bi mogu da provere autenticnosti, veko bi nešto niju redi sa ovim, zato što su ove poruke već istekli. Znači, kod jednostrne autentikacije se vremenski markeri ređe koriste i ovde imate jednu šemu koje vam pokazuje kako može da se pošadja neka poruka koričnjenim simetrišnijih alkoritama, gde bi ste vi se uvrili da sam tu poruku generisa albaš ja, a to je takvo što ja pošadim poruku nekom je od vas, kažem ja sam a, hoće o pošadim poruku k b, ovo je slučajna vrednost n1, kiditi se bi jušno centrami odgovoraj ključim koji samo ja razume i šaljem i sesiskij ključ, vaš identitet potvrdu da je reču o istoj transakciji i šaljem i tiket za vas, a onda ja vama šaljem tiket koji vi razumete zato što ima ključ k b iz koga ćete bi pročitati sesiskij ključ i moj identitet i šaljem vam poruku koja je šifrova na tisit svesiskim ključom, znači vi kada ovo dobijete, vi ćete pomoći ovoj sesiskog ključa koji samo vi razumete da otvorite u poruku i da znate da je ona došla od mene. Znači ovo je primer jednostarne autentikacije, u ovom primeru jednostarne autentikacije ja ne moram da proverim vaš identitet, jer mi to nije bitno, jer ja vama u jednu smeru šaljem poruku. I dobro, tu ćemo stati za danas i za ovu nedri, za ovu predavanje.
