 Na prošom pridavanju, poslednja stvar koji se vam ispričao, je bilo ova treća varijanta kako objaviti javnik ljucheva i tu smo u poslednim delu tog pridavanja malo diskutovali o tome šta je problem, a konkretno cela diskusije počela od toga zbog čega nas dolazi do meni da nidl napada, pa smo diskutovali kako objaviti da se neće javnik ljuchevi na bezbeda način dodelene, odnosno pošadju nekom, je tako da taj ko dobije neće javnik ljucheva može da bude siguro na koga čiji je to tačno javnik ljucheva. I došli smo do ove šeme koja zajista pruža tu vrstu sigurnosti, ali smo tada prodiskutovali takođe da prilikom proveri identiteta zapravo čak i u našem realnom svetu ne učistuju samo dva entiteta, to je ona i koja došao i čis identitet proverava i ona i ko vrši proveri identiteta, nego uvek postoji implicitno i neka treća organizacija, ta treća organizacija je ona organizacija koja izdaje neki dokument odnosno neku vrstu sertifikate koja je ta osoba koja dolazi. I tada smo malo pričali o tome kako je to funkcioniše, kako je te u banku, pa neko pogleda vašu ličnu kartu i proveri vaš identiteta. I onda smo ove videli jednu tako varijantu gdje postoji autoritet za javni ključeve i razmatrali smo ovu ovde šemu i rekli smo da ova ovde šema, znači sve ovo što se desa ovih sedam poruka, uloga ovih sedam poruka je da ovaj inicijator a dobije javni ključ od b i da bude siguran kada je dobil ovde i da bude siguran da kada je dobio da je to javni ključ od b, da taj ključ pripada baš b, a zašto je siguran? Siguran je zato što veruje ovom autoritetu za javni ključeve i zato što je uspeo da ono što je šifrovano privatnim ključem ovog autoriteta za javni ključeve desifruje njegovim javnim ključem i samim tim, to znači kada imamo nešto što je šifrovano privatnim ključem, to znači da se time potvrđuje po reklo, odnosno koja generisao datu poruku. Dakle, to bi bilo ekvolentno tome da se dobili ličnu kartu nečiju i vidite da je zaista ona deluje da nije niko krivatvorio, nego deluje da je autentićna i da je zaista mup Srbije ko me verujete izdao tu ličnu kartu. I takođe, u suprokom smeru ono što se dešao, to je da se ovaj ove ove 5. poruci, ovaj drugi učistnik u komunikaciji b, on dobija javni ključ o da i posto cele ove razmene nakon što postoje ove na kraju potvrde u 6 i 7 poruci, sve ono što se desilo je samo to da su a i b dobili javni ključeve oveg drugog učistniku u komunikaciji, dakle a je dobio javni ključ od b, b je dobio javni ključ od a. A rekli smo na prošljom času da je problem koji je postojeva koje done trivialne merklave šeme taj da tu zapravo nije postojeva da ta vrsta garantije čiji ovo javni ključ i zbog kog je dolazila do meni do meni napada. Sad kada se ovo desilo, sada praktično tek nakon ovoga može da počne razmena ključa. E sad ovo akva šema, kako ovde vidite, ona jeste dobra i tu nema u tehnikom smislu nikakve zamerke, ali ona ima jedan problem, dakle ona kako ih reko nije životna, odnosno, ona bi bila equivalent na sledešoj situaciji. Odlazite u banku da podignete pare. Službenik na šalteru uzima vašu kartic od banki i uzima vašu ličnu kartu da proveri vaš identitet. I onda kada uzma ličnu kartu, onda zove policiju da proverava dali je ta lična karta, baš ta lična karta i vrši neku dodatno vrstu provere. Dakle, taj autoritet koji je izdal ovaj dokument na osnovu koga se potvrđuje neći identitet, se u praksi nekontaktira. Mi nećemo zvati predliko svake proveri identiteta policiju, pa da sad mi proveravam od alije data lična karta autentićna. Nego prosto to me se na neki način veruje, na osnovu toga kako izgleda sama ta lična karta, dakle deluje da je ispravna, deluje da je stvarna, deluje ona slikano ličnu kartu liči na osobi koje došla i mi onda verujemo da je to to. Sa neko bi mogalo da diskutuje da to baš i nije suviše dobar način za proveri identiteta, naravno u onnim situacijama gdje je potrebno bolje proveri identiteta, rade se i neke dodatni proveri, pa oni koji su putovali po nekim zemljama znaju da će nekde na nekim granicamo i da vam uzmo otiske prstiju i tako stvari, da prilikom dodale vizir, recimo za veliku Britenići takođe da vam uzmo otiske prstiju pa će i to da provere kao dodatna vrsta proveri identiteta. Ali u svakom slučaju, ova šema je dobra, ona radi, ali je problem u tome što ona podrazumeva da prilikom svakih transakcija, odnosno prilikom svakih razmene ključeva vi treba da kontaktirate neki taj autoritet za javne ključeva. To je problematićno prvo zato što vidite da ovo traje, dakle, ova razmena cela traje, ima 7 poruka i ako zamisli te recimo da su ova tri identiteta na različnijim tačkama na internetu, svaka poruka može fizičkih treba, na primer, 100 milisekundi da prođe, pa do sami uređe i nešto obrade, prosto to traje i onda bi cela taj proces bio relativno spora. Druga svar koja je problematića kod ovakve še me, što kad god vidite ovakvu šemu gdje kustoji jedan ovakava autoritet koji je centralizovan, pomese svih obraćaju, tako tačka je ono što se na igleskom zove single point failure. Ako ta tačka crkne, ako ta tačka iz nekog razloga nedostupna, bilo zato što se nešto pokvarilo, bilo zato što je neko napao, onda i peviše nemaju mogućnost da provere identitet jedan drugog i oni više ne mogu da komuniciraju i to nije dobro. I onda su ljudi razmišeli kako da se to razveže na neki način, dakle da se ne radi ta obave za da morate da imate nastavnoj vezi ovo telo koje izdaje, koje izdaje taj digitalni identitet, odnosno, vrši potvrdu toga čiji ovo identitet. I došlo se do onoga što se danas i zapravo korist, jer to su sertifikati za javniki uče, odnosno tako zvanje digitalni sertifikati. E, digitalni sertifikati su potpunipandan onog što je lična karta i nešto je što se tiče sami digitalnih sertifikata, tu nema neke velike mudrosti, digitalnih sertifikati je file, dakle to je niz neki bito sa određenom strukturom i mi ćemo detaljno raditi za nezadlju dve konkretnu strukturu X509 sertifikata pa će vidjeti, tačno povisu delovi tog sertifikata i šta su sve elementi koji tu postoje, pa će ti zmjeći ostavu vidjeti, recimo, i kako je neči identitet definicen u opiru tog digitalnu sertifikata. Ajde da vidimo što znači posledovanje digitalnih sertifikata i kako stvari funkcionišu sa digitalnim sertifikatim. Ovde imamo dve stvari, odnosno da kažemo ova provar identitete se vrši u dve faze, prva faza je na gornim delu odstike, druga faza je na donjem delu odstike i ono što se dešava to je sledaći, znači ovo je ovdje a u nekom trenutku treba da se te registruje kod sertifikacijenohtelo. Ako je neko od vas to radio, onda zna, recimo da ako hoćete da aktivirate digitalne sertifikate koji postoje na vašu lišnom karti, morate zakažete od ovdje za kumup i onda odete tamo i tamo na lice mesta uzmu vašu ličnom karti urade neku magiju, videte ćemo koju, kada dođe vreme, i vi imate aktiviran na onom čipu koji se nalazi na velično karti, vi imate aktiviran digitalne sertifikate. Tom prilikom se naravno generiše park ljučeva, to su vaš privatni i javni ključ, pričemu je vaš privatni ključ na samoj kartici, dakle smeštenje u oku i u tog čipa, a javni ključ se smešta u digitalni sertifikat. E sada ovde što vidite, ovo ovde što vidite, je jedna ovako svedena i pojednostavljena forma digitalno sertifikata. Šta se u njoj nalazi? U njoj se nalazi, ono najde najosnovnije i što postoji, to je identitet, to je vaše ime i prezim, ili to je vaš ime i adresa. Zatim druga stvar koja se nalazi u digitalno sertifikatu, to je javni ključ vaš, koji je vezan za ona i privatni ključ koji je generisani, koji se nalazi na samoj kartici. I na tom digitalno sertifikatu se nalazi vreme. E sada vreme, ne treba mnogo da oštudi, znate i sami da, recimo i lična karta, ona ima neki svoj rok trajanja koji je deset godina i prosto sa istekom ličnog karte ona mora da se zameni i ona više nije važići. Na isti način digitalne sertifikati imaju svoje vreme kad su generisan, imaju rok trajanja i nakon isteka tog roka trajanja, digitalne sertifikati više nije važići. E, način te tri stvari, a vidite ćemo, kada budemo došli do Xp109, vidite ćemo tačno što su svi elementi koji postoje u digitalno sertifikat. Ovo je sada jedna pojednostavljena slika. Način ta tri elementa, vreme, kada ističe digitalne sertifikat, identitet čijet o digitalne sertifikati i njegovijavni ključ su kryptovaniji privatnim ključem sertifikacijonog tela. Šta to znači? To znači da sad, kad ovaj A preuzme taj fil, ako hoće neko me da kaže, ja sam A i ovo je moji javni ključ. Ono što on treba da uradi, to je da pošalje to.
 entitetu svoj sertifikat, odnosno taj file koji se sastoji od ovoga ovde. I tim je će ovaj B moći da pokupi njegov identitet i njegov javni ključ, a verova će tome da je u pitanju stvar koje je autentikšno, zato što je ona kryptova na privatni ključ i sertifikacijeno tela, odnosno u koliko on uzme javni ključ, sertifikacijeno tela i deshifruje taj digitarno sertifikat doćiće do ispravnih podataka koji su mu potrebni za komunikaciju sa ovima. Ova se šema suštinski nerazliku u jednosno na predhodu šemu, ali razlika u tome što u ovoj šemi se ovaj ovde proces dobijenja digitarno certifikata deshava u nekom vremenu pre same transakcije, odnosno pre same razmene ključeva. Ovo ovde može da se desi na primer januara 2021. godine, a da onda ovaj ovde je ib kada hoći da komuniciraju, komuniciraju na primer u martu da je i ste godine. Dakle, to su dva procesa koji su potpuno nezavisna i kao što možete da vidite, ovo ovde promer, ovo razmena identiteta koja se deshava, ona ne uključuje postojanja ovog sertifikacijeno tela, ali to sertifikacijeno telo implicitno uključeno u ovu razmeno identiteta kroz to što su sami sertifikati podpisani do tako kažem, privatnim pljučom sertifikacijenog autoriteta. I to je princip kako se koriste digitane sertifikati, ja nažalost neću moći da vam ispričam sve detalja o digitane sertifikati, ima zato što nam falaj još neki elementi, odnosno još neke funkcije kritografske koje se koriste da bi se formirali digitane sertifikate, tako da ćemo to uraditi kada prođemo ove heš funkcije koje ćemo danas započiti i mesič autentikejšnog hodome, onda ćemo u potpunosti napraviti sliko. Za sad svatite ovo na konceptualnom njugou kako funkcijonišu sertifikati za javne ključe, jer to je zapravo ono kako se danas vrši provera identiteta učestnika u komunikaciji i ono što se smatra danas za absolutno ispravan način, tako da proverite neću identitet kada dobijete neko informaciju koja dolazi preku interneta, što naravno sešno dolazi preku interneta je podložno raznoraznim napadima i raznoraznim modifikacijama od strane hackera, odnosno raznoraznih zlik ljudi koji mogu da žele da napadnutu vašu komunikaciju. Dobro, dakle što stiče distribucije simetričnih ključeva pomoću javnih ključeva, onda može ako je na isprava način distribuirano, ako je isprava način, da su distribuirano javnih ključevi i znate, točnosti dobili neči javnih ključ, onda je dalje stvari jednostavna i sad se nećemo vaviti konkretnim razmenama ključeva, to ćemo uroditi na primjero tl. tl. web security kada dođe vreme i na primjero ipc, ali u principu nakon toga može da se izvrši bilo kakva razmena ključeva, pa čak i ona trivija na Merklova, ako smo sigurni da ona javnih ključ koji smo dobili je zaista javnih ključ tog z kim želim da razgovorati. Dobro, dakle to bi bilo to o razmeni ključeva na konceptorom nivogu, a sad ćemo da vidimo jedan od algoritama koji se najčešće koristi za razminu ključeva, to je algoritem koji se zove Diffy Helmanov algoritem po dva autora koji su ga napravili i ove algoritme je malo stariji od eresa algoritma, on je nastav 1976. I to je zapravo prvi algoritem koji je zvanično prihvačen kao algoritem koji koristi tu asimetričnoj krypti koji koristi ovaj isti matematički aparat koji se koristi kod eresa algoritma. Sad ćemo da vidimo kako funkcioniše, ove algoritem nije teško za razumevanje, takle koristi se ista ona operacija ekskonicijacije po modulu, ja ću preći odmena sam algoritam, pa ćete, kojroz algoritemi, kojeg ćete videti, i mislim da ćemo biti u potpunosti jasno. Za razlik po odere sa algoritma, kod koga treba da se pronođe oni brojivi p i q, pa da se gyneliši droj n, takle gde je to neki put, kako funkcioniše sam algoritem i gde je uslovda taj broj n, a to je ove broj po čiji modulu se raču na ekskonicijacija brojeva, taj broj n treba da bude proizvod dva proste broja, kod difihelna algoritma stvari je malo drugačija. Dakle, opet mora da postoje jedan jako veliki prost broj, i to je ovaj prost broj q, znači to je prvi element difihelna algoritma, i taj prost broj q je nešto što je poznato o bemo učistnicima u komunikaciji, i mora da postoji još jedan broj, a to je broj a, ja ne znam da što ovdje ne stoji na slajdu, ali u svako slučaju, aha, odnosno broj alpha, ajde da ga je ovdje ovako dopišam, pa ću posle ispraviti prezentaciju, znači, i mora da postoji broj alpha koji je primitivni koren od kuku. Ja sad malo ću osposititi šta je primitivni koren, ako imamo prost broj q, njegov primitivni broj je takav broj koji kada se digne na sve stepene od 1 do q-1 će dati različite ostatke prilikom delinja sa q. To vam je pričano opirone prve prezentacije koje se odnosno te matematičke osnova, jer recimo, ako uzvomimo prost broj 90, prost broj 90 da njega primitivni koren je broj 3, zato što kada dignete 3 na prvi pa sve do 3 na 18 i radite delinje sa 19, odnosno pomodulo 19, dobićete različite, značite za svakot uvrednost različiti eksplonenta, dobićete različite rezultate te operacije. A recimo broj 4 nije primitivni koren, zato što on neće dati 18 različiti ostatke, nego će on dati svega del. E, dakle moraju da ta dva broja moraju da imaju ovakam, ovaj specifican uslo moraju da bude ispunjena, to je da postoji broj q koji je prost i broj alfa koji je njegov primitivni koren. I sada imamo dva učestnika u komunikaciji, ono što učestnici u komunikaciji dele, to su ta dva broja, broj vi alfa i ku su broj vi koji su javno dostupni, znači to nisu nikakvi tajni broje. E, sada koristika radi sledeći, izabere neki slučajan broj xa i izračuna ovom, y na jednako alfa na xa pomodulu q. Znači broj xa treba da bude manji od broja q, ono što će dobiti, to je broj y na koji je takođe manji od broja q, zato što svaki ostatak prilikom deljine sa q mora da bude manji od q. Pa onda slično tome, na drugoj strani koristnik b izračunova ovo ovde, znači on opet uzima nasumice jedan broj xb koji je manji od q, izračunova ovo yb da je jednako alfa na xb pomodulu q. E, sada vrednosti xa i xb su tajne vrednosti i xa ostaje kod a, xb ostaje kod b i oni se ne razmenju. Ono što se razmenju je između a i b to su ove vrednosti y na i yb. E, sada kada koristnik a dobije ovo yb sa druge strane, znači kada mu se pošadje yb, oni izračunova yb na xa pomodulu q i može da se pokaže, znači ono što radi ove sa druge strane, oni izračunova y na xb pomodulu q. Dakle, razmenje se ove javne vrednosti, ove y vrednosti i ono što može da se pokaže, to će biti na sljedećen slajdu, to je da ove dve operacije yb na xa pomodulu q i y na xb pomodulu q daju identičnu vrednost, a to je vrednost k. Dakle, ono što će ste desiti na kraju difihjamo na ovog algoritma, to je da će i jedne i druge strane, i a i b generisati brojku. U tom smislu možda bi bilo precizni da se ovaj algoritm ne zove algoritm za razminu ključeva, pošto nikakaj ključevi se ne razmenju, nego algoritm za generisanje istog ključa sa obje strane. I to je način kako se stvori isti ključ, tako da a i b imaju tu vrednost kako je može kasnije da se koristi za simetrišnog algoritm da bi se desifrovali po daci. E sad, ono što čini snag u ovog algoritma, to je, način, činica da ako neko sa strani vidi, ono što napadaš sa strane zna, to su vrednosti alfa, to je vrednost k, i ono što on vidi, to su vrednosti y na i yb. Da bi neko iz ovih ovde informacija došao do privatnih vrednosti xa xb, pa samim ti i došao do ključa, on bi zapravo morao da urodio ono što se zove discretni logaritm, dakle on treba da iz ove vrednosti yb i iz poznutih alfa i pu da dođe do ove vrednosti xb. Inverzna operacija od ove operacije eksponencijacije po modulu je operacija tako zodnog discretnog logaritma, i to je operacija za koji ne postoji dobar algoritm, ja sam nadam da sam reko da nisam pomeša algoritm i logaritm, dakle operacija discretnog logaritma za koji
 još uvek ne postoji algoritam koji omogućeva da se ta operacija izvrši u nekom polinom ilnom vrema. A to znači da je na padaču ne praktično teško da pokuša da je iz poznatih ovih javnih vrednosti i poznatih ovih deljenih javnih vrednosti alfajku, da iz tih vrednosti dođe do privatnih tjučeva. I to je ono što je do sada, a to je već 1,45 godine od kako je algoritem javno objavljen, niko me nije pošlu za rukom, pa onda možemo da verujemo da je to zaista tako, oduzno da ne postoji neki kvalitetan mehanizam kojem može da se izvrši to diskretni logaritam u polinom ilom vremenu, nego na padaču ostaje to da vrši brute force nap. Esad, ovo je ono što sam logovestio na predhodnom slajdu, a to je, imate ovde pokazano, zapravo da ova operacija zaista generiše isti ključ sa obje strane, odnosno da je, da tako kažem, ova operacija simetrična. Znači ako uzvijemo ovo k, što je yb na xa po moduluku, yb to smo videli, to je alfa na xb po moduluku, pa sve to se podigne na xa po moduluku, popravili ima modularne aritmetike, i to je jednako ovome ovde, alfa na xb xa, pa sada kuzvimo i obrnemo njim mesta, onda dobijemo alfa na xa xb, pa onda ako znamo šta je alfa na xa po moduluku, a to je yna, dobijemo ovo ovde, odnosno dobijemo da se dobija isti rezultat ovog k, bez obzira na to, da li je izračuno a ili je izračuno b. Prosto takve operacija simetrične. To je jedan od najzračajnijih rezultata u kriptografiji, od praktično nastanka kriptografiji, zato što je to rezultat koji je omogućio da se udaljeni, da udaljeni entiteti, udaljeni rečunari, mogu da stvore simetrične ključeve, a da nema nekog offline kanala kojim se razmenjuju titi ključevi, zato možete se urediti koristići jedan ovakav mehanizam, za koji još uvek niko nije pronašao napad koji će ga razviti. I nadam se da je Diffy-Helman algoritam ovako opisan jasno. Da bi ste se ugarili da je to zaista tako, možete da probate i sami da ovaj uredite koristići relativno male brojeve, takle u ovom ovde primeru imate prost broje 353, ono što ste ovde sad da dobili, to je informacija da je prost koren za 353 trojka, što znači da ako trojku dignemo na sve eksponente od 1 do 352 po modulu 353, dobit ćemo različite vrednosti, i neko bi od vas moglo da se pita i dobro sada ako nam date na ispitu ili na kolokijumu zadatak iz Diffy-Helmana i date nam prost broj, ili ima neki algoritm kako doredimo prost koren, a nažalost nema baš dobro algoritmo zadrživanje prosto koren, tako da vam to nećemo dati, zato što mi ste mogli da izgubite dosta vremena posebno ako je i ole veliki ovaj broj, a posebno u situaciji gde ako radite nešto u vežbanci, onda bi to bila potpno katastrofe, takle to ne morate da očekujete, ako dobite zadatak, onda ćete dobiti rovatno gote vrednosti alfa i ku koje su tako da može kastnije nešto da se izrpun. E sad naravno, A i B biraju tajne ključeve x, A i x, B koji su manji od ku, i onda svak od njih izrpunava i zapravo ono što bih ja voljio da probate da se uverite, to je da uradite ove dve operacije, da se uverite, da recimo za ovako izračunate tajne ključeve x, A i x, B, ćete dobiti ove javne vrednosti i na kraju da se uverite da će ova operacija da izgeneriši istik ključ koji ima vrednost 160 cao bestranje, dakle popravili ima kako funkcioniše Diffie-Helman algoritm. To ono što bi tu trebalo da znate ako se resimo da vam damo tako neki zadata koji će da pokaže da ste razume li kako funkcioniše Diffie-Helman algoritm, to je naravno da ovu ovde operaciju ekskonenciacije po modulu neradite brute force, odnosno da ne dižete broj 40, da ga nemožete 233 puta samog sa sobom, nego da iskoristete ono pametniju metodu koji sam vam ispričao prelikom predavanja o RS algoritmu, dakle da se ovo nekako svede na neki elementarniji stepen, 1, 2, 4, 8 i tako dalje. Na dobro, nadam se da ćete ovo isprobati i da ćete se uveriti da zaista algoritm radi i da to daje sve uredno. A onda, ovo je dalje, kada se koristi Diffie-Helman algoritm, primenjem se sve to isto, uztu razliku da ovlaj brojku, a to je taj modu po kome se vrši deljenje, da taj brojku mora da bude jako veliki, a kada kažemo jako veliki, to znači da danas su to brojvi koji treba da imaju najmanje 2400 bita, zato što prosto treba na podaču ostaviti i da mu bude jako teško da izvrši brute force pretragu svih mogućih ključeva u tako velikom prostoru. E sad, ono što isto možete da probate da se uverite, to je da ona imene da mi dula napad koji sam vam pokazal na predfodom pridavanju, a koji vam je pokazano na konceptonom nivou može da se primeni i sa Diffie-Helmanom, odnosno da tu stvar koja vam je tad pokazano da taj napadač može da izvede i koristit će Diffie-Helmanom napad, naravno opet preduslo je da kada se razmene javne vrednosti, to su ove vrednosti y, da učestnici u komunikacije i to su a i b, odnosno primjero koje ovdje imate, to su ana i pera koji žel da razmene ključeve, da oni nemaju dobru vezu između identiteta onogskim komuniciraju i odgovarejiće javnog ključa. Sam algoritm, ja ću, neću se daš previši detak dodravat i na om algoritmu, ali sam algoritm funkcioniša tako da, naravno, ana pokušava da pošalje svoju javnu vrednost prema peri, e sa tu postoji neki tomak koji se umeša u ovu vezu i on presreće ovu javnu vrednost y, i peri umesto y, šalje yd1, to je njeguva javna vrednost koja izračuna ono nosta u neki svoje privatne vrednost. I sada, toma izračuna ova ključ koji je ovo y na, naravno, ovdje može za koristi dva različnita ključa, to znači da toma pripremio jedan privatni ključ koji će koristiti sa anom, drugi privatni ključ koji će koristiti sa perom i takođe za njih izračuna o dva javna ključa, to su ovi d1 i d2 koji će koristiti sa u razmeni sa anom i sa perom, a da u principu bi mogu da to se uvradi sa jednim ključom, ali dobro, nema vesel. I sada kada je, način on je presre ovo što je ana poslova, i umesto da pošalje peri anin ključa, on pošalje svoj ključ yd1, pera prima to yd1 izračuna ova ključ na osnovu svoj privatno ključa i tominoj, prvoj javno ključa, a toma koji je izračuna na osnovu svoj drugog privatno ključa i aninog javno ključa, ove ključ k2, on će na drugu stranu ani poslati svoj javnik i u chipsilon d2 koji odgovorali ovom ovde ključu. I tako, nažalost, e, nažalost mogu dolazimo do ograničenja ovog mediju, preko koji ja vama držimo o opredavanje, ali mislim da ćete se snaći u samoj prezentaciji, da ovo stvarno nije teško da razumete, giri pojenta potpornijista, a to je da će na kraju cele ove komunikacije, znači ako imamo anu i imamo peru, a ovde imamo tomu, između, ane i tome će biti ključ k2, a između, tome i peri će biti ključ k1, ane i pera će misliti da sva komunikacija između njih je kryptovan, i moći će da komuniciraju, ali će sadržajite komunikacije viditi tomu. Dakle, ovaj klasičan difihelman algoritm bez ikavih modifikacije u njemu je podložan meni do midel napadu. I to je jedan od razloga, zbog koji se difihelman algoritm u ovom osnovnom obliku, dakle u obliku da se samo razmenjuje ove javne verednosti nikada ne koristi. Odnosvajte da budem čak precizni, vidite ćete da se ko te lesa koristi, odnosno u verzii te lesa, u te lesu verzii 1.2, koja je doskora bila aktualna do pre... neku godinu, postojele je mogućno da se koristi ovakav elementarni oblik difihelman algoritma, ali upravo...
 Zvonju, zovec, ovoj razloga što je takav oblik Diffy Helmogorritmo podložan ovoj vrsti napada, on je u verzi 1.3, koji je usuneno pre neku godinu, izbač. Tako da, Diffy Helmogorritmo napad u ovom osnovnom obliku, da je se samo razmenju i javne vrednosti, bez ikakve dodatne prover identiteta se ne koristi. Videćemo mnogo detaljnije kada budemo pričali IPSEC-u i pod razmeni ključeva kod IPSEC-a, recimo, odtućete vidjeti da je jedna napjučeva, se sastoji iz 6 poruka, i za nje stoji ovo osnovna Diffy Helmogorritmo razmena, ali sve ove ostale poruki i sve ostale informacije koji se razmenju, služi se da to, da se spreči manjendomidl napad i služi za to da se spreči replay napad. Ali o tom potom, kada dođe vreme za to. Dobro, to bi bio manjendomidl napad. E sad, tu smo od prilik je došli do kraje ove teme koje se zove razmena ključeva. I tu, ajde samo ovo jedan slaj, da vam pomenem neke stvari da ne bude, da smo to preskočili. Dakle, Diffy Helmogorritm nije, u svakom slučaju nije jedini algoritm koji se koristi za razmenu ključeva i nije jedina ta asimetrična šema koja postoji. Naravno, videli ste nakon njega njega je nasto RSa. Tu postoji Elgamalov algoritm koji je na 184. godine. E ta algoritm nećemo raditi kao algoritm za asimetrično šifrovanje, ali ćemo ta algoritm raditi kada vam, u budem pričao, digitalni podpisima, zato što ovaj digital signature standard koji je jedan od standarda koji, kod nas, upisan u zakon da može da se koristi za formiranje digitalnih podpisa, a on u sebi sadrži dosta tih elemenata Elgamalovog algoritma. Tako da ćemo se Elgamalovim algoritmom pozabaviti verovatno ne sledeće nedeđe, nego one nedeđe izda kada vam budem pričao, digitalni podpis. Ono što takođe možete da vidite, ako pogledate kako, a to ćemo mi pokazati u krajnje lini, kako funkcioniše kada budemo radili web security, ako pogledate recimo vašu komunikaciju sa nekim web serverom, ili ako pogledate šta je iskorišćena za razminu klučeva između nekom tamog Google'vog servera i vašeg browsera, moćete da ustanovajte da je, da ka algoritm koji se koristi, stajajte recimo neka skraćinice koji zleda otprilike jovako. E-C-D-H-E, ako to vidjete, i za ove skraćinice stoji elliptikrb-diffy-helman algoritma. A, da treto je variacija dify-helman algoritma koja ne koristi ovog ekspominciaciju po modulu koje se vam pokazao na prethodim slajdovima, neko koristi jedan drugi matematički aparat, a to je matematički aparat tako zvanih diskretnih, eliptičnih triv. E-C-D-H-E, imali smo ideju da pokušamo da vam ujedemo elementa ovih diskretnih, eliptičnih trivih, ali mislim da se to ipak neće desiti, zato što bi to podrazumevovo još jedan dvo čas, jedne dodatne vrste matematiki, za koju mislim da koristnije čuvete neke druge stvari, a oneku se bude bavio ili koga više interesuje matematika, svakako može da nađe u literaturi i pezmeđa ostolo bi ove knjizi koji smo vam prepuručili i nađe kako izgledaju diskretnih, eliptičnih trivi i šta koja matematika stvoji za toga. Razviki između diskretnih, eliptičnih trivih i ovog algoritna eksponenciacija po modulu je da su ti algoritnih, diskretnih, eliptičnih trivi brži nešto od ovih koji se zasnivaju na eksponenciaciji po modulu, da koriste nešto manje ključeve, dakle ako se ovdje koristi koj od eksponenciaciji po modulu ključ, odnosno, onej modul veličine 2048 bita, ovdje će se koristiti znamenir ključevi koji su veličine 250 bita, dakle kompaktnije da tako kažem algoritma. Ali suštinski nema nikakve razvike i takođe ako se posmatri iz perspektive one pojave kvantnih računara i pojave algoritama koji mogu u polinom ilom vremenom da razbiju ove algoritme i difihelman algoritm koji je zaslana na eksponenciaciji po modulu i difihelman algoritm koji je zaslana na diskretnih maličnih kljivama i jedni i drugi su pođednako podložni tome da taj neki hipotetićki ili budući kvantnih računar može da ih razbije u polinom ilom vremenu odnosno drugim rečima kada se pojavi kvantnih računar, onda će morati da budu zamjenjeni i jedni i drugi algoritmi. I na tome se dosťa radi. E sada ovdje ima još jedan bullet, a to je da pospoji još jedna način džazmine ključeva, a to je nešto su zove kvantna distribucija ključeva. E sada kvantna distribucija ključeva zapravo nema nikakva veza sa kvantnim računarima, ali ima veza sa kvantnom fizikom. I ovde vidite, ovde su onovedane neka dva mehanizma, BB84 i E91 koji su dobili imena odnosno ove skraćenice po autorima koji su ih napravili i po godini kada su ti algoritmi osmišljeni. To nisu algoritmi koji su mladi kao što je i to je prvi je nastav 1984 godine, znači to je vreme kada svakako niko nije razmišljavao kvantnim računarima ili makarnena ozbiljena način. Šta ideja kvantna distribucija ključeva? Ideja kvantna distribucija ključeva je da sa distribuciju ključeva koriste kvantna stanja nekih čestica, a konkretno misli se na fotone. Zato što fotoni su čestice koje se i koriste u tim informacijno-komunikacijne technologijama, dakle, veza između dva rutera ako je optički kabel, u pitanju je veza u koje se razmenjuju neki fotoni. I onda se na ročnim načinima polarizacije tih fotona i detekcije polarizacije fotona može da se vrši razmišljavao između dva uređe. I to je prva stvar, druga stvar, ono što je zgodno, to je takva razmena sigurna zato što, ako bi, pošto se radi na nivou pojedinašnih fotona, ako bi neko upal tu komunikaciju i probav da pročitla statu stojk fotona, odnosno da vidi kakve je njegova polarizacija i koja je vrednost tog bita, da li ona nula ili jedan, on bi samim tim izmenio stanje to kvotona i sama razmena ključeva bi bila progršena za nevalidno da se mogli bi ja se detekciju da je neko pokušao da upadne u taj kanal. E sada na kvantanje distribucija ključeva se takođe ovih dana jako mnogo radi, međutim kvantanje distribucija ključeva izbog ovaj prirode, kako sam je onaveo, ona ima jedno veliko ogranjicenje, a to je da kvantanje distribucija ključeva može da funkcioniše samo između onih uređa koji su povezani optičkim kablom i da između tih uređaja nema nečega, nema nekog uređaja, nekog medjju uređaja, bio to pojačavač, bihlo što može da utiče na te fotone koji putuju između dva uređaja. A što ovo u praksi znači? Ovo u praksi znači da ako ko hoćete da razmenite ključ sa nekim ko se nalazi u Americi, to nećete moći da urodite koristići ove mehanizme kvantanje distribucija ključeva, zato što ono što su maximalo danes postigli, to je da naprave recimo neku distribuciju ključeva na rastojanjima do nekde 300 km, ali čak i kada se to radi, ta distribucija ključeva je relativno spora. Ima kvantanje distribucija ključeva nekog značaja i radi se na tome i možda će u nekim aspektima se koristiti, recimo na nivu jedne zemlje ili na nivu neku providera, ali ako hoćete koristite razmenu ključeva sa nekim ko se nalazi na internetu, između vas i njega ima više različitih mreža, onda takav način razmenu ključeva nije više relevanta. Tema naredne oblast je oblast obezveđivanja autenticnosti poruka, odnosno obezveđivanje toga da kada se neka poruka prenosi preko neku komunikacijnego medima, napr. preko interneta, da neko ne može da promeni njen sadaržaj. I za plusver ko se koriste funkcije, koje se zove hash funkcije, i to je jedna veoma važna oblast, a vidite ćemo kasnije da ove hash funkcije se koriste za dopravu daleko širisku stvari od toga da samo bezglede autenticnost određene poruke, da se korist precimo iz zaštitu lozinki i da se koriste na kraju krajava i bitcoin blockchain, onači ono rudarenje blockchaina je, napr. izračunavanje ovih hash funkcije, ali o tom potom kada dođemo do kraja priču hash, i onda ćemo govoriti i o tim primanom. E sad što su hash funkcije? Hash funkcije su četvrti, da kažem, osnovni element kriptografije. Prva dva elementa su simetrične i asimetrične kriptografije, to smo videli kako funkcioniš, treći element je razmina ključeva, a sada ćemo da vidimo kako funkcioniš ove hash funkcije. Hash funkcije su jednostavne funkcije, ako bi smo chcieli nekako simbolički da napišemo šta i kako izgleda hash funkcija, on izgleda ovako nekako. Ima nam neku poruku M, koja se dovodi na određenu hash funkciju i rezultat te poruke M je neki hash H. Ono što je osobi na tog hasha H, to je da je on uvek fixn dužin, i da se za određen u algoritmu tačno zna kolika je dužina tog hasha. Napr. postoji algoritm koji se zove SH256, ovu 256 znači da će ta algoritm proizvesti 256 biti da duga čak hash. Dužina hasha ne zavr...
 od dužine poruke. Znači poruka može da bude kratka, može da bude jedna reć, može da bude vaše ime ili imel adresa, a može da bude ceja veliki file od nekoliko gigabajta. Bez obzira na to kolika je ulozna poruka, hash za tu uloznu poruku će biti uvek fiksne dužine i biti će tih, ako je u pitanju SH256, biti će tih 256 bita. Dakle, hash, ovaj hash-a, odmismo izlazit hash-functije je neka vrsta funkcija, koja, odnosno to h je funkcija od em, a i same hash-functije su tako formirane, da je i najmanja promena originalnog teksta, znači promenite recimo u nekom veliku file-u, koji ima nekoliko gigabajta, imate video file, i promenite jedan bit u ton video file-u, ta promena jednog bita će izazvat i obavezno promenu u vrednosti hash-ako izračunom za taj file. I onda samim tim, pošto ste sad čuli kako funkcijoniše hash-functije, odnosno da je ona funkcija od originole poruke i da za bilo kakvu promenu u originole poruci će se promeniti hash, onda može da, ponako vama glavi se upali lampice, da kažete, ha, pa dobra, sad mi jasno kako se ovo koristi za zaštitu od promene poruka, koristi se tako što će a u sporuku nalepiti taj hash i onda nekako pročita poruku i uporedi sa hashom koji je generisan, on može da ustanovi da li je data poruka promenjena ili nije. Vidićem u koje su sve primene hash-functije i u kojimi situacijama se koriste, hliučne primene su naravno za odkrivenje promene u poruci, ali ono zašta se hash-functije još koriste, to je da oni budu elementi tigitarnih podpisa pa sad dalje to neči i lični tigitarnih potpisa ili neki tigitarnih potpisa ili neka vrsta tigitarno pečota na određenu dokumentu koji je potrebno neko verificovati, to ćemo videti kada dođemo do konkretnih primena hash-functije. Inače, ja verujem, pošto ste vi već došli prakčno do kraja studirenje da ste vi čuli već negde za hash-functije i da znate kako biste ih koristili i da ste čuli verovatno da možete da nekih podatki koji imate u baziji, značinu njih u hash i da se na taj način oni razdihuju i čuli ste verovatni za pojem kolizije, a sad ćemo to malo seponomiti iz konteksta kriptografije. Dakle, postoje različite hash-functije, postoje tako zvanje kriptografski hash-functije, kao što su SH i NDP, koje se koriste, koje se uči izučavaju na ovom predmetu i koje se koriste za kriptografsku zaštitu autenticnosti i određene poruke, a postoje neke nekriptografski hash-functije koje treba da daju taj finger print, odnosno, neki identifikator određene poruke, ali nemaju, nisu kriptografski funkciji da nisu dovoljna sigurne. Vide ćemo na danasim času šta znači, koje su to osobi nekoje treba neka kriptografska hash-functija da ispuni. Kriđučna razlika iz među ovih kriptografskih i nekriptografski hash-functija je u performansama. Kriptografski hash-functij uvek podrezumeve u mnogo više operacija, dakle procesori je mnogo više zaposnit kada treba da izrašunala hash-eve i između ostalog zaposnih, kada nekoma je bitkojno onda kupujone posebne kartice koje mogu to dovoljde nekogo brže, nego obišni procesori. Z razliko toga, ove nekriptografski hash-functije mnogo manje obtereći procesori i u onim situacijama, kada niste u neprijateljstvom okruženju, da tako kažem, dakle kajste sami napravili neko aplikaciji, potrebno da sami da nešto identifikujete, onda mogu da se koriste, kada se podrezumeve da nešto sami sebe da napadnite, onda se koriste nekriptografski hash-functije, ali o tom potom, eto i to ćemo malo, opet pro komentarisati. Dakle, ono što podrezumeve hash-functije, to je da ona formira nešto se na engleskom zove fingerprint, odnosno otisa krsta neki poruke i samim tim ono što je bitno, osobi na hash-functije, kao što sam rekao, hash je 256 biti, na primje, dakle on je fiksna dužina, taj hash će uvek biti isti, bez obzira na to, kolika je ulozna poruka. Ovo bi trebalo da vam bude intuitivno jasno, ali ja ću to reći sad i eksplicitno, ono što je odlika hash-functije, to je da je ona nije reverzni. Dakle, od određene poruke možete dizrečunati hash, međutim ish hash'n ne možete da izrečunate određenu poruku. Positivno bi to trebalo da vam bude jasno, recimo u kontis to oveš sam malo prepomenu, ako imate video file, koje ima nekoliko gigabajta i za njega izrečunate hash u 256 bita, jasno je da ne možete da cela taj file spakujete, ne znam kakvim mehanizmon kompresije u 256 bita, to bi bio genialan mehanizmon kompresije, ako biste mogli ish hash'n da vratite nazad do taj file. Dakle, ona je jednostvrna funkcija, koja prosto daje samo taj hash'n, onda šla će se s tim je dalje koristiti, to ćemo videti kada dođe vreme. Podrazumeva se da je javna i ovdje uopiru ovog predneta na nadrednom predavanju će vidjeti kako funkcioniše sh algoritm, koji je danas jedan od oni koji se koriste za izrečunavanje hash'n. E sad, kad ste videli kako funkcioniše i čemu služi hash'n funcija, onda možete da predpostavite da je način prover integriteta određene poruke ovak. Opet imamo Alice i Boba. Alice je napisala neku poruku, to je ovo ovdje poruka i hoće da je pošelj je Bobu, a pri tom hoće da nekako Bobu da bude siguran da neko nije promenio tu poruku. Napimera Alice moja napisala neke nežne reči, a neki napadač između bi vole da napiše nešto da se oni posvađaju i da promeni sadrežete poruki. E da se to ne bude desilo, Alice uzme izrečuna hash od ove poruke koje je poslala i na samu poruku na lepi hash i to pošelje prema Bobu. Sada takva poruka koja je dolazi, znači to je orignalna poruka plus ove hash, ono što Bob treba duredi, treba da iz poruki koje stigla, izrečuna hash i u koliko dobije istu vrednost kao ona što je poslata u samu poruku, onda to može da znači da poruka nije menjena. E sada ja verujem da neki od vas kada vide ovo, odmogu da vidi da je postoji problem u ovakvih proveri integriteta, dakle ovo iz ove se trivialno ja bi reko i naivno proveri integriteta poruke hash funcijom. Zašto, pa zato što možemo da zamišlimo da ove između Alice i Boba postoji neki napadač, a što on treba da uredi, ono može da uzme i da creira neku poruku data2, da izrečuna njen hash i da sada u mestu ove orignalne poruki koje poslata Alice pošalje ovo poruku data2 sa hash, pošto je načina koji Bob analizira ovu poruku koji je dobio takav, da on zapravo dobija i poruku i hash, a da neko može da promeni i poruku i hash usput, ovaj ove je ovde hash bi bio neki h2 koji je funcija od data2, onda to znači da napadač ovde zapravo da uako osmećli na šeima proveri integriteta zapravo nije čemu ne struži, zato što potencijne napadač može da izgneriše, bilo kakvu drugu poruku da izrečuna njen hash, a ono što će se deseti na dolaznej strani, Bob će uzeti izrečunati hash od ove ove nove poruke, dobit će hash h2 i zaključiće kako su ti hash evi jednaki i kako je sve uredi, a zapravo nije uredi. I to znači da ovako proveri ne je ova možda smisla, je sad neko bi mogo da, način nažalost posloje situacije, kada se čak je ovako provera brši, recimo možda ste negde videli da kada schida te recimo neki software sa interneta, da ovo često uz taj software koji je open source, da stoji u sto možete da nađite recimo md5 ili sh, hash, tog file koji skidete sa softwareom. I to bi trebalo da vam pruži određen odozol s igurnosti da kada schinete taj file da recimo nikolu taj, da to jeste baš taj file koji hoćete skimete baš taj program i da nikolu taj program nije ubacio neki backdoor, ili neki virus ili tako nešto. I to se zato i radi, da tom proverom hash, skidanje file i proverom njegovoj hash, pooređenim s tim hashom koji je na web stranici, da možete da budete sigurni da je to baš taj kod koji vas interesuje. E sad iz ovog primera koji se vam pokazao, jasno je da u koliko je recimo neko uhakova taj site, preko koga se distribuira software i u koliko je taj neko uspio da na tom siteu zameni file i da ubacimo file koji ima neki maliciozni kod, taj neko će ispio tako moći o to novog file da izračuna njegovoj hash i da podmeti neopeti jednu i drugu stvar i da vas prevari. Tako da ta vrsta provere sigurnosti nije preterano jaka, ali je to možda pruža neku dodatom dozu sigurnosti. Dakle, ovo što sam malo predsprit ću imati na ovom slajdu, da je taj napadač, kao što rekoh, menja i podatak izračunova novih hash i tako može da prevari ovog boba. E sad da se to ne bi desilo, postoje različite šeme, kako može da se vrši prover integriteta poruk i koja se šalje i sad ćemo prostunirati malo ove ovde četiri šeme koje šve to rade, samo što razliki između ove četiri šeme je
 u tome koliko one koštaju da tako kažem u smislu potrošnog procesora i šta one tačno rate. Evo ako, ajde, krenemo od prve, znači da malo pro komentariše mi prostudiramo šta se oddešava, znači ovdje postoji poruk M koja je šalje od izvora A prema destinaciji B. Za tu poruku M se raču na hash, to je ono što smo i očekivali, to se deshava recimo i ovde drugoju variante, dakle to je ona i korak koji je obavezan i sad ono što smo videli u trivialnoj proveri to je da se šalje poruka sa hash. Međutim ovdje se radi nešto drugo, ovdje se naravno radi konkatenacija T2 stvari, znači poruk je i hasha, ali se radi dodatan korak, a taj korak je enkrypcija simetričnim algoritmom sa nekim pjučem K. Znači podrazumeva se da A i B imaju neki pjuč K simetrični razmenjen i da oni vrše enkrypciju i dekrypciju ove poruke. Šta ću učiniti ovakva enkrypcija? Ovakva enkrypcija, znači šifrovaće i celu poruku i taj hash i sad ako bi neki napadač ovde koji posmatra to što je posto to, hteo da napadne ovu razmenu šta bi on mogo odvradi? Jednostvara je naravno napadna pjuč, kako bi deshifroval poruku, jer ako uspite da deshifre poruku, onda može da promeni i M, može da promeni i hash i može da je ponov o šifru i onda je završio posam. Ali se predpostavlja da je, recimo, taj simetrični algoritmom dovojno siguran i da mu to nije baš pravi put da izvrši napad. Ono što bi on mogalo da proba dovradi, to je da na neki način modifikuje ovo ovde, znači šifrovanu poruku i on to svakako može dovradi, znači može da zameni određene bite ili byte-ove te poruke, među ti možete za njega problem, pošto on ne zna ki uč, on ne može da se dovradi na takav smisle način, koji bi proizvio to da kada se ovdje deshifruje poruka, da ta poruka i ovaj hash koji bi se u deshifrovanju otkrivi da odgovareju i jedan drug. Tako da ovakva šema pruža zaštitu integriteta, među ti problem sa ovom ševom je što je ona relativno skupa. Skupa je u smislu da se šifruje sve živu. Posloje neke prime nekada nam nije bitno da poruka bude šifrovanju, znači poruka nije poverdiva, ali ono što nam je bitno to je da poruka se ne promeni, da to bude, recimo, to je objeva neke veste. I hoćemo da on neko dobije tu poruku, da on bude siguran da je ta vesta autenticna, da je neko nije promeni. E, u takvim situacijama je ovo skupa, zato što ovde morate da šifrepe celog poruku plus hash. Varianta koja je nešta jeftinija, je varianta B, znači to je ovo ovde varianta, koja se razlikuje od variante A samo po tome gde se nalazi šifrovanje. Znači koji od variante B imamo šifrovanje samo hashate poruki. E, sad u akviji situaciji, ono što napadač može ovdje dohradi, ono može da proba da promeni poruku M, ono može da proba da promeni i taj hash koji je nalepljen, znači taj hash i kriptovom ti učin kak, koji on ne zna. Te jako promeni nešto i u poruc i u hashu, mogućnost njegova da napravi taku promenu koje će i promeniti poruku na određeni način i promeniti hash tako da se prođe nedetektovano je jako malo. Znači, male su mu šanse da može tako nešto da izvede. Ova varianta pod B, ono je daleko da kažem jeftinija, zato što se enkripsija simetrična primenjuje samo na hash, a videli smo da su hashevi i relativno kratki, dakle to su neke vrednosti koje su izmiju 256 i 512 dita. Tako da, ovde imamo pod B i pod B dve različite šeme i jedna pruža i zaštitu i proveru integritete i tu zaštitu u cele poruke, a ovo šemo pod B pruža samo proveru integriteta, znaštitu integriteta poruke pri čemu se poruka šalje u clear textu. U oba slučaja, ono što mora da uradi ovaj na dolaznej strani, znači u godnim slučaju mora da dešifre poruku, da uzme tu poruku da izračuna njen hash, koja je ovdje del, i da uporidi sa onim hashom koji je poslu. U dolnjej varianti poruka, naravno, nemora da se dešifre, poruka stigla tako kakve, izračuna se njen hash, a sa druge strane se dešifruje ove hash koji bio poslat, i te dve stvari se uporide, i u koliku su jednaki, onda može da smatra da je sve uredu. E, ovo što vidite del varianti pod B, a to je da imate hash koji je šifrovan, znači onda taj hash predstavlja neku vrstu digitalnog potpisa. E, sad, naravno, ovdje to nemože da bude, da tako kažem, personalizovan i digitalni potpisa, zato što taj ključ K posleduju Ia i B, a onda pošto je takva situacija da ga posleduju Ia i B, onda nemože A da tvrdi, ja sam to popisao, zato što to isto može da uredi i B. Međutim, u koliko bi se ovo šifrovanje vršilo asimetričnom eklipsijom, onda bi smo došli do stvarno pravog digitalnog potpisa neku dokumentu. U potom vratićemo se na taj koncept malo kasnije. E, sad, dobro, ja se nadam da se ove prve dve šeme jasne, što se u njima dešav, i koje je razlik izmjude njih. Ono što imamo na ovom slajdu, to su preostale dve šeme koje rade nešto dostal slično plame, ali je razlika u tome što se kod ove dve šeme dole ne koristi eklipsija. Ajde vidimo šta se ovde dešav. Ove imamo poruku i na tu poruku se konkatenira neka slučaja na vrednost s. Imovo poruku koja možda bude neki file ili bilo šta drugo, i na tu poruku recimo dodajemo još 128 bita, nečega što je neki slučajnog generisani broj, ili je neka vrsta ključa. I onda se na to izračuna hash funcija. E sada, naravno, kad se pošalje ovako poruka, ta poruka cela prolazi u clear textu. To znači da napadač može da vidi ovu poruku. Međutim, pošto napadač ne zna ovu tajnu vrednost, onda napadač ne može da izgeneriše lako hash, znači teško muje, a to znači treba mnogo vremena, da izgeneriše takav hash koji će odgovarati eventuono promenjenu i porucenu. Na dolaznoj strani da bi se izvršilo prover ove poruke, naravno mora da se na nju uvradi, da se uvradi istas tvar, da se konkatenirala o slučaj na vrednost s, taj na vrednost s da se izračuna hash i da se ti hashe vi uporede. Ovakva šema je funkcionalno potpunno istak kao šema b. Dakle, postoji neka taj na vrednost koja otežava generisanje hasha na eventuono promenjenu i poruci. Razlik izm. ove šeme b i šeme c je u tome što se u šemi b koristi simetričnog pitograzki algoritm, a u šemi c se koristi nekoristi simetričnog pitograzki algoritm, nego se je prosto koristi funkatenacija neke tajne vrednosti i onda se izračunova hash pod tol. Ovo može da bude značenju na nekim situacijama kada su bitne performanse, zato što u principu simetričnih pitograzki algoritmi su spori i ovo vrem izvašavanje ovoga podb. Vi trebalo da traje nešto duže od vremena izvašavanja ovoga podbc, tako da u takvim situacijama može i ovo da bude strategija kako može as izrači proverente kvajelu nekih porukima. Na kraju imate šemu d, šema d je funkcionalno istakau šema a, zato što imate inkriptiju svega na kraju, isto kao i ovde. Ono što je različito, što se u ovdje šemi d opet koristi ista strategija kako pod c, a to je da imate ovde konkatenaciju tajne vrednosti i da se onda na sve to, znači na poruku plus tajne vrednost izračunava hash. I ono što se dobije, to je sada poruka koja je potpuno zaštičena, znači zaštičena je i njena privatnost, a zaštičen je i sam hash tom inkriptijom koja se vrši. I to su neke različite strategije kako može da se izrači provera integriteta, filea kada se šalje preko nekog medijuma koji se smatra za nebezpina. Ono što treba iz ovoga da zapomptite, to je da nam i ovde opet treba neki simmetričan ključ. Dakle, čak i kada imamo situaciju da hoćemo da izvrćimo raznan nekih poruka koje nisu nožno tak, poverdljime, dakle da treba da se bezbedi njihova tajnost, a želimo da obezbedimo njihov integritet, ono što zapravo vam ovaj ovde slajic ugeriš, to je da i u takvim situacijama moramo da imamo ili ključ, to je generisant sa isti strani za simmetričan algoritam ili imamo ove tajne vrednosti koje su nam potrebno da bih smog ih konkatenirali na porubu. Tako da čak i kod proveri integriteta, ovo što smo radili na predhodnom času je nešto što je potrebno, a to je da se ti ključevi, odnosno te tajne vrednosti stvore na obje strane koje komuniciraju, a onda to takođe samim tim povlači, dakle koćemo da se to izvede na jedan sigura način, to je da opet mora da postoji neka vrsta provere identiteta. Esa do ovde nešto što sam nagovestio na predhodnom slajdu, to je varijanta kako možemo da digitalno površtite
 odpisemo neki dokument. I ovdje imamo dve variante, opet slično kao na prethodom slajdu, znači prva varianta je ova u koje imamo poruku i ta poruka se u neštifrobanu obliku šalje na drugu stranu, dakle nije nam bitno za zaštutim o njenu privatnost. Od te poruke si zračunava hash, a onda se taj hash šifru je privatnim ključem ovoga a, znači a se nalazi ovdje. Hesh se šifru je privatnim ključem od a. E sada, na dolaznej strani šalja se naravno poruke i šalja se taj šifrovani hash, ono što može da urodi ovaj koji je dobio taku poruku, ono može da izračuna hash od poruke i treba da ga uporidi sa desifrovanim hashom koji je sada desifrovan javnim ključem od a. Šta ovaj b, ukoliko urodi sve i ovde dobije daje sve u vredu i kaže uporidio samih i oni su identični? Šta ovaj b može da zaključi na osnovu tog? B na osnovu tog može da zaključi da ova poruka nije menjena, dakle da je ta poruka baš takva kakve jeste, autentična, naravno može da zaključi da je tu poruku vidio svaku koja gleda tu komunikaciju, da je tvoj recimo da to nije bitno, da je ta poruka autentična i druga stvar koji može da zaključi, to je da je tu poruku generisao i podpisao ovaj učestnik komunikaciji a. Zašto zato što je hash te poruke šifrovan privatni ključemo da, ako je a jedini koji posleduje privatni ključ o da, onda b može da bude siguran da je baš a podpisao tej dokument. I upravo ovo je osnova za digitano popisivanje dokumenta. I upravo ovo je jedan od načina kako se vrši digitano popisivanje dokumentata, tako da sada kada dobijete recimo neki file koji je digitalno podpisan, ako li je digitalno podpisan vašim privatnim ključem, takav file je danas pred zakonom izjednačen sa onim što ste uzali recimo neki papir, pa je nadmupisalo vaše ime i prezime i crta i onda ste stavili svoj podpis. Ovo je način kako može da se digitalno podpiše dokument i da bude potpuno validan, a uslov je da te dokumenta... da neki daj daj dajđet tog dokumenta, fingerprint dokumenta, bude šifrovan privatni ključem neku identiteta. Osporavanje toga da sam ja ovog odpisao, može da bude jedino urađeno tako što sam ja primetio da je neko ukrav, moji privatni ključ o da i oglasio nevažećim tamu u nekom sertifikacionom telu, o to ćemo vidjeti istu kako funkcioniš. I ovo je bitno, zapamtite, kada budemo završili sa hash i sa mac funkcija, onda ćemo raditi i digitalni podpis, pa ćemo vidjeti neki drugi strategije za digitalno popisivanje, ali ovo je suština što znači digitalno popisati neki dokument. Znači učiniti ga takvim, da ne možete bude promenjeni i učiniti ga takvim, da je taj podpis funkcija nečegro što posleduje samo jedan entitet na svetu. Onda je to potpuno jasno, i recimo ako je to sad neka izijava, u koji je a izijavljuje da će da uvradi to i to, i onda je digitalno podpisao, taj a se obavezao time i ne može da poreknit to, zato što hash funkcija je funkcija te poruke koje takva kakva. Ovo donje varijanta je isto što i gorne varijanta i ona se razlikve sam u jednom detaliu, a to je da je ovde poruka šifrovana. Što znači da u ovih varijanti je ta poruke koje se razmenjuje poverljiva i bitno je nekako zaštit njenim integritet, naravno se šifruje simetričnim ključem, ali iz perspektive podpisivanja sami poruke nema nikakve razlijati. I nadam se da je ovo jasno. U svakom slučaju na taj problem i konce digitalnog podpisivanja ćemo se zatitio što reka kada dođe posebnoj prezentaciji kad budemo radili lg malovalguritom i DS-standart. Dobro, ovo naravno nisu, ja samo samo da završim rječenice pa ću vam dati priliku da postaviti pitanje. Ovo nije jedina primena hash funkcija. Hash funkcija se koriste za razliptite stvari i to ćemo raditi u okranih lini na kraju ove prezentacije. Jedna od načina je jedna od stvari da se koriste hash funkcija, to je zaštita passworda i to u svim danas poznatim računoskim sistemima i u Windowsima i u Linuxu se ne čuvaju lozinkje u šifrovanoj mobliku, nego se čuvaju njihovi hash-avi, otom potom kad dođemo dodle. Zatim postoji nešto zove hash-cash antispam zaštita, znači za zaštitu od spamova, to je napravljenje taj neki proof of work princip kojom se vrši zaštiti od spama, a to je kasniji skorošćeno za Bitcoin blockchain, pa ćemo i to vidjeti kako funkcioniše. Zatim mogu da se koriste za detekciju virusa ili upada u sistem, gdje recimo uzmete pa izračunate hash-ave svih progrommskih filova u neko računaru i sad ako vam je neko upao sistem, izvršio neko vrstvu napada, tako što je naprimer zamenio neko biblioteku ili vam je zamenio neki exe filo, tako što u tom filu ili u toj biblioteciji postoji neki trojanac ili tako nešto, vi ćete moći da detektujete tu promenu zato što hash, novog izračunata, novog fila će biti drugačiji od hash-a onog fila koji i origini lo biju u sistemu. I takođe hash-e vi se koriste za generisem njebce od uslučeni brajak. A dobro, sada sam ja postavljavam, dakle ovo će vam pokazati, je sad kolega Andrija slobno postavite pitanje. Aha, pa imam pitanje ima u vzuvalu na digitalno podpisivanje na prethodnom slajdu. Dobro. Nisam siguran koju funkciju ima recimo ovoj gornje varianti, ovoj hješirenje, nebismo postigli isto kad bi samo nakacili ovo enkreptovanu poruku. Tako je, postigli bismo isto, ali ono što sam ovrekao, na prethodnim predavanjima to je da je asimetrično šifrovanje sporo i to je sporo, recimo, ne može baš da se poredi malo su babi i žabe, ali recimo da je sporo je hiljadu puta od simetričnom šifrovanja, dakle, generalno je procesorski intensivno. I sad vi imate dve strategije, recimo, imate file, ovaj poruk, koji je neki ugovor koji ste vi podpisali, koji je recimo skenirani, neki PDF koji ima 5 megavajta. Imate dve opcije, opcija A, da ceo taj file šifruete privatnim ključem, opcija B, da taj file koji inače javan izračunate hash od njega, pa da onda samo šifruete asimetričnim ključem hash. I z prespiktive performansiji, ovo drugo je mnogo, mnogo brže, zato što hash funkcije je mnogo brže od asimetrične kriptije, a onda asimetrične kriptije se neprimenja na ceo file, nego se primenja samo na hash. To je pojenta, a naravno, u pravosti da ukoliko bi neko šifroval kompletan file privatnim ključem da bi dobio suštinski istu stvar. Vazji, važji, hvao znači zbog brzina je efikastnosti. Tako je, a drugo, a drugo, a to ćemo kad budemo došli od digitalnih podpisar, mi sim sam koncept podpisava, jer da ste vi na neki dokument stavili nešto malo vaše. A to je nešto, da vi sam neki grafolog mogao da kaže da ovo jeste vaš podpis i da uporedi sa tim je kako vi pišete i da kaže to jeste to. Neki ekrovalent stok podpisa koji je nešto malo što ste vi stavili na dokumenti što je vaše, to je taj hash koji je relativno mali odnosno origino ni file i koji je na određeni način modifikovan da bude vaš. To je zaista, jeste neka vrsta o ponašanja onoga što jeste podpis u papirnom analognom svetu. Ali jeste, performansi su ključno stvar zašto se ovo ovako radi. Dobro, ajde, još malo ćemo pa ćemo tu završiti za danas. Šta ćemo da vidimo, malo ćemo da krenemo u neke trivialne hash funcije, samo da vidimo koji su to uslovi koje treba da ispunjava ih hash funcije, odnosno kao i u nekim situacijama ranije kada smo pričali recimo o simetrišima agoritima, kada smo krenili u nekih agoritama, pa sam ono tada pričal zašto oni nisu dobri i šta ne valja kod njih. Značite da vidite neke hipotetičke hash funcije i šta kod njih ne bi valjalo i zašto se one neko ariste kao hash funcije. Evo, recimo, posmadrićemo prvi primer, a to je da imate jedan tekst, za sad nemojte posmatrate ove ovde pose linije, nego posmatrate sve samo ravne linije. I recimo da ovo ovde što vidite, da u svakom redu imate po dva baita, i širina ove ovde reči 16 bita, imate dve reči od po 8 baitova koje se nalaze ovako po ređane i recimo da ste ceo tekst ovako naredjali. Znači dva po dva slova stavili ste ih jedno, znači se o nekih, izvija, tekst on i file, koji hoćete da zaštikite hash funcijom, ste napisali tako što u svakom redu postoje dva baita i onda je to naredjeno vertikalno. I uzmete i kažete, ja ću da primenim ovaku hash funciju, znači ako je ovo ovde red 1, a ovde red 2, sve do neku tamo dole reda m, ja sam cijel svoj file ovako napisao red po redu, svakom redu po dva slova. I onda kažem, moja hash funcija se formirala tako što ću uzeti svaki bait,
 Izvijenosti ne svaki bajt, svaki bit. I povertikali, znači za, recimo, poslednji bit, u svakove, svakove, ove 16-obitnih reči, izračunaću hash tog poslednjeg bita u hashu kao eksklusivno ili svih poslednjih bita u ovim 16-obitnim rečim. Pa onda za predpositljni bit, to isto ću da uradim, izračunaću predpositljni bit kao eksklusivno ili svih predpositljnih bitova u ovim 16-obitnim rečim. Dakle, nadam se da nisam previše trapav objasnio ovo, da ste razumeli šta je osnovna ideja. Znači svaki bit, hasha, je formirana kao eksklusivno ili svih bita koji se nalaze na toj pozici. I to deluje, to ispunjava neki od onih uslova, koje smo pomenuli na početku, da treba da ispunjava hash funcija. Zašto ispunjava? Zato što recimo, vi sada moš da zamestite ovdje jedan ogroman file i biste dobili neki hash tol kvajla. I sad kažete, recimo, da vidim da je ovo ispunjava taj uslov, da ako nešto promenim u tom ogromnom file'u, da će mi se promeniti hash. I onda uzmete i promenite ovdje jedan bit, i ako je vam bio nula, vi ovde upišite na to mesto 1. Ako ste to uradili, ono što će se svakako desiti, i to je da će u hash u koji se nalazi dole bit, hash'a promeniti vrednost. Ako je bio jedan bit će nula, ako je bio nula bit će jedan. Dakle, to lici na to da je delimićno ispunjen taj uslov, da svaka pa i najmanja promena uokviru ovog file'a će i zazvati promenu hash'a. I sad naravno, ovde već možete da uočite neke probleme, a to je da recimo, ako ja uzmem, pa promenim ovaj bit, ali onda promenim znak još jednom bitu, pa recimo, i ovaj bio nula je u pišem jedinicu, pošto je eksluzivno ili takva operacija, ako se napravio dve promene u ovaj koloni, ono što će se desiti uokviru ovog ovdje bita hash'a, to je da se on zapravo neće promeniti. Znači ako uzmem da napravim promene u parovima, onda se neće ništo desiti. I to je već nešto što vam ukazuje na to, da ovakva vrsta hash' funkcije nije dobra, i odnosno ovo ne bi smo nazvali kritograskim hash' funkcijom, zašto zato što je trivialno naći drugu poruku koji će dati isti hash. Prosto uzmem o bilo kakav tekst, i po kolonama menjamo biti u parovima i na taj način možemo da formiramo proizvoljni hash. Ne samo to, nego možemo dohradimo još jednostavat, a to je da uzmem o poruku koja ima veliki broj redovom. I da za nju izgenerišemo hash, i da onda dobimo neku vrednost hash' i onda uzmemo u ovom ovde poslednjem redu te poruke, možemo da namestimo tačno vrednosti bita, tako da ovada vrednost hash'a koja izračunata bude onakva kakva umižali. Znači trivialno je čak pronatji i drugu poruku bilo kakavog sadržanja, ne samo da radimo ove glupe promene da menjam bit po bit, nego mogu da doprog da generišem bilo kakvu drugu poruku, tako što ću u poslednjem redu ispodešavati biti na taj način da dobijem proizvoljnu hash'u vrednost, onakvu kakva je meni baš potrebno. Takve takva hash' fungcija nije hash' fungcija koja je kriptografska hash' fungcija, zato što je trivialno naći drugu poruku koja ima istih hash'a. A to je ono što je za nekog napadača samišljena stvarognost, a to je ono što napadač zapravo želi da dobijem. E onda su ljudi razmišljeli pa su reklji, aha dobro, znači, ovo ipak nije dobra kriptografska funkcija, mogli bi smo da napravimo nepo variaciju na tri temu, pa su onda reklji, ok, sada ćemo dobrodimo tako što će, znači u prvi red ćemo napisati prva 2 byte te poruke, ali onda u drugi red nećemo staviti druga 2 byte te poruke, nego ćemo staviti druga 2 byte te poruke samo šiftovanu na jednu stranu, nešiftovanu, nego rotiranu na jednu stranu, tako da ovo je bit pređena zadnje mestu. Dali rotirano u desno ili rotiranu u levo sve jedno? Kako bi smo učinili da je nekome težko, malo težde da pronadji, kakak pattern treba da se napravi, da bi se napravila druga poruke koja daje isti hash? Mjegu timi to je islo potpunotrivilno i mogli bi ste opet da lako nađete neku drugu poruku koja će dati isti hash, nakle opet podešavanjem, onog poslednjim reda i postavljanjem odgovarajućih 0 i 1, vi možete da izvedete da obbite bilo kakva poruka. Ovo su primjeri hash funcija koje nisu za dovoljavići, koje ne bi mogli da se koriste kao kryptografski hash funcij. Evo saćemo vidjeti još i jedan primjer i tu ćemo stati zvanost, primjer koji najizgled deluje da je dobar. Možda i grešem što vam ovo sad pričamo, ali ako bude bilo potrebno, možemo da ponovim i sljedeći nedlje, pošto ako se ja ne moram vić da niste slušali modove simetriših algoritama, to ćete slušati danas, ali ajde, nije na odmet, stići ćemo to za kojih 15 minuta. Ovo ovdi što vidite, to je isto jedna trivialna šema, koja koriste nešto su zove cipher block chaining mod koci metriših algoritama. Cipher block chaining koci metriših algoritama je mod u tome kako se šifruje o originlna poruka. Znači, originlna poruka je ovo ovde, ona se izdeli u blokove i to znate da se metriših algoritmi rade. E sad postoji nešto što su zove elektronik codebook, gde se svaki od ovih blokova nezabisno šifruje i dobije se odgovareći šifrovani tekst. Međutim, god cipher block chaininga se to ne radi, a to se ne radi zato što, recimo, ako u originlnom tekstu imate neki pattern, pa imate jedan blok i neki ovde drugi blok koji su potpuniti isti, oni će dati isti šifrovani tekst. Da se to ne bide silo i da bi se otježao posto na padačnu, ko cipher block chaininga se urodi sledeći. Kada se šifruje drugi blok plain teksta, onda se prešifrovanja, taj drugi blok plain teksta urodi se ekskluzivno ili ovde sa predhodnim blokom šifrovano teksta, pa se to šifruje. I ako niste, to ćete vidjeti kako funkcioniš. E sad, naravno, da vidimo šta je ovde bila ideja kod ovakog algoritma. Ideja bilo sledeće, da se mak algoritma urodi, ako imam neku poruku m, koja je izdeljena u n blokova, znači imam 1, 2 do n blokova, da napravim n plus prvi blok, znači imam blok m plus 1, koji je napravim kao ekskluzivno ili svih ovih ovde blokova. Znači ekskluzivno ili svih blokova. To je ono što vam stoji u ovom ovdje prvom vedom. E sad, naravno, to smo videli da nije adekvata način da se urodi, da se urodi heš funkcija, zato što bige trivialno bilo da se pronađe druga poruka, koja daje isti heš, pa onda da bi se to otežalo, onda se uzme i sve ovo zajedno se šifle. I ovdje je šifrovano nekim ključem ka. E sad ako je to šifrovano nekim ključem ka, koji ne zna napadač, onda ne bi mogo natrivjela način da napravi novu poruku, koja bi dala iz ti heš. I to je delovalo kao siguran mehanizm, zato što i za toga stoji neki simetričan algoritm, koji se smatra da je svih. Međutim, ako pogledate kod deshifrovanja šta se deshava, onda možete da vidite ovdje. Deshifrovanja se radi, tu postoji nešto se zove inicijalizacijeni vektor, to je neki slučajan broj, koji mora da bude na obve strane. Kod deshifrovanja se radi tako što se uzme inicijalizacijeni vektor, pa eksuzimno ili deshifrovan prvi šifrovani tekst. Za iti block, plain teksta, se dobiha kao prethodni šifrovani block, eksuzimno ili deshifrovan ovaj block. I tako dalje, i tako dalje, i sada kad se to napiše u razvijenom obliku, taj Pm plus 1, on je ovo ovde. I kada recimo, ovo P1 zamjenimo ovim što je ovde urađeno, dobit ćemo jednu ovaku dugačku formulu. Gde je taj Pm plus 1? Predstavlja, nijegih eksuzimno ili operacija. I sad, dono što je još interesantnije, kada uzmete i, pošto je operacija eksuzimno ili zanimu važija socijativnost, praktično možete sklonite sve ovde zagrade. Šta ovo znači? Ovo znači recimo da bi neko mogao da urodi sveču stvar. Mogao bi da uzme i da u poruci koja se šalje, u šifrovanom obliku, zamjeni mesta, recimo c1 i c4, c2 i cn, znači zamjeni mesta tim blokovima, takva poruka će generisati potpuno istih esh. Dakle, može da se napravi trivijalna modifikacija poruke, koja će dati istih esh. E sad, da će ta poruka imati neki smis, overovatno neće, zato što će blokovi biti izmešani, ali ono što nije dobro, to je da čak i ovakva šema, koja se sestoji od exuzima gili i sajfer god cheninga, da čak i takva šema pod nje trivijalno pronaciji drugu poruku koja da je istih esh. Znači prosto kao što ovde možete da zamjenite mesta ovome.
 c1 sa nekim c4 i sada ne znam cn-1 sa nekim c2 i tako dalje, tako dalje. Znači, premeštanjem u šifrovanom tekstu blokova, ako znamo koji algoritm i kolka je veličina bloka, premeštanjem toga ćemo dobiti isti izračunati hash i to nije dobro. E dobro, ovdje ćemo stati za dan.
