 možda neće biti zaposledan učin, jer možda će učin da se oslobodimo malo tih naših resurs. Dobro. Šta smo reklji da mi obu svariji koći mi da reali? Znamo, koćemo da vidimo bezoslovne i uslovne akcije. Bezoslovna akcija je ništa drugo nekaj. A uslovna je da naprimo ovu ovde a već. Ako imamo izpunjenu svojstvo, at most once property za b, već neko samo da kaže može, ovo je može 1, može 2, može 3 da prođe. A onda ovo ovde se može da se reali?đe vrlo jednostavno. A koristići at most once property, možemo samo da prebacimo to await na del koji se označila sada wild note b skip. I ajde, sada vidimo. A dalje možemo, možemo u nove način da razrešimo najjednostavni, najkoristni, najčešćeg korišćeg verovatno problem synchronizacije, to je problem proizvođača i potrošač. A ovdje ćemo za sada da imamo deljeni jedno elementni priklatnik, gde ćemo moći da obacujemo neke elemente. Šta su nam synchronizacijali predikati? Šta je taj ustov koji treba da bude ispunjen kada mi nešto radimo? A to je koj element smemo da obacimo ako je oneg što radi konzium, jednako onog me što radi prodjus, to značite je producer, obacio možda mi smemo da obacimo, pokunzium je pokupio, nulla nulla bila na početku, pitnosti nam je počtiv, nulla nulla bila na početku, počutno je obacio element. Kada ne smemo da se preuzme nove element, ne smemo da postane da je konzium već je od prodjus za jedan, možemo da što prezvodi da obaci sljedeći element i tako možemo da se pomerimo za jednu lokaciju. Mi kojićemo sada ovdje da realizujemo, a koristići ovo što smo videli ili možemo da realizujemo, sve smo rekli što je bravo. Imamo jednu elementni prihvatnik, u našem bapu pisujemo nešto, ovdje u bapu pisujemo nešto, imamo dva brojača, znači nejamo tri, imamo dve promenjive, jedni je p plus drugje c konzium, i što radi prodjuser? Kada prodjuser čeka? A prodjuser čeka ako je p 1 t, a wait dok ne postane u sluvi 1, međe ako 0 0, lobodno je smem dobacit, samo konstatacije što sam reklo ako? Ko? Kola je 1 ko 0 u sluvi 1, znači wait prolaze za tru, ako hoćemo da se zamlokiramo, treba da napišemo kontrolosan. Ovo što onda ovdje odredimo, kažemo u baper ubacit ta element i uveći p za 1. Košta sam sam ovdje napisao? Zašto ovde nisam stavio možda s informizaciju? p je 1 ko 5 plus 1. Za sada je to vrlo jednostavno, on delu koda, koliko procesa može da se izvršava? U 1. Ako može biti samo 1, njema potrebe za dodatom sigur. Jo sam ovde moglo da napišem i to odberatu treba da napišem, a da se ovo odredi ne deligo, ali nema potrebe za tim. Ja sam 1 jedini proces koji to radi. Ako sam ja 1 jedini proces koji nešto radi, potrebe za sigur. Pa radi što? Želim da odredi koziume. Ako koziume, želim da kažemo. Kada dokve on mora da čeka? Mora da čeka dokve god p ne postane veći od c. Postoji nešto u bufferu. Pročitejte element iz buffer, znači za sada gledamo jedno element i ba. A i uveći to c za 1. Svije pitanje, dali bi možemo ovo ovde, ovako kako je napisano, ali svojati za već. Za vajl. Če dali je ovdje svim da stavimo vajl. Mot. P. Pče od T. Skip i dali na onom predkudnom slajdu. Vode. Ja svim da stavimo vajl. Not, odnosno p različito od c. Ajde mi to tako. P. Pazličito od c. Skip. Dali ja to sada smijem da napišam? Mislim ja smijem da napišam svašta nekako do to radi. P je promenjiva, koja se formira. Koja je promenjiva? Šta je priča? Ovo što ovde radi? Ovde nikde ništa ne upisujem. Ajde ovde radi? Ovde u stvari piša. Load P. Load P. Kom P? I onda radimo teki posao. Šta piša na onom naravnom slajdu? Piša. Load P. Load C. Compare. Ili sub. Instrucija i onda ako je već od nule radi jednu stvar, ako nije već od nule radi drugu stvar. Odoče ja sam učitav i P i C. I sad i pitanje, to onda smijem je tako da odradim. A zato što možda nije ispunjeno at most once property. I verovatno nije ispunjeno at most once property. Nego ja to moram da realizujem. I drugi način. Možda i ovom konkretu toču je ispunjeno at most once property. Niko drugi nije mogao da promeni tu promenljivu. Znači možda sam ja ovde čitava samo jednu promenljivu koju neko drugim od nije. Pa sam ja tu koristio, ne delivam i bilo. I ovde, pošto je ovde jedna specifican slučaj. I vam samo P promenljive, P i C, jedno elementlji prihladnik. Možda se besiti da imamo veći broj prodjusera i veći broj konje. I ovom konkretu stuči to vi razmislite. Da vidite dalje ispunjeno da na dojima ovde u stojima bude at most once property. Ako jeste fenomenalno. Ako nije, ono mora mu da pređem već ideo. A to je kako izgleda synchronizacija. Synchronizacija je malo svora. Imanćemo entry protocol, to je YELL SMEM. Onda radim neki posao u kritičnoj sekciji. To je u pocijelamentu buffer i pomeritim. Imo Exit protocol, šta radim da obavestim nekom drugom. Ako uznete da gledate. Nečina programskih segmina tako. Da ima ti će izgledati baš ovako. Entri protocol, kritična sekcija, Exit protocol. Da ima dozvolu, odradim nešto, pošaljem nekom dozvolu. Kome šaljem dozvolu i kako sam je dobio, to ovde za sada ne razmišljamo. Ali to je nešto što mi treba dobio. Zm'j, pospojim. Tražim dozvolu i v koroc se svi naši programski segmenti izgledati baš tako. Da ima dozvolu, radim nešto, vracjam dozvolu, odradio sam posao. Ako sam uvijek, da ima dozvolu, radim nešto. Ako sam uvijek, da ima dozvolu, radim nešto. Ove za sada se pojavlje, nekoliko, veoma, veoma biti. To stvari da, rademo dovoditi dozvolu. Uvijek smo reke, na jedan od dva najbitnije konce. Da nam se nedesi, mi krenuli da čitamo jednu promeljivu, a dok smo to nešto radili, kao maloče što pisalo y1 koj y1 plus 1, da se ta promeljiva ili neka druga promeljiva promeljiva nevalja nika. Osim, ako to nama ne služi možda za synchronizaciju, ali za izračunaciju na tovaš nevalja. Da napišamo y1 plus y1 i dobijemo neku bezu. O čemu takođemo dovoditi? Pa koncepta. Dedlock ili livelock. So koncentrum dedlocka ste se već, da smo lajpo opoziti. Ali ajde da ponemu sada ovdje što je dobro. Procesi, odmistno biti, ne mogu da napreduju dalje za blokiranifu, način alazi su listi blokiranih, zato što čekaju da se desi događi da neku drugi njiho kom. Ali postoji kružna zavisnost da jedan čeka neku drugog, drugi neki čeka nekom trećeg, trećeg na prvi čeka ono prvog, i postoji kružna zavisnost, i u svih tih procesa i oni ne mogu preduju dalje u služi pravašnji. Blokiranis, način alazi se u listi blokiranih. Za razvijek od dedlocka, a, postoji konci, buvam, u barfogbu.