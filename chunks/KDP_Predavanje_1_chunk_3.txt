...iz doba Jure, šta još ima? Ima mnogo množenja matrica, znači ima nekih 20-30 problema kroz koje ćemo mi prolaziti. Za ove prvih nekoliko karakterističnih problema, kad dobijete tako nešto na ispitu, nećete imati nikakvu postavku širu od toga, dok za ove druge, malo manje karakteristične probleme, dobićete malo duži tekst koji opisuje to. I dobijete onda način ili paradigmu u kojem treba da rešite to što imate da rešite.

Na ovom predmetu imamo laboratorijske vežbe. One će se održavati tokom semestra. Predviđeno je da budu dve laboratorijske vežbe u programskom jeziku Java. To je tamo negde 9-13 nedelje, kada budemo dobili odgovarajući termin u sali, će se to raditi. Nisu obavezne. U alternativi sa laboratorijskim vežbama stoji projekt. Možete da izaberete i jedno ili drugo. Možete izabrati i oba, ako hoćete, ali se onda gleda bolji skor od ta dva. Nose maksimalno 20 poena i važe godinu dana. Tu na početku ćemo imati sinhronizaciju i niti, kako se radi mrežno programiranje i kako se rade udaljeni pozivi metoda. Znači, imaćemo laboratorijske vežbe gde mi vama nešto pričamo. Imaćemo i laboratorijske vežbe gde vi treba da napišete program, koji treba da proradi. To se neće ocenjivati. Samo napisali ste nešto, kako imate lepo? Ne, to mora da radi. To što ćete postaviti na kraju treba da radi. Da se mora da radi sve, pa mi ćemo se potruditi da to iseckamo na nekoliko delova. Ako ste napravili dobru sinhronizaciju na prvom delu, prvog primera koji radimo, to dobijete poene za to. Ali ako za drugi deo problema, gde možemo da koristimo neki scoreboard, koji će biti modifikacija čitalaca-pisaca, a ako to ne uradite tačno, tu nećete dobiti poene. Znači, ovde treba da napravite nešto što radi. Što radi brzo. Jer u većini ovoga može da se uradi i radi sporo. O tome ne treba konkurentno programiranje. Jednostavno se realizuje sve, to je, kažem, odradite na jednom računaru. To nije cilj ovog predmeta. Ovde treba da iskoristimo to što imamo sada na računaru, gomilu jezgara. Treba da ih uposlimo da se naš posao završi što je moguće pre. Znači, mi želimo što je moguće ranije da dobijemo odgovor. Da posao bude odrađen.

Na ovom ovde predmetu, vi možete napisati rešenje koje savršeno tačno odradi posao, gde nećete dobiti mnogo poena. Zato što ste ubili performanse sistema. Ovde treba da naučite ne samo da će neko da radi neki posao. Mi ne radimo taj posao, mi nemamo posao, tu neku metodu "it, drink, drive". Mi nećemo to pisati na ovom predmetu. Na ovom predmetu ćemo praviti sinhronizaciju uglavnom i komunikaciju. A taj neko drugi će to pisati. Ali mi želimo da se posao koje taj neko drugi treba da odradi, odradi što je moguće brže. Da li će tu biti puno linija sinhronizacije? Pa, obično neće. Ako napišete rešenje koje ima dve strane na ispitu za neki zadatak, verovatno ste nešto pogrešili. Ne očekuje se da vam rešenje ima dve strane. To ne znači da to rešenje koje ima dve strane nije tačno. Samo se ne očekuje da na taj način programirate.

U alternativi sa laboratorijskim vežbama, moguće je uraditi projekt. Projekt je nešto praktično da se implementira u programskom jeziku Java. I to je tako napravljeno da se ocenjuje po principu "uradili - niste uradili". Ili ste uradili sve i lepo uradili sve, ili je 20 poena ili je 0 poena. I obično je 20 poena. Zato što ste u tim imenima mogli da stavite da je to verovatno i još u narednom roku ponovo aktuelno. Jer je isti projekt u januarsko-februarskom roku, junsko-julskom roku, a u avgustovsko-septembarskom, ako sad postoji oktobar, onda je u oktobarskom roku. Ali taj isti projekt je obično u ta dva vezana ispitna roka. Zadaci koji dolaze za projekat su obično nešto što ste već sreli, nekad ste videli. Na primer, kako funkcioniše agencija za rezervaciju karata. Šta ako imam ja tu gomilu avio karata ili hotelskog smeštaja, ili kako funkcioniše berza, kako sinhronizovati sve to, ili kako bi možda radar mogao da prikupi informacije sa gomile nekih različitih strana, ili, na primer, kako sortirati niz. Vi ste slušali različite predmete na predmetima Algoritmi i strukture podataka, neko spoljašnje sortiranje ili koje god.


Ovde je jednom bio zadatak da se nekom danom niz sortira. Samo što je taj niz malo veći, znači to je da vam neko da fajl od 4 gigabajta i kaže sortiraj. I tu su manji brojevi, veliki brojevi, i onda vi treba nekako da smislite kako to da odradite što je moguće brže. Dakle, ovaj ovde projekat nije samo da imate sinhronizaciju, isto kao i na laboratorijskim vežbama. Nije samo sinhronizacija u pitanju, nego ima i neke obrade koje treba da se naprave u pozadini. A projekat branite najdalje u onom ispitnom roku u kojem ste polagali ispit. Znači ne možete da polažete sad ispit pa za tamo 6 meseci i da se setite da želite da branite projekat, to ne možete, ali obrnuto to može. Sada odbranite projekat pa za 6 meseci dođete da polažete ispit, to je dozvoljeno u ovom praćenju predmeta. Šta su nam pred ispit na ispitu? Pa, obaveza, tokom semestra imate dva kolokvijuma, a ako radite tako tokom semestra, onda su prvi i drugi kolokvijum po 20 poena, a ispit, to jest 3. kolokvijum je 30 poena, a to ukupno u zbiru dođe 25-25-30 = 80 poena. Zadaci i teorija sada ovom. Teorija je, neće niko od vas otprilike očekivati, ajde, sad ti meni izdeklamuj pesmicu šta je nešto. Možda se desi. Napišite taj-taj algoritam, a onda modifikujte taj algoritam da radi nešto drugo ili malo drugačije, ili, na primer, koristeći test and set, za sinhronizaciju nećemo tako, nego se onda, umesto instrukcije test and set, pojavi instrukcija swap. Znači, prvo treba da napišete neki algoritam i onda da kažete, ok, ako nemam tu instrukciju na datom procesoru, nego imam instrukciju swap, kako ja to isto da realizujem, tako da tu se i očekuje, napišete ovo čudo, napišete ovo ovde i kažete, kako ste to realizovali, to prebacivanje. Znači tako da tu možete da kažete da postoji teorija, moram da znam nešto iz teorije. Ali su to zadaci, gde vi treba nešto da uradite konkretno? Ovo je bilo u prvom ispitnom roku. U ostalim ispitnim rokovima ima situacija malo drugačija, imamo konkurentno programiranje koje nosi 40 poena, imamo distribuirano programiranje koje nosi 40 poena. A ako želite da vam se prenesu ovi zadaci iz kolokvijuma koji su se radili tokom semestra, onda su oni pomnoženi sa 0,8, tako da od onih 50 skalira na 40, ili možemo da kažemo ne, nama kolokvijumski zadaci nose 20 poena, a onda su u prvom ispitnom roku oni pomnoženi sa 1,2 ili tako nešto, a u ostalim ispitnim rokovima ima se gleda samo njihov zbir.

Tako da možete da posmatrate na koju god hoćete stranu, nego nama je jednostavnije da napišemo jednu ovakvu jednačinu, zato što većina studenata to položi u tom, na početku, pošto kažem, ovaj predmet, on nije težak. Dosta studenata se možda plaši ovog predmeta konkurentno i distribuirano programiranje, ali ovaj predmet uopšte nije težak. Kompletna prva i druga kolokvijuma čekam, možete proći sa znanjem koje imate do sada, ako znate to lepo da primenite. Sa onim što ste slušali na predmetu Operativni sistemi, kako se pravi sinhronizacija, nekako se prave semafori i monitori u pozadini, taj deo nas ne zanima, kako se nešto pravi. Znači nemojte nam napisati tamo parkiraj i nit, isparkiraj i nit, to nije ovaj predmet. Ovde to treba da iskoristite da rešite neki sinhronizacioni problem. Znači treba da se reši neki sinhronizacioni problem, mi ćemo krenuti sa rešavanjem tih sinhronizacionih problema na ovom predmetu. Ocena je postavljena na plus, znači nula plus. Da li ima literature na ovom predmetu? Na ovom predmetu imate knjige na srpskom i engleskom, na srpskom jeziku "Konkurentno i distribuirano programiranje", autori su Radivojević i Kudinović Ivanović, to je izdanje iz 2018. godine, imate izdanje iz 2008. godine ili tako nešto, znači koje je staro izdanje, a nešto malo manje gradiva, ovde je pokriveno sve, što se radi na ovom predmetu, skoro sve, pokriveno je sve, samo možda nije na mestu gde vi očekujete to tako pokriveno. Ovi prvi video, koji mi budemo razrađivali, će biti obrađen pod programskim jezikom Java. Imaćemo na konkretnom jeziku, ćemo videti sve ove naše sinhronizacione algoritme.

Na ovom ovde predmetu, vi možete napisati rešenje koje savršeno tačno odradi posao, gde nećete dobiti mnogo poena. Zato što ste ubili performanse sistema. Ovde treba da naučite. Ne samo da će neko raditi neki posao. Mi ne radimo taj posao, nisu imamo posao ti tu neku metodu. It, drink, drive. Mi nećemo to pisati na ovom predmetu. Na ovom predmetu ćemo praviti sinhronizaciju uglavnom i komunikaciju. A taj neko drugi će to pisati. Ali mi želimo da se posao koje taj neko drugi treba da odradi. Odradi što je moguće brže. Da li će tu biti puno linija sinhronizacije, pa obično neće. Ako napišete rešenje koje ima dve strane na ispitu za neki zadatak. Verovatno ste nešto pogrešili. Ne očekuje se da vam rešenje ima dve strane. To ne znači da to rešenje koje ima dve strane nije tačno. Samo se ne očekuje da na taj način programirate. U alternativi sa laboratorijskim poslom je moguće zaraditi projekat. Projekat je nešto praktično da implementirate u programskom jeziku Java. I to je tako napravljeno da se ocenjuje po principu uradili-ne uradili. Ili ste odradili sve i lepo odradili sve. Ili je 20 poena ili je 0 poena. I obično je 20 poena. Zato što ste u tim imenu mogući istaći da to je verovatno i još u narednom roku ponovo brana. Jer je isti projekat u januarsko-februarskom roku, junsko-julskom roku, a u avgustovsko-septembarskom ako sad postoji oktobar, onda je u oktobarskom roku. Ali taj isti projekat je u obično ta dva vezana ispitna roka. Zadaci koji dolaze za projekat su obično nešto što ste već sreli, nekad ste videli. Na primer, kako funkcioniše agencija za rezervaciju karata. Šta ako imam ja tu gomilu niti avio karata ili hotelskog smeštaja, ili kako funkcioniše berza, kako sinhronizovati sve to, ili kako bi možda radar mogao da prikupi informacije sa gomile nekih različitih strana, ili na primer kako sortirati niz. Vi ste slušali različite predmete na predmetima Algoritmi i strukture podataka, neko spoljašnje sortiranje ili koje god.