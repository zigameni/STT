 Šaljemu poruku i od kog procesa primamo poruku. Direktno imenovanje. Pleče? A, imamo posebne iskaze za razminu poruka, kako se šalje poruka, kako se poruku. I poruka je synchrona. Imamo poruku tačka tačka. Point-to-point komunikacija ako neko. Šalje poruku, ako proces A, šalje poruku procesu B. Proces B, mora da kaže ja primam poruku od procesa A. Ne reko to ne. Paj, nulnumarca, oblokiranje. Procesu, šalje poruku se blokira dok se poruka ne isporuči. Procesu primamo poruku se blokira dok kog se poruka ne privi. A vidićemo da je to možda i nije baš tako. A, taj možda ne mora odmoj da se znamit. I na nego možda može da promeri više stvari pa tehne. Ajde, da vidimo kako se ovo ovde zapisuje. A, jezik. Pa, sada, lići možda na C, sa jednom malom razlikom. U Ceu smo imali i ti česte zagrade. E, ovde neće imati i ti česte zagrade. Ovde ćemo imati pošta česte imate. A, kako se imaju neki proces? Kako kažemo nekom procesu u kojoj njegovo ime? Pa kažemo ime procesa. I onda nakon toga stajemo dve botačke. I nakon toga dođe implementacije kako izgleda taj proces. A, primjer proces 1, proces 2, kako gleda kako. A, kako kažemo da se neke stvari izvršavaju u paraleliju? Pogledo smo stavili jednom prvo jednostava način. Stavili smo dve usprne crte. Ako stavite dve usprne crte, proces sa leve strane i proces sa desne strane se izvršavaju u sto vremeno. O, znači, parale, ako stajemo još, ovde stajemo neki treći proces, imaćemo procese koji se izvršavaju u sto vremeno. Znači, prvo jednostava način da mi kažemo, oni smo treneramo novom dit, a stavimo unglazte zagradice i stavimo kako se zovuti proces i odnijku što oni treba da radim. Svaki proces mora da ime ime, da mogao s nekim da komunicira. Ako nema ime, onda ne može da komunicira nisa. Što ovdje imamo? Evo ovdje dole imamo proces x1, a onda o telo. Pa se procesa u zove x2, pa njegu u telo, pa proces xn pa telo. Kako ćemo da šaljemo i napriječno? Poruka se šalje tako što novedemo. U ovom procesu šaljemo poruku, pa dođi znak uzvik, i onda dođe samo poruka koji žalimo da bo. Lani poruka je synchrono i realizuje se tako što kažemo. Ime procesa, stavite uzviknik i pošeljete poruku u procesu. Kako se prima poruka? Ime procesa od kog želite da primite poruku, znak pitanja, i kažete ja sam od tog procesa primam poruku mesič. Šta je ovo ovde mesič? To treba da sadrži. A nekako mu opiste poruka. Ima. Treba da sticitiramo kako se to naša poruka šalje odnijeku. Dalje je ta naša poruka nešto što se zove? Prosta, dalje prosta ili složena poruka. Prosta poruka bi bila pošelj je broj pet i ovaj ovo je u neku promeljivu a, smestitaj broj pet. A složena poruka bi bila, nemoj da pošelj je broj a, samo nego pošelj je i pet i seda mi sadrži promeljive c. Tri neke vrednosti možete dopovići. A što ovi z druge strane morate da radi, morate da stavi objekat nekih koji će imati odnijek u tri neka polja, koji će popuniti da bi ovo ovde mogno dofiniti. A, je to samo složena poruka. A, složena poruka može da budi ili ošnešto. Složena poruka može da ima ime. A ako ima ime, onda se to na neki način specifiravnoj tarpolji. Ta poruka, može da ima ime i može da ima argument. Rekli sam, može. Mora barem jedno od ta dvade. Jer mora da ime ime, nemora da ime ime. Mora da ima argumente, nemora da ima argument. Če dovolj je nekada pošlite samu poruku po imenu, ova druga strana kaže, ja očekam poruku koji se zove, na primje, star 3. A, na primje od procesa čitalat želimo da dobijemo poruku, odnosno, mošemo dobijemo poruku, ja želim da čitam. Poruka je star 3. Imamo nikakvije argumente, ja želim da čitam. Nije ima argumentata. A, dovolj. Mogli bi smo da stavimo i neki argument, ako želim iz neko drazno. ID je to. ID, nemoramo da stavimo. Zašto nemoramo da stavimo ID? Pa, rekli smo, imamo synchrono komunikaciju, gde moramo tačno da navedemo ime procesa. Ako smo tačno naveljim ime procesa, pa šta ima ta i ta nam se predstavlja, kad već znamo, aha, taj proces primilismo poruku. Tačno znamo ime procesa. Ajde, imamo šta još postoji u ovom ovde i jeziku. Ja sam reklao da ovaj ovde jezik ličinac. Do neka. Šta znači do neka? Pa nema 4-wire-leaf case, tako da možda i ne ličinac. Ilićemo jedan jezik na narodom času koja je kombinacija. A ovog jezika koji se zove PSP i pragemistog jezika C, to je pragemistog jezika GO, koji se sada koristi. Koji je baš svar koji je kombinacija. Garc, do sada ni istim. Rad je izraz koji se sastoji iz 3 deja. Prvi deo je. Koje je bilo izraz treba da bude ispinit, da bi ja radi o nešto. Prvi deo je. Koju poruku ja treba da primim, ovde za sada koristimo samo prijem porokima, da neke variante jezika CSP dozvoljava i uslanje poroke, a mi za sada koristimo samo prijem. Prvanta izvoljava samo slanje poroke. Ziju se samo prijem poroke. Znači mi možemo ovde da kašno. Ako je x veći od 3 i ako mi je proces PS, 1 poslo o poroku, ja ću doden da radimo ovde PS. Ako je to je ispineno i ako je ovaj poslo o poroku, ja idem dalje. U čemu bi se to razlikovalo? U odnistu ja samo da napišem C, znapeca ilu me napišem S. Ovo ovde znači da ja moram da primim, moram da primim poruku, a tekada primim poruku da pređem na ovu ovde S. Ako stavim ovako, ja mogu da napišem ako je stiglo B, ako je uslo B ispunjen i ako mi je poslata poruka, ja idem dalje, to je sada kombinacija koji ćemo mi koristiti. Ovo ovde se nazivio guard, pit, naš titnik, i štitnik, ili kakvod ovog naše liste iskazakotreba da se izvrcala. Znači Ako je B, jednako true i izrušavanje cene, izazivio delay, to znači da može da se odradi, onda mi radi. Ako je B false ili nikoli nije poslo boruku, nije ćemo ući u ovu ovde, u stomoženo... Možda u ovu znači zvucu, smislim, u čemu to može. Ovo ovde, sveć je stvar koji su stavili kojog kontrolnu struku. Alternativna komanda. Alternativna komanda, kak možete da vidite u kustini moci, a ovoga što ima? A ta alternativna komanda u kustini nama kaši. Ako mi je P, proces P1 poslo nešto, onda radi je S1. Ako mi je na prdne P2 poslo nešto radi ovo ovde, ako mi je P3 i u spolji ispunjen, ti radi nešto drugo. Ovo je ovde način, možemo da specificiramo. Ako je pa više stvari, je moramo da čekamo na jednom jedinom. Do sada smo morali da čekamo na jednom jednom uslovo. I u gav, nije baš to najbolje napravljeno, ako koristiti tove blokirajuće toh koje podataka, ako dođete na blokirajuće tog, ja mogu da čekam samo na jednom blokirajućem tog. To je ovde razvršeno, znači to je problem koji usmimuli u programiskom jeziku, java blokiranje je na jednom tog koje ovde vrlo eleganca na razvršenom. I nije nisam za blokiranje, ja ne mogu da napredujem dađe, ali možemo da smatrete kao da ja zaposlenu čekam, u tu pa se vratimo na ko pa provera, u dve će mi biti istuneno. I ja se ne vratim zaposlenu, ne čekam zaposlenu, ja čekam na bilokom od svi uslova, pod uslom da je tada i ovaj bulom, i ovaj bulom izraz izpuneno. I kad se desi da je to nešto izpuneno, ja će otvici da radim jednu odopuje akcija.