 U lekciju o parsiranju odnaka vrhu, pocitajemo se poima parsera i proučiti jedan konkretan metod parsiranja koji se zove Shift 3Dus, odnosno parsiranja na principu potiskivanja isvođenja. Videćemo kako se konstruiš određane kategorije Shift 3Dus parsera i takođe videćemo moguću pojevo konflikata u Shift 3Dus parsiranja i kako se izboriti sa tom negativnom pojavom. Da se pocitimo dranije, parseri algoritm koji otvrđuje za zadat u ulaznu sekvencu dali pripada jeziku zadate gramatik. Ako sekvenca pripada, parser određuje izvođenje pospatre na ulaze sekvence i startnog neterminala gramatik. Opshto strategije parsiranja razlikuju se u tome u kom smeru parser razodkriva ili rekonstruiše stablo izvođenja ulazne sekvence. Znači parseri od vrha kad nu, odnosno top down parseri rekonstruiše u stablo izvođenja počev od korenaka listovima, a parseri odnaka vrhu rade suprotno, znači rekonstruiše u stablo izvođenja ulazne sekvence od listova ka koren. Parseri su zasnovani na konceptu potisnog automata i neformalno ćemo ga definisati kao neku vrstu proširenja kornacnog automata, znači automata s kornacnim projem stanje, da je dodata struktura steka, to jest first in, first out struktura. I to čini znači potisnja automata u suštini moćnim formalizmem, nego konacna automata. Potisni automati znači su jednako jako formalizan za opis jezika kao bezkonteksne gramate, to jest za svaki jezik da koji može, koji može da se opiše bezkonteksno gramate koji može da se konstruiše i potisnja automata i obrnuto znači svaki jezik za koji postoji potisni automat, postojači bezkonteksna gramate ka koja ga opisuje. Sada ćemo definisati shift reduce parsiranje, to je jednu vrstu, znači parsiranja odnaka vrhu po principu potisnjima i sažimanja ili potisnjima i izvodjenja, to je, znači prevoda engleskog termina shift reduce. Reči jednom potisnom automatu koji je definisan skupom ulaznih simbolja, skupom simbola steka, početnim stekom i potisnom i kontrolnom tabelu. Na ovom slajdu imamo primer i jednog shift reduce parsera za gramatiku koja je ovde data od četiri smene. U suštini mi često, to ćemo kasnije definisati, proshirujemo formalno, ove gramatike dodatno mnultom smenom koja ima dodatni simbol, novi neterminal kao starti simbol, recimo S-prim, a na deštnoj strani ima primorigelni starti simbol S i za čega sredi jedan novi simbol a to je marker kraje ulazne sequenci, a on je kao položeno slovo T, nače on se smatra jednim dodatnim ulaznim simbolom, koji se pojavlju je ulazne sequenci tačno jedan put i to na samom kraju ulaza, način nešto kao u programiranju endo file. Elementi parsera su znači skup simbola steka, znači vrste ovih tabela označene su simbolima steka parsera. I za ovog primera već možemo videti da simboli steka odgovare u gramatikim simbolima kako terminalima, tako i neterminele, ma međutim vidimo i ove dodatne oznake u vidu indexa i vidimo da u opštom sluču jedno gramatickom simbolu može odgovare u veći broj simbola steka, na primera ovdje imamo 2a1 veliko a11 i veliko a12 odgovare u gramatickom simbolu a. Opet malo uprašćeno posmatrano, simboli steka u suštini odgovaraju po jedinačnim pojavamu odnosno dešavanjima gramatickih simbola na destim stranama smena. Tako da recimo a1 jedan odgovara prvom ovome simbolu veliko a na destoj strani prve smene, a a12 odgovara drugom dešavanju, na destoj strani prve smene. S1 odgovara dešavanju gramatickog simbola s na destoj strani prve smene, malo a4 odgovara dešavanju simbola malo a na destoj strani četvrte smene. Sada zanimljivo je, videte, ovaj simbol a, a u indexima malo x, može se desiti da jedan stek simbolu stvari odgovara ne jednom određenom dešavanju gramatickog simbola na destoj strani neke smene, nego u opšten sluču skupu dešavanja, oto jest pojava simbola gramatickih na destim stranama smena, koji odgovarao i istom gramatickom simbolu. Znače, ovo malo ax u suštini može da predstavlja ili ovaj simbol malo a na destoj strani treće smene, ili ovaj simbol malo a na destoj strani četvrte smene. Odnosno, videte, ćemo kasnije da parser u toku rada kad mu se ovaj simbol steka pojavi na vrhu steka, a kada je ovaj ax, još ne zna, da li je prepoznao treću ili četvrtu smeno, potrebno ne su mu dodate informacije da jedno značno odredi svoju sledeću akciju. Ovde imaju još dva simbola steka koja nisam pomenio s sa indeksom 0, znače, ovo 0 deluje na prepogled zbunjujće, ali objasnijo se da se gramatika često porušiluje onom nutom smenom koja ima, ovaj početni simbol s na destoj strani, a i za toga dolazi jednog marketa, kada u suštini ovo s tu možete schvatiti kao pojavu, tk startom simbola na destoj strani nultesmene. I konačno postoji ovaj stek simbol koji nema svoj pandan u gramatikim simbolima, to je oznaka obrnutotrougao ili navla, specijalni opet znak, koji označava dnostek. Ovoj simbol ima značenje da se u toku rada parsera nalazi jedna instanta tog simbola na steku, i ona je znači na samobnu steka, znači on se stavlja na stek, niti skida sa steka, znači kad sam pojavi na steku, to ima značenje da je stek ispražnjen od ovih drugih simbola steka. To su simboli steka, ostali elementi ovoga parsera, su skup ulaznih simbola, ulaznih simboli vide s ovom drugom, tk. kontrolnom tabelu, označavaju njene kolone, i oni se mapiraju na gramatike terminalne simbole, znači ova gramatika ima terminala, naravno prazna sequenza nije terminalne gozna, kad tu nema na destoj strani ništa, i konačno dodatni terminalni simbol Endmarker je poslilica proširivanja gramatike nulltom svenom, znači terminalni simboli su A i Endmarker. Ova druga tabela potisna tabela, znači u svojim kolonama ima gramatike simbole, znači kako terminale, tako i neterminale. Pored znači stek simbola, ulaznih simbolam, Shift-Rid-D-U-S parser posleduje dve tabele, tk. potisnu tabelu, to je ova leva tabela, i kontrolnu tabelu, to je ova desna tabela. Svaka u njih ima svoju specificnu ulogu. I još jedan dodatni element definicije Shift-Rid-U-S parsera je početna konfiguracija steka, svih Shift-Rid-U-S parseri počinju sa početnim stekom praznim, odnosno jedini simbol na steku je ovodno steka. Skup ulaznih simbolara, rekli smo se stojio terminali simbola, simbola parserskog steka smo obješnjavali, potisna tabela. Znači potisna tabela određuje, koji simbol steka se određeno trenutku potiskuje na stek. Znači potisna tabela je ova ovedela, je ova tabela i ona znači poštu u opštom slučaju veći broji stek simbola odgovara određeno gramatickom simbolu, potisna tabela kada postoji potreba, da se na stek stavi neki od gramaticki simbola, znači koji određuje ove kolone, potisne tabele, potisne tabele kažu, koji konkretni simbol stek se stavi na stek, da uradimo operaciju pušar, potisno, potisno, veliko a, ne terminala na stek, onda konsultujemo, potisnu tabelu za kolonu veliko a, a vrsta je određena vrhom trenutnim, vrhom parserskog steka, znači, uz avisnosti od toga šta je na vrhu steka, biće konsultovan odgovarića vrsta potisne tabele i onda se, iz ulaza potisne tabele, čita, ako je stek bio prazana, treba da stavimo veliko a na vrhu steka, onda potisna tabela kaže, da je to stek simbol a1, je sad neki ulaz i potisne tabele su prazni i oni odgovaraju grešci u toku rada parsera, dačo u toku rada parsera dođe do situacije, da se konsultuje prazan ulaz potisne tabele, to automatiki znači da ulaz na sequence nije ispravna i da parser završava rad sa tim, negativnim zaključkom da ulaz nije ispravna. Kontrolna tabela, na druga tabela parsera određuju akciju parsera na osnovu tekućeg simbola na vrhu steka i tekućeg ulaznak simbola. U kontrolni tabeli može se naći četiri tipa parserskih akcija, prve dve su da kažemo finalne akcije, znači završavaju rad parsera, akcija akcep znači uspešan završetak parsiranje ulazna sequence je ispravna, opisa na grammatikom, a akcija ne uspešan završetak parsiranje ulazna sequence nije ispravna. Zatim preostala dva tipa parserskih akcija su shift, to je jedna složena akcija, koja opisuje šta se dešava sa stekom i šta se dešava sa preostalim ulazom. Šift se svodi na akciju nad stekom, a akcija nad stekom je potiskivanje tekućeg ulaznak simbola na vrh steka uskon srutaciju potisne tabele. A nad ulazom se radija dvanso odnosno ulazu konzumira se tekuće ulazne.
 i sledeći simbol, znači, posle tekućek postaje za sledeću korak parsera tekući ulaz. Znači, prelazi se na ulaz u jedan simbol u desn. Pričan u su ulaz čita znači, sleva na desnom znak-pod znak. Konačno, ova finalna parserska akcija, reduce odgovara prepoznavojno, znači, ima ono liko reduce akcija, znači, je parametra P, redni broj smene i ima ono liko različitih reduce akcija, koliko ima smena u grammatici. Znači, redupcija smene P odnosno njenosa žimanje ili svođenje. Znači, da treba sa parserskog steka skinuti ono liko simbola steka, koliko iznosi dužina desne strane smene P. Znači, ako na desne strane smene P ima tri simbola, onda treba te uraliti tri puta pop i zatim, posle toga na stek treba potisnuti simbol leve strane smene P na vrh steka uskonsultaciju potisne tabele. I to je isto bila komponenta znači, a žuriranja steka, a komponenta žuriranja ulaza je ova akcija Ritane. Akcija Ritane ova značava da ulaza ostajne izmenjen, odnosno ono što je bio tekući ulazni simbol u posmatranom koraku, biće isti taj simbol, biće tekući ulazni simbol i u sledećem koraku. Znači, na ulazu se nekonsumira ulazni simbol. To je malo različit od konacu oga automata, koji je bezoslovno u svakom koraku, konzumira o tekući ulazni simbol. Ova druga tabela je kontrolna tabela. Na primer, ako na ulazu, vide ćemo kako znače, u toma tradi ova kontrolna tabela u svštini diktira rada automata. Znači, ako na tekućem ulazu dolazi ulazni simbol A, a vrh steka je, na primer, prazan stek, onda kontrolna tabela u tekućem koraku Radak Parsera su gjeriša, na primer, akciju shift, prema onom obješnjenje. Ovo su bile operacije nad ulazom sequencom, advance prelazak na sledeći, ulazni simbol u skonzumiranje tekućeg, aritejn je akcija koja značila da se ulazne dirav. I evo, ovde, ove slajedilustro je rado ovoga našeg automata, koji smo kao primer naveli u nekoliko slajedovog unazad. Pričamo, znači, nismo objastili, naravno, to sledi u nastavku lekcije, kako doći do jednog ovako parsera, nego smo znači krenali od gotovog parsera kao primera. Znači, neka kao trej srada parsera, prikazuje se u ovih nekoliko kolona. Znači, uprve koloni pišemo redni broj koraka, znači Rad Parsera obavlja se u diskretnim koracima. Sledeća kolona je sadržaj parserskog steka. Tek se obeležava, tako što su vek piše sa leva, nadestno znači raste stek. Znači, uvek vrh steka je ovaj krajnje desite u svakom koraku. Sledeća kolona je preostali ulaz, prvi od simbole uvek tekući ulazni simbol u posmatronom koraku, i konaču ovdje se evidentira akcija kojiće parser u datom koraku preduzeti. Znači, inicijalno u prvom koraku, rekli smo shift-reduce parser uvek reći od praznog steka, to znači, da je celo sadržaj su svodi na ovodno steka, preostali ulaz je kompletan ulaz, ovom primjeru smo uzeli dva mala a i end marker ka ulaznu sekvencu, tekući ulazni su simbole ovo prvo a. I znači, sada konsultujemo kontrolnu tabelu, to je ova desna tabela parsera, vrh steka određuje vrstu kontrolne tabele, a tekući ulazni simbol određuje kolonu, znači, čitam ulaz u vrsti prazan stek botom marker, i kolon ima vrstu akcija shift, znači, evidentilno do pitanju akcija shift, kako je efekta ima akcija shift, ona znači efektivno sa ulaza potiskuje ovo mala na vrh steka, pri čemu konsultuje potisnu tabelu, znači, potisna tabela se konsultuje za trenutni vrh steka preizvašavanja, znači, te akcije shift, i za naravno, o najsimbol koji potiskujemo, vidimo uvaj prvoj vrsti prazan stek, i kolona malo A piše AX, izbog toga je znači, ovdje na stek stavljen simbol AX, A, ovo A je uklonjeno sa ulaza, tako da ovo drugo A postaje tekući ulazni simbol, i sada u drugom koraku konsultujemo kontrolnu tabelu za vrstu malo AX, i za kolonu malo A, znači, to je ovaj ulaz, piše reduce 4, parcer preduzima saživanje 4. smene, a to znači da, sa vrha steka, skida, znači, 4. smena, vidimo ima na levoj strane veliko, na desnoj strane, jedan simbol malo A, znači, treda prvo skinuti jedan simbol sa parcenjarskoj steka, znači, skida se ovo malo AX, i ostaje u tom trenutku prazan stek, a zatim, potisnuti veliko A le u stranu 4. smene na vrh steka, znači, konsultuje se potisna tabela za prvu vrstu, znači, prazan steki veliko A, piše A1,1, i zbog toga sma znači, ovo malo AX je sad zamenjeno u trećem koraku sa ovim velikim A1,1, ulaz ostaje nepromenjen, znači, ovo A ostaje kao tekući ulaz i za ovaj sledeći koraku. Znači, u trećem koraku, veliko A1,1, određuje vrstu kontrolne tabele, a malo A određuje kolonu, i piše akcija shift, akcija shift znači da se ovo drugo A sada sa ulaza seli na vrh steka, uz konsultaciju znači u vrsti A1,1 i koloni malo A, piše A4, znači, potiskuje se u stek simbol, malo A4, i ovde su uklanja sa ulaza, znači, na ulaz ostaje marker kraja ulaz na sekvence, kao tekući ulaz i simbol, i sad konsultemo kontrolnu tabelu za malo A4 i end marker, znači, piše reduce toga, znači, piše reduce 4, znači, prepoznavanje 4 smene slično kao ranija, znači, skida se jedan simbol pošto je tolika dužina desne strana ostaje A1,1 u tom trenutku treba potisnuti veliko A, levu stranu 4 smene, znači, A1,1 veliko A piše A1,2 treba da se stavi na stek, i sad u srednećem koraku, znači, konsultemo kontrolnu tabelu u vrsti A1,2 i koloni end marker i piše reduce 2 znači, sad da se prepoznaje druga smena desna druga smena je prazna smena, dužina njene desne strana je nula, znači, s steka neće biti ništa skinuto, nego će se samo potisnuti leva strana veliko S, to znači konsultemo potisnutu tabelu za vrsto A1,2 i koloni S, tu piše S1 znači, to S1, nevo, ništa nije skinuto sa steka, samo se S1 potiskuje na stek, kontrolnu tabela za poslednju u vrsto S1 i poslednju kolonu end marker, piše reduce 1 znači, prepoznavađa odnosno sa žimanje prve smene prva smena ima 3 simbola na desnoj strani, znači, treba 3 stek simbola skinuti sa steka time se dolazi do praznog steka i posled toga potisnuti na prazan stek ovo S na levoj strani, znači prazan stek S piše da treba S0 da se stavi na stek, znači, kontrolnu tabela se konsultuje za vrsto S0 a za kolonu end marker i tu je akcija accept, znači, za vršeta krada parsera u sprihvatanje ulazne sekvence na ovaj način vidimo da je ovoa ulazna sekvenca, sastanjeno 2 malog i markera kraja sekvence ispravna i da ju je parser prihvatio ovaj parser predstavnik parsera od dna ka vrhu odnosno od dozdo na gore i takvi parser i odkrivoju struktur u stable izvođenja poče od listova stabla na gore određujuđuđu čvorove roditelja prepoznavanje vleve strane smena na osnovu poznate desne strane zanimivu je znači da je redosled smena koji parser prepoznaje tokom rada obrnut od redosleda pri krajnje desnom izvođenju dati sekvence, znači, krajnje desno izvođenje pojam koji smo u vodnoj lekciji kad potisnog parser od dna ka vrhu važi u svakom koraku rada ako na sadržej steka da na dovežete preostali ulaz dobija se sentencijalna forma u krajnjenj desnom izvođenju ulaza iz s, znači, neka od sentencijalnih formi u celoj sekvenci krajnje desnog izvođenja vide ćemo da u svakom koraku rada znači parser akcijom šift potiskuje simbole sa ulaza na stek dok se ne kompletira tako zvana ručka, a onda se ručka zomenjuje levom stranom smene znači ručke u suštini kompletna desna strana smene koje su u tom trenutku prepoznaje, a onda se znači akcijom reduce ta ručka zamenjuje levom stranom smene sve ovo što je rečeno biće ilustrovanno znači na primeru koji smo znači ovde sam dole napisao naj trej s rada onog parsera koji smo analizirali, a gore je govarajuće izvođenje iz znači ove posmatrene grammatike ove sekvence 2a, a i startnog simbola s, ove sam se opet vratio na originalnu grammatiku bez one nullte smene, pa u izvođenju nema endmarkera, znači da smo uzeli grammatiku koja je prošire na nulltom smenom, onda bih smo imali u izvođenju još i jedan korak, pošto bih bismo onda kretali od novog s, to ćemo kasnije u procedur i konstrukcije parsera detaljno definisati, znači ovde je uzeta prosto originalna grammatika na kogako je napisana, i prikazano je da u krajnje destnog izvođenju i startnog simbola s, zamenom korišnjenjem prve smene dobia sa sentencijalna forma 2a s, zatim po pravilima krajnje destnog izvođenja menja sa ovo završno s primenom drugi smene prazan smenom
 ostaju 2a i zatim se prvo ovo drugo a, a zatim i ovo prvo a primjenom četvrte smene za mene sa 2a a i tako dobijamo ovu sekvencu 2a a. Uporedimo ovo izvođenje sa traceom rada parsera, ono što možemo uočiti, to je da kad pogledamo ovaj niz primena smena 1,2,4,4, isti nise pojavljuje i u trace rada parsera, ali, nači kada se taj trace posmatra u suprotnom pravca od posljednje koraka ka prvo, to je jednan od tih opštih principa parciranja odnaka vrhu da se redosled prepoznavanja smena u toku parciranja odnaka vrhu odgovara obrnutom redosledu krajnja destog izvođenja što je u ovom primeru potvrđeno. Dodatno rekli smo da je pojam ručke sentencijalne forme, to je pojava u sentencijalne formi, desne strane smene koja je posljednja primenja u krajnje destom izvođenju, znači neke sentencijalne forme, znači to može u bilokom koraku izvođenju odnastorada parsera da se identifikuje ručka, a produkcija ručka je posljednja produkcija ili smena primenja u krajnje destom izveđenju sentencijalne forme. I ako predhodni primer ponovatimo se vratimo na njega, znači ručka za finalno se sentencijoj početno slovo, nači produkcija ručka je četiri, nije slovo malo D, nego slovo A, nači posljednja sentenza. I kad gledamo u ovom smeru, znači videli smo veliko aza menili malima, međutim za ručku i za rad parsera gleda se suprotno, odnosno gleda se ručke u stvari na vrhu steka, znači pojava kompletne desne strane četvrte smene i to je ovde malo A, a produkcija smene je četiri. Znači šta je još dodatno rečeno od svojistava parsiranja, da kada se na dovežu steki ulaz, nači u bilo kom koraku rada parsera od naka vrhu, dobijamo neku sentensivnu formu krajnje destom izvođenja, evo to možemo videti na ovom primjeru, uzmimo bilo koji korak rada parsera, na primjer peti korak, nači sadržej steka, nači nosteka i dva velika A, i na to na dovezujemo reostali ulaz koji je samo marker kraja. Dobićemo neku, nači to treba da mapiramo na neku sentensivnu formu krajnje destom izvođenja i sad pošto ovde kažem nije odrađeno izvođenje za proširenu gramatiku, nego samo za ovo oričelnu gramatiku, onda ćemo znači na mariti taj marker kraja, tako da će ostati ova dva velika A koji u stvari odgovaraju ovom sadržeju steka u petom koraku i znači mapirali smo stek plus preostali ulaz na neku sentensijelnu formu. Isto to je moglo važite, evo recimo za šesti korak A, A, S i end marker, to je u stvari ova prethodna forma ili u drugom koraku malo A na steku i A i end marker na ulazu, nači to je su stvari ova dva mala A, naravno odbacuje sadrne o steke i odbacuje sa ovaj end mark. Znači za svaki korak rada na dovezivanjem steka na preostali ulaz dobijemo tu sentensijelnu formu. I kao što reko, povremen ovdeg gleda gotsvore i dius akcije, znači na vrhu steka se formira desna strana, znači smene koja će biti sažima, naredukova i ta desna strana i u sentensijelna, znači ona se u radu parsera pojavljove na vrhu steka, a u stvari u sentensijelne formi čini ručku, znači recimo ovom koraku ovo A, A, S čini ručku i u pitanju je prva smena, znači to je produkcija ručke. To su znači te veze između izvođenja, krajnja desnog izvođenja i rada parsera od nakavrho. Sledeća tema je kako konstruisati, znači do se smo videli rad i videli smo gotove, primer jednogotovojog shift-reduce parsera, ali ono što još ne znamo to je kako za zadatu gramatiku dobiti takav potisni automat. Mi ćemo proceduru konstrukcije prikazati za nekoliko klasa gramatika, najjednostavnija klasa su tako zvane LR od nula gramatike, a kasnije ćemo videti da proširivanjem te osnovne procedure konstrukcije možemo dobiti i neke shift-reduce parsere za neke generalnie klase gramatika, sve do one klase koja nam za praktično primenu treba. Kod shift-reduce parsiranja na LR nula konceptu, taj parser je karakterističan po tome što se strategije odlučivanja zrasniva isključiva na sadržaju steka. Ulazni simboli se ne uzima i u obzir pri odlučivanju, što za direktnu posljedicu ima tu da kontrolna tabela LR nula parsera se svodi na jednu kolonu, pri odabil usrećeg koraka gleda se isključivo vrsta, vrh steka, a ne gleda se ulas. Zašto je vaš oznaka LR od nula? Prvo L znači da parser čita ulazno sekvencu sleva na desno, da u njoj nalazi krajnja desno, raitmost izvođenje i da na ulaz o znači pri odlučivanju osledećem koraku rada gleda nula simbola. Konstrukcija LR nula parsera zastiva se na pojmu LR nula konfiguracije ili engleski termin je joši item. Radi su suštini o tome da se u grammaticku smenu na određeno mesto na desnoj strani smene između dva grammaticka simbola ili sa svim napredi ili sa svim nazadu doda tačka. Tako znači smena plus ta tačka na desnoj strani zove se item ili LR nula konfiguracije. Tako da uzećemo da ilustramo konstrukciju parsera na primeru ove jednostovne grammatike koje ima četri smene, dva ne terminala s veliko s i veliko r i vidimo da su terminali simboli malo a otvorena zagrada, zarezi, zatvorena zagrada. Z ovu grammatiku i ako posmatramo drugu smenu koja ima na levoj strani s, a na desnoj strani otvorenu zagradu s i r ne terminale, prakčno imamo četiri razna itema ili LR nula konfiguracije, tačku možemo staviti na sam po četak desne strane, zatim i za otvorene zagrade, a ispred s, između s i r i za r. I još terminaloški konfiguracije koje imaju tačku na samom početku se zovu konfiguracije zatvaraće ili closure, a ove ostale konfiguracije koje ne imaju tačku na početku, tačka može biti i na kraju, ali treba da bude reki gravatički simbol ispre tačke, se zovu bazične konfiguracije. Vi ćemo uvesti i alternativne koncizne oznake za konfiguracije, tako što određena konfiguracije gde tačka neposredno izanekog pojave, neko gravatičkog simbola na desnoj strani smene, znači bi će označrava na tim gramatičkim simbolom i ako je on jedini na desnoj strani smene, indexom smene, ovdje tačka neposredno izaner i zato ćemo konfiguraciju označavati sa r, a reće o r iz treće smene, da je tu bilo 2r na desnoj strani, onda bi smo uveli dvostruki index r31r32. Što su i tice prazne smene, ona ima samo jednu konfiguraciju i možemo ili označiti tako što ostavimo epsilon na desnoj strani, pa tačku stavimo bilo pre njega, bilo poslednjega ili prosto stavimo samo tačku, znači odsusto bilo kakvi simbole, znači, što je njeg postoji samo tajana konfiguracija zatvara. I konačno, o čemu sam već pomeno nekoliko puta ili nije bilo napisano, znači za potrebe konstrukcija ovih parsera proširite osvaku gramatiku dodatnom smenom, uvešćemo novi startni simbol u ovde u oznaci s prim, a na desnoj strani, te nove proširujite smene rednog broja nula, viće originalni startni simbol, a i za njega marker kraja ulaza sekvence, na te načinu u skup ulazni simbola dodajemo taj marker kraja i konstrukcija parsera je onda malo jednostavnije za obješnjavanje. Konstrukcija počinje konstrukcijom tako zvanog karakteristickog elernula automata, detektora ručki, vide ćemo zašto se on zove tako, ali prvo znači da vidimo o čemu se radi, to je jedan konacne automatčija, stanja odgovaraju skupovima ovog elernula konfiguracija ili itema i konstrukcija ćemo ga u obliku grafa prelaza koristeći operacije koje ćemo define sati closure nula i go to nula. Operacija, znači closure nula, se dodaje znači nekom skupu, znači obavlja se nad nekim skupom konfiguracija s i dodaje nove konfiguracije ili item uisti skup. Ovo je neke matematički izraz da je to skup svih takvih konfiguracija zatvaranja, onih smena, znači koje imaju tačku na početku desna strana, onih smena za koje se konfiguracije nekih drugih smena, ali takve da se tačka nalazi ispred leve strane zatvarajućih smena, već nalazi u ovom kludursku, sve je mnogo jasnije da se objasnije ovako grafičke, znači ako ovo stanje to karakteristicko automata, jedan čvor grafa, u njemu znači već postoji nekakva konfiguracija, gde ovaj početa kalfa je proizvojne, može biti nula ili više gramaticky simbolao.
 i bitno je da nepostredno izda tačke ide neki neterminal. Onda, klouđer operacija nalaže da dodamo sve smene koje imaju na levoj strani B i da dodamo znači one iteme zatvaranja tih smena, odnosno tačku na početku desne strane svake od tih smena. Znači ako B ima tri smene dolećemo tri nova item. C je tva stvar treba iterativno da se ponovit dogodima promene. Znači ako zbog ovakvog itema s tačkom ispred velikog B dodamo, znači noviji item gde je B na levoj stranje, tačka je ispred velikog C, onda treba dodati i smene za C, koje imaju tačku na početku desne strane i tako dalje dogod postoji promene. Znači ovo je bilo operacija closed null. Ova druga operacija go to nulla ustvari nam definiše prelaze ovo karakterističnogo automata i odma da gledamo ovu graficu obješnjenje naček u imamo neko stanja automata u kome imamo neka kvajta, neka kvokonfiguraciju gde je tačka ispred neko gramatickog simbola X. Znači samo je bitno da tačka nije na samom kraju, nego da ima nešto ispred tačke. Onda će tako stanje obavezno imati izlaznu granu označenu tim gramatickim simbolom X. Znači X može biti terminal i neterminal i bit će prelazu novostanje koje će imati item i ste ove smene, ali s tom razvikom što je sada tačka prebačena iza X. Znači ovo sve nalaže operacija go to nulla. Ono što možda ove treba napomenem, ove nije prikazano u primeru, ali može se deseti, znači da u ovom početom stanju imamo dva razvista itema iz uopštom slučaju dve razviste smene koji imaju tačku, naravno, može biti u drugom itemu tačka ispred neko gipselom, to znači da će postojat iz ovog stanja i neka granu označena se gipselom u neko treće stanje. Međuti, možda se deseta, da postoje dva razvista itema, a da u oba od njih je tačka ispred istog ovog X, imamo ovaj item i zamisli se da je tu sad dopisani još neki novi item, ali koji ima tačku ispred X. Onda bi bilo pograšno crtat i novu granu označeno istim X. Nije u pitanju nedeterminške, u tomate, nego u tomate determinški, znači, jedinstvena je grana sa X i treba i u ovom novom stanju dodati i ta i drugi item i prebaciti način tačku ispred X. E sad, kad znamo ove dve operacije, evo kako se konstruiše karakteristice LR0, automat, startno, njegovo startno stanje dobija se počeši od konfiguracije, zatvaranje, one proširujuće smene, to je ovada prikazana konfiguracija, tako što se na nju primeni closure nula operacije, i tako se dobije startno stanje. Onda, primenom kog procedure gotu, kad god ubacimo ovutomat neko novostanje, na njega primenimo gou tu za bilo koji ulazni simbol X, znači, redom tražimo razne ulazne simbole, nači gde gotu ide dalje, i sva ta nova stanja dodajemo ovutomat, i kad god dodamo novo stanje, na njega primenimo ovu closure nula operaciju, i tako dalje, znači, posle po novu za gotu obrađujemo ta novodobijena stanje i sve tako dogod postoji promena u grafu. Evo, da ilustrujemo na ovoj našoj gramatici o četri smene cevo ovu proceduru, znači, prvo se konstruiše startno stanja automata, u grafu ćemo čvorove prikazivati o im pravogonicim, unutra ćemo pisati te konfiguracije, znači, rekli smo proširujuće smena, ovdje nije napisan, ali to je znači, nulta smena S-Prim, a na desnoj strani S-End Marker, znači, dodajemo tačku ispred na početak desne strane, i sad treba primeniti closure nula operaciju, operacijom closure nula dodaju se još ova dva crvene konfiguracije, znači, pošto je tačka ispred S, potrebno je za ove dve smene koje imaju s tale ovoj strani dodati njihove, znači, konfiguracije zatvaranja, znači, ove dve, i time smo znači finalizowali startno stanja, interesantno je da ćemo za svako stanje uvesti i konciznih u oznaku stanja koji će a ovdje ovako zaokruženo uvek pisati, znači, to je prosto alternativna oznaka u ovog istog stanja, i za startno stanju usvojicemo da je u stvari oznaka istaka ozadnostek. Sada na startno stanje primjenu njovemo gotu operaciju, znači, za sve je al tako ovde gde vidimo šta ima izad, znači, da sve granatike simbole koji u ovom startnom stanju se nalaze neposredno izat ačke u nekoj od konfiguracija, znači, imamo veliko S, imamo malo A, imamo otvrenu zagradu, unosimo izlaznu granu označenu veliki mes, i ona ide u novog stanje gde prebacujemo iz ove konfiguracije, znači, tačku i za s. Zatim, imamo izlaznu granu označenu malima i znači, prebacujemo ovaj item, prebacujemo tačku i za A, i konacimo imamo izlaznu granu označenu otvrenu zagradu i prebacujemo tačku i za otvrenu zagradu ovom novom stanju. Dobri smo ta tri nova stanja, odmah uvodimo prema ove objašnjenje od ranije ove konciznije označe, znači, označe su uvek formiraju prema ovim pazičnim, da kažem konfiguracijama u stanjima i najčešće, ako u pitanju jedna konfiguracija, rekli smo to je gramaticky simbol koji je neposredno levo o tačke i redni broj smene. Naravno, nekad može da se desi da postoji viša item iz više smena, pa bi onda umest to konkretno grednog broja smene mogli da stavimo one simbole x, y i c. Uvedenje su te konciznije oznake stanje i šta još nije urađeno, mora se na svako od ovih novih stanja da bih finalizavali primeniti operacije zatvaranja. Ovde nema šta pošto o zatvaranjem se ne dodaju novive konfiguracije ova dva stanja, pošto tačka nije ispred neterminala, međutim u ovom trećem stanju je tačka bila ispred veliko ges i zbog toga moramo isti ovan nove dve konfiguracije da dodamo zatvaranjem kao što smo to uradili u ovom inicijelnom stanju. Tek sad smo finalizavali ova tri nova stanja. Konstrukcija se nastavlja što gledamo znači iz ovih novih stanja gde sve možemo dospeti primenom operacije GoTo. Ove vidimo da ovo ima izlaznu gran u označenoj markerom, ovo nema, pošto je tačka na samom kraju, nema više izrazni hrana. Ovde ima znači će biti izrazni hrana označena veliki mes mali maja i otvorenom zagradom. Primena operacije GoTo. Vidimo da ovo je stanje zanimljivo što je izlaznu gran u označenoj otvornom zagradom uštini vodi u isto ovo stanje. Znači za neko stanje dobijete potpunio identičan skup konfiguracije. Taj skup u stvari je identitet stanja, ne treba cratati dva stanja sa identičnim skupom konfiguracije, nego je rečo istom stanju i zato imamo ovu povratnu gran u ostavom u tom stanju. Kada dođe, recimo, malo a, onda u stvari idemo već u ovo stanje koje smo dobili i konačno ako dolazi veliko s, onda se prebacuje ova tačka i za sx, ispreder, to je sad nova, novi item koji do se nismo imali pa to odgovaro ovom novom stanju, već vidimo da ovom novom stanju primenjena, ovo i closure operacija, tako da smo dobili i finalno ovde ovo stanje i cela procedura se nastavlja u još nekoliko iteracija dok se konačno nefinalizuje cela automat i ovo je konačno slika sa finalnim karakteristicima automatom za ovu grammatiku i sad može da se kaže da ovaj automat ujedno predstavlja potisnu tabelu parsera. Znači, on može da se napiše u drugom obliku da u mestografa tabelarno ga prikažemo i u mesto ovih itema da ustvari skoristimo ove koncizni oznake i prakčno dobijemo ovo potisnu tabelu koja ide do ove duple crte, znači, ovo i prakčno na i automat kada se prikaže tabelarno sa konciznim oznakama dobijemo upravo ovo potisnu tabelu parsera. Karakterističa automat ujedno posleduje sve informacije da se konstruiše i kontrolna tabela i ovaj slajd da je informacije kako popuniti kontrolnu tabelu. Rekli smo L0 kontrolnu tabela sad sastoji se samo od jedne kolone, znači u svakoj koloni treba popuniti samo 1 ulas. Ako u pitanju vrsta v kontrolne tabele i svaka vrsta kontrolne tabele odgovara nekom stanju, karakteristu automata, to je svrsti, odgovariće vrsti potisne tabele, možemo u tom automatu videti koji je skup o njih konfiguracija unutar stanja i sada ako znači unutar tog stanja imamo konfiguraciju ovog oblika gde tačka nije na samom kraju, nego postoji nekao grammatik simbol desno od tačke, onda ulaz treba popuniti sa shift. Ako je tačka na samom kraju onda ulaz treba popuniti sa reduce. Odgovariće svene, znači ove svene čija je ovo konfiguracija. Ako se radio 0 toj sveni, onda umesto reduce 0 piše sa accept. Vrste koje nisu pokrivene njih primim i drugim pravilom treba da se drža akciju reject. Mislim da kod L0 parsera u suštini nema ova situacija nikada se i nedesala, ali vidjet ćemo ko dovi generalnih kategoriaka parsera, nači može da se desi da je potrebno u kontrolnoj tabeli imati reject. Kod ovoga L0 parsera u suštini parser može da odbacila uledno sekvence samo ako u toku rada prazena ulaz potisne tabela.
 Imamo još jednu stavku, kaže u koliko gornja pravina na jedno značen određu akciju za svaki ulas kontrona tabele, grammatika pripada klasije 0. Zna je određen ulas kontrona tabele može da se desi da je moguće staviti više od jedne akcije, ali tu situacije ćemo kasnije da razmotrimo. Evo za ovaj naš konkretan parser može čak i pregledom ove konciznije tabele da se potisne tabele, da se popunjava ova kontrona tabela. Znači ako je neka vrsta potisne tabele neprazna, znači bilo gde u bilo koom ulazo ima nešto što nije prazan ulazo, onda je akcija uvek shift, ja sad vidite, odpisni kontrono tabele imaju paralelne vrste, tako da nisam ponovopisao ovaj ovde iste ove oznake, nego samo priđubio ovom ispisu potisni kontrono tabelu razdvojio i hovom duplom linijom. Prazne vrste potisne tabele su neka vrsta overiduse akcije, je sad ovde nam obično ovaj index, ovog simbola steka govorio koje smeni je rečna, boa 1 je pojava na kraju prve smene i pošto je kažem index 1 onda će biti redupcija. Prve smene ovde zbog ovog r2 koji nači odgovara, čisto da vidimo r2 nači odgovara, znači bitno je da je u pitanju konfiguracija koji ima tačko na samom kraju smene i u pitanju je druga, ili tako smena, znači zbog toga ovde piša akcija r2, ovde pošto vidimo da index 3, nači akcija r3, ovde pošto index 4, akcija r4, ovde pošto je index 0, rekli smo da r0 je u stvari accept, znači kraj rada parsera u sprihvatanje ulazne sequenci. Znači možemo primetiti da ovako dobijem parser ima razlika u odnosu, na najprvi parser u najprimer koji sam koristio da ilustruem koncept, generalni shift, reduce parsiranja. U čemu se svoje razlika? Prva razlika u tome što ovde kažem ove parseri jednostavni i njegovah kontrolna tabela, znači ima samo jednu kolonu, ona i drugi parser je imao više kolona u kontrolnu tabeli i onda na bazi ulaznog simbola je bila birana akcija. Znači, u suštini to znači da ona i prvi primer nije predstavio lr0 parser, nego neku od generalnih kategorija shift, reduce parsera. Druga razlika u odnosu na ona i predhodni primer koje pažljivo pratio šta se radi u onom, u predhodnom primeru u vrsti s0 se odmah radilo prihvatanje ulazna. U ovde stajeo accept, u potistoj tabeli nije ni bilo ove kolone za end marker i nije bilo stack simbola koji odgovara ovom end markeru. To je zato što smo rekli da ona i, znači, parser je u suštini reprezentava ono originele u grammatiku bezproširujuće smen. Šta možemo reći u odnosu rada onog parsera i spravog primera i ovog sadašnjeg? Pa ovaj parser ima jedan korak više, znači onka dođe do te situacije da na vrhu steka ima s0, i na ulazu moja marker kraja on još jednom uradi shift, potisne taj marker kraja na ulaz i onda tek u radi accept. U onom predhodnom primeru, ono generalni e-shift, rjus parsera u suštini urađa na taj jedna optimizacije za taj jedan korak. U toj situaciji se već ovde radilo accept i nije se potiskival, znači, ovaj end marker na stack. Na taj način je, kaže, malo se optimizalo rad parsera za jedan korak i takođe nije uvođeno ovaj symbol kao symbol stacka. Međutim, kažem, ovdje kada smo nismo primenili tu optimizaciju, nego smo prosto išli po proširenoj gramatici, dobijeno je ovakva situacija, ali pravila su vrlo jednostavno... Ostalo je još samo da kažemo šta se deša u slučaju kada pravila popunjavanja kontrolne tabele ne dovode do jednoznačnog popunjavanja kontrolne tabele. Nači to su tako zvanje situacije konflikata u Shift-Reduce parsironje. Oni mogu da se pojave i ko dovoga LR0 parsera, če smo konstrukci upravu proučili, ali mogu da se pojave i ko drugi kategori je Shift-Reduce parsera koje su generalni i koje ćemo tek proučavati. Kako se manifestuje te konfliktne situacije? Nači postoje dve vrste konflikata, tako zvanje Shift-Reduce konflikt. On se pojavljuje u situaciji kada u stanju karakteristickog automata pojave se dva tema različita od kojih jedan ima tačku na savom kraju, a ovaj drugi item ima tačku negde u sredini desne strane. Zanimljivo je da oni... Granči symbol nepostredno levo tačku vek mora biti identičan. Ovo nije slučeno zašto je napisano A levo tačke, ali znači ovakva situacija realno može da se pojavi vezano za dve različite svene. I prema onim pravilima, ova svena koja ima tačka na savom kraju bi zahtevala da u kontrolne tabeli u toj vrsti stoji operacija redukovanja ove svene X-menja sa A, a ova druga konfiguracija bi zahtevala Shift-Akciju da se dalje potiskuje, znači B sa ulaza. Ovo je tako znači šifta Reduce Conflict, jer ne znamo u nekim situacijama tokom rada parser bi na to mesto trebalo da preduzima Shift, a u nekim drugim situacijama da preduzima Reduce, ali parser nema dodatnih informacija da zna kada se odruči za Shift a kad za Reduce. Druga vrsta konflikata je tako zvan i Reduce Reduce Conflict, gde u nekom stanju karakteričnog automata mogu da se pojave item i dve različite svene, koji imaju tačke na krajevima, ali znači, reće o različitim svenama. I tada bi znači ovaj item zahteval da se reduko ova svena, a ovaj drugi item da se reduko ova druga svena. To su te dve vrste konflikata. Teorija kaže da ako se pojave konflikti, onda grammatika nije u kategori LR0 i ne može da se konstruiše LR0 parser za nju. LR0 je dosta ograničena klasa parsera i grammatika. Dovoljno je da se u grammatici pojavi prazna smena i ona ću uvek i zazvati konflikt. Primer sa vrlo malom grammatiku kojima samo smene S, M, M i prazna smena. I proširimo onom proširujućom smenom i ovo bi bilo početno stanje, botomarker karakteričnog automata. Zatvaranjem smo dodali ove dve konfiguracije zatvaranja i odmah vidimo ovo akcija. Ovo je item bi tražio da u kontrolnu tabelist o i shift, a ovo je item pošto je tačka na kraju smene, bi zahtevao redukci u ove prazna smene. To je odmah konflikt. Rekli smo teorija kaže onda prosto mora da se pređe na neki drugi metod, odnosno prosto ne možemo da konstruišemo odgovarajući parser. Međutim u praksi, kako resiti taj problem, postoji nekoliko varianti, pošto za praksu nama treba, naravno, da dobijemo funcjano parser za neku grammatiku koja nam je data i postoji nekoliko rešenja tog problema. Jedno od rešenja je da se sa L0 kategorije pređe na neku generalniu kategoriju parsiranja. To mogu biti i drugie kategorie shift, reduce parser, a to koji je postoje još generalni algoritmi parsiranja, koji suprimenjivi praksu na sve bez kontekstne grammatike, ali u jednom nakranom srajdu ću komentari sati zašto se ti najgeneralni algoritmi ne koriste, zato što oni nisu deterministički i njihova složenost nije kao složenost ovi determinističkih parsera koji rade linearno, funcije složenosti linearan u odnosu na dužinu ulaza. Oni rade brz linearne algoritmi, dok najgeneralni algoritm koji može da parsira bilo koju bez kontekstnu grammatiku ima kubnu složenost n na treći u odnosu na dužinu ulaza. Znači moguće upotrebiti neki generalni deterministički algoritm, to je jedno dršenje ako će on dati za dovoljaveći rezultat, je sad moguće je napraviti ekvalentu transformaciju grammatike i mi ćemo kroz primere u glavnom uvežbama imati nekoliko tih transformacija, koja ne garantuju da ćemo bilo kakvu grammatiku u opštenj slučaju, bilo kakva grammatika može da opisuje jezik koji nije u opšte moguće deterministički parsirati, ali u praksi ove grammatike za progranske jezike često mogu nekim prelatim linearnostom i transformacijama da se upodobje i da se dobije grammatika koja moguće parsirati, a sledeći još nivo rešenja problema je da u stvari tolerišemo na neki način, onosno da pomogremo znači da zadržimo i grammatiku i metod parsiranja koji daje konflikte, ali da onda na određeni način pomogremo parseru da razrešite konflikte u toku rada u situacijama, koje su konfliktne da uz dodatne informacije kojemu obezbedimo, zna kada da uzima jednu akciju ili drugu u tim konfliktnim situacijama, inače ovi alati koji generišu parsere. Zašto su bitni ovi ShiftReduce metodi? Zato što alat koji će TV koristiti za praktičan projekt, konkretno jak i ta familija alata, tako zvaniji generatora parsera, znači se je nastava na upravo na ovom ShiftReduce parsiranju, i paarsere koji oni generišu i u stvari oni ne samo što generišu parser, kao potisne u tomatniku generišu i program na nekom od jezika, kao što su CC plus plus Java i tako da je znači da svaki jezik može da se nađe tako alat, cimo kup alat je varijanta ovog jak parsera za...
 i vi ćete koristirekto kupalat. E sad, znači, generatori parsera koji konstruišu, znači, primenjuji ova algoritma i automatki konstruišu parser, oni naravno detektuju ako je nastao konflikt i imaju ugrađeno podrazumevanu razrešavanje konflikata. Znači ako vi ništa ne pomogne te dodatnim nekim, da kažem, informacijama, po defaultu će se shift reduce konflikt uvek razrešavati u koris shiftovanja. Znači parser će prosto staviti shift za nemariti sve ove druge akcije, a reduce reduce konflikt će se tako razrešiti da veći priorite tima smena koja prva navedena, znači prosto će se staviti bezuslonno redukcija te smene. E sad, kot shift reduce konflikata, ovo je default način razrešavanje, često i adekvatan. I posleda kažemo naravno uvek mora da se izvečenali za svako konflikta i šta se dešavali, često te shift reduce konfliktu nekim izrazima aritmetičnim s operatorima, recimo levo asocijatinima. I tako dalje u suštini odgovara ta situacija da se radi shift u konfliktim situacijama, ali reduce reduce konflikti obično zahtevaju da su ozbiljni problem i obično zahtevaju da se gramatika transformiše da bi se konflikt izbegao. E sad, nači postoji način da se alatu pomogne. To su ove presendenz direktive koje mogu da pomognu da alat potencijalno konfliknoj gramatici napravi parser bez konflikata, ali u ovom trenutku nećemo pričati detaljo, tome biće i određenih zadataka na vežbi koji direktno ilustruju. Znači kako se to utiče na konstrukciju parseru u situaciji kad postoje konflikti, a možete takođi u pudstvu za alatku da vidite ovu presendenz i direktivu, znači, postoji obješnjenje sa primer.
