 na vašoj kartici, je tamo, bukvalo imate posebnu sintaksu da kažete izvršavaj ovde ovu paraleli, značite direktivu i kažete kako to da se odradi. Šta je paralelni računoski sistem? To je svaki system, svaki računoski sistem koji je u stanju da istovremeno izvršava dva ili više delova jednog ili više programa. Ne ove istrukcije koje se izvršavaju u paraleli, to je nešto što se zove Instruction Level Paralelizm, a nije to! Paraleli program mora da ima označene delove koji treba da se izvršavaju u paraleli. Ono što nama pruža hardware je hardware će odraditi neki poseb za nas nad sequencijalnim programom. Aha, znači sada to može nekako da se izvršava, onda moramo da znamo kako ide u ta izvršavanja i videte da tu postoji više različitih termina na srpskom ili na engljanskom jaziku. A jedan od tih termina je tok izvršavanja, execution flow ili programski tok, program flow, ili tok instrukcija, instruction flow ili need toca controller, thread of control. Musuštini, to mu dođe jedno testo. Naziv za skup najrednih programa koje se izvršavaju u određenom sequencijalnom redosledu. Znači mi ćemo imati naš execution flow kako to naše jedno, taj naš thread kako se izvršava. Kako ta naš thread se izvršava i radi taj poseb. Znači dan će biti thread ili će biti neki program koji parallelno, imamo parallelne neki, više programa koji se izvršavaju isto ovremenu. Sada je piti, njišta znači to isto ovremenu? A, vi možete da podignete konkurentnu aplikaciju, a da nemate multiprocesorski sistem. To je ono što ste vi radili na, kako se zove na operativnih sistemima. Vi ste koristili jedno jedino jezgro, a uspili ste da podignete veći broj niti, odnosno veći broj programa isto ovremenu. To je jedna način kako možete se radi. Ali ako imate četri jezgra, što ne biste na svaku jezgro prebacili po jedno nito, odnosno po jednom proces, da radi poseb koji treba da se odrati. Šta još ovdje imamo? Imo imamo konkurentno izvršavanje. Konkurentno izvršavanje podrazumeva izvršavanje više program svih tokova. Znači, ono gore što je navjedeno, imamo jedna sekvenca, znači to je neka sekvenca šta treba da se izvršava od distrukcija. E znači imamo konkurentno izvršavanje. Više program svih tokova u jednog programa je tako da oni napreduju u vremenu, barme po dva, ali se oni ne moraju izvršavati isto vremenu. Znači, kut konkurentnog programiranja ne mora značiti da se to sve izvršava u paraleli. Može se izvršavati del po del sekvenca, ilo baš u nakon kao što ste pisali na predmetu operativnih sistemi. Znači, pusti malo jedan, okine timer, pusti malo drugi, okine timer i tako da ide izvršavanje. To ste imali na predmetu operativnih sistemi. Pusti malo jedan, okine timer, pusti malo drugi, okine timer i tako da ide izvršavanje. To je nešto što spada u definiciju konkurentnog programiranja. Ali konkurentno izvršavanje, može da bude takvo da se si oni izvršavaju i na nekoj paralelnoj architekturi, da si oni mogu isto vremeno da se izvršavaju. Što se konkurentnog programiranja tiče, nama je sve sve jedno. To neko drugi za nas vodi računa. Nama je ovdje cilj da mi podesimo da to sve radi. Oćemo da radi što je moguće brže, da izvucemo što je moguće više performansiji. Koncepti deljene promenjive i koncepti razmene poruka. To su dva koncepta koje će u mi koristiti na ovom predmetu. Deljene promenjive će nama biti vezane za konkurentno programiranje, u žem smislu na jednom računaru, prostadživanje poruka će nama biti vezano za distribuirano programiranje na više računara. Tako u principu možete da posmatrate, ali u nekom trnutku ćemo konstatovati, a što to ne bi moglo da bude i možda malo drugačije. Ako hardware podržava nešto u pozadini, ili ako software podržava nešto. To što mi nekako napišam u software, to ne znači da će to baš tako izgledati kada se prevede naš program. Znači to što ste vi navikli da vaš program izgleda isto i kad ga napišete u debug i u release režimu. Ne znači da je to tačno? Vama programski prevodilac nešto garantuje, a to možda nije ono što vi mislite da vam garantuje programski prevodilac. Vide ćemo što je to što nama garantuje naš programski prevodilac, da vidimo kada to i kako to može funkcionisati. Tako da ćemo se sad upoznavatiti sa još malo ovih termina koji su nam bitni za konkurentno i distribujereno programiranje. Kako nam izgledaju maše mašine? Maše mašine su da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da se da sa njetu pitanje ko tih multiprozerskih jer ako oni rade svih istovrameno i ob to multiprozerski sistem nije bitno je da postoji deljena memoria ako nevamo deljenu memoria a mi u stvari imamo multi-computer odnosno multi-računar oni su svi nezavisni jedan od drugog svakom čačka svoje promenjeve svoje delove memorie nema ničeg deljenog zajedničkog kod multiprozerskora nama multiprozerski sistem hardware koji je upozadini nešto garantuje kako to se funkcioniše kako to radi šta se sve dobije kao rezultat ako budete slušali predmet multiprozerski računarski sistemi videte ćete kako to funkcioniše upozadini znači oni mesi, moesi i koje godveć protokoli, direktori protokol da postoje za synchronizaciju videte ćete tamo kako to funkcioniše a mi ćemo se na ovom predmetu oslanjati na to da synchronizacija i esgara cache memoria kod multiprozerskog računara postoji znači kod multiprozersora da postoji synchronizacija izmiju cache memoria hardware-ska synchronizacija izmiju cache memoria da ne mora programmer o tome da brine kad vi ćemo da nam je to vevamo bitno jer ako programmer o tome se mu treba da brine onda taj naš programmer mnogo treba da brine o mnogo različitih stvari, o mnogo različitih konfiguracijama što nije baš jednostavno i onda bi se programiranje konkurentno usložnilo dosta i ovako nije baš toliko jednostavno za nekog ovečnog programmera u slučaju da imamo multi-computer, mi imamo distribuiranu memori znači to su pačići memori, pačići memori, to kad vam kačete to možda zvači, pačići to nešto teko maletko može da bude pača 100 giga bita da nekog ima i to je pače memoria, ali ako uzmete da posmatrati da je to sve što se nalaze na simtim računarima jedna velika memoria velika, ali nedelje na memoria, to je distribuira na memoria i sa takvim sistemima se može programirati gde svako njih koristi svoje pače memoria da može nezavisno da radi može, znači svaki od ovih koncepata je dovoljno dobar samo što možda nećete dobiti doveno dobne rezultate ako svaku paradigmu hoćete da rešnite na isti način kao neku drugu postoji možda malo drugači algoritmi koji se koriste za deljenu memoriju i za distribuiranu memoriju kako su povezari ovi što imaju distribuiranu memoriju pa vero ato su nakačeni nekim mrežnim kablom nekim mati van ili lan ili nekim bežuć, nekom bežućnom režom nekim vilanom ili nekom mobilnom telefonijom nekom radiovezom i sad je pitanje ok ove naše mašine što mi tu koristimo ja suane to sve identične ove naš sistem sa deljenu memorijom da li su svi računari, odnosno svi procesori u kod jednog takvog sistema takvi da bilo koom delu memorija mogu pristupiti pojednaku brzu hee to već ne znam to zavisi od vaše konkretne organizacije za konkretnu mašinu koju imate neke mašine koje se sada prodaju a su uniforme tako da svakom procesoru potpuno sve jedno kojoj memorijskoj adresi pristupa dok ne tako mali broje računara ima neuniforman pristup memoriji brže mogu pristupiti na primjer do prvog bloka memorije do prvog memorijski bankije prvog memorijski bankije nego do treće memorijski bankije sad se vi možda sećate tamo negde predmet architektura računara pa negde o 9. nedelja ili kad god kad smo razmatrali magistralu, ciklu se na magistrali pa nakraju beše i kako može da izgleda neka malo služenija magistrala a gde smo imali neki multiprocesorski suskud