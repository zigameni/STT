 Zatravioš jedno. Dakle, na danesnim času treba da završimo ovo malo csp što je ostalo. Dakle, nekoliko zadataka. Zatravioš jedno. Zatravioš jedno. Zatravioš jedno. Pa prvi od njih je noženje matrice. Gde treba da osmislimo, kako treba da komuniciraju elementi matrici koje proces je još treba da imamo, da bi se matrica nožila sa nekim vektorom in. I proizvila rezultat, dakle, noženje matrici i vektora u vidu ovog in-a proizoda. Matrica je kvadratna 3 x 3. U šustini nebitno je to što je 3 x 3, bitno je dakle da je kvadratna 1 x 1. Čak ajde, ne mora ne bude kvadratne bitno, je samo da, dakle, broj kolona bude jednak broj elementa. Baran broj vrsta bude jednak broj elementa koliko ima vektor, dakle, da mogu da se pomnože taj vektor i ta matrica. I, dakle, kaželo da je kao 3 niza podetaka dolaze, dakle, na taj način posmatramo vektor i na taj način treba da formiramo taj proizvod. Dakle, da ne idemo 1 x 1, nego, sto više da probamo da paralalizujemo po znacima navoda ovo izračunavanje. Dakle, na to se odnosio da posle početnu kašnjenje rezultati treba da se proizvode istom brazinom koji stiže ulas. Dakle, ulas prvi vektor kad ostignem, evo, odmah ćemo na sličicu ovde. Dakle, ovo ovde su elementi ulazni, dakle, ovo su elementi vektora i. I, dakle, vidite da oni kao stižu istom brazinom, dakle, kako računamo, kako množemo vektori matricu, pa tako što prvi element vektora pomnožimo sa prvim elementom prve vrste, saberemo to sa proizvodom drugog elementa vektora i prvog elementa drugi vrste i sberemo to sa proizvodom trećeg elementa vektora i prvog elementa trećeg vrste matrice. I to nam je prvi element proizvoda. Pa onda, dakle, drugi element, isto to samo nožimo sa drugom kolonom, treći element, isto to samo nožimo sa trećom kolonom. Nama ovde, korazimo, inicijalno dolaze, dakle, element po element vektora i dakle, noženjem dobijemo jedan po jedan ovaj element. Ideja je da, zašto ono nakon početno kašnije, da na čim smo mi proizveli da kažem prvi element izlaza, prosledimo ovaj inicijalni, da kažem, taj vektor, za amnoženje sa drugom kolonom i da onda prva kolona bude slobudna za novij vektor. Dakle, da odmah možemo da počemo da krenemo u računanje i drugog elementa, to jest, drugog vektora, dok pravimo drugi element za onej prvi. I dakle, zbog toga, imamo to kašnije, dakle, dok ovaj inicijalni, dok ovaj prvi vektor ne dođe skroz do kraja i dakle, ponoži se i sa prvom i sa drugom i sa trećom kolonom, mi možemo u međovremenu da napravimo i dva elementa za naradni vektor i još jedan element za onej treći vektor koji nam bude dolazio. Dakle, onda posla četvrti vektor kada bude bio spreman za amnoženje, onda će biti gotto već drugi rezultujići vektor, pa onda peti kada dođe biti treći i tako dalje, i tako dalje. Dakle, imaćemo, ajde, sa offsetom od dva, da tako kažem, da tako kažem, offsetom od dva rezultate. Dakle, kako bude dolazio koji novi vektor, tako ćemo mi dobijati rezultat za neki od predhodnji. Dakle, ne moramo da čekamo da se prvo se ovo izračuna, pa teko onda da idemo u računanje za sledeći vektor, već možemo tako da kažemo da klizimo kroz ovu matricu i da onda dobijemo, i da dobijemo, i da dobijemo rezultat u, kažem, nije baš realno vremeno, ali dakle, da dobijemo jako bros. Esat, kako onda ovi čvorovi treba da funkcioniš? Dakle, ovi ovde središnji čvorovi su zapravo kao čvorovi matrici, dakle, svaki element matrici možemo da posmitramo kao jedan element. I jedan čvor, i dakle, jedan proces koji će da radi za sebe i komunicira sa svojim okolnim procesima. Kako komunicira? Dakle, sa leve strane dobija element, sa kojem treba da pomnoži svoj sadrši. Dakle, ako je to prvi element drugi vrste, on treba da se pomnoži sa drugim elementom vektora. Ako li je treći element prve element, trećeg kolone, s alo brkam, nakla ako je treći element prve vrste, on i dalje treba da se moži sa prvim elementom. Tako da, cijela ovo prva vrsta se množi uvek sa prvim elementom vektora. Cijela druga vrsta, uvek sa drugim elementom vektora, cijela treće vrsta, uvek sa trećim elementom vektora. Dakle, po toj, ajde, horizontali, mi možemo da proslajđujemo taj odgovarejući element vektora i znamo, dakle, da to što nam dolazi sa naše leve strane treba da nožimo sa onim sadržem koji inicijelno dobio taj čvor, to je, inicijelno taj čvor matrice. I, dakle, svaki od tih čvorov treba da se ponoša tako što što što si dakle da prihvatim taj element i treba da pomnožim sa svojim, onda, sad ćemo vidimo šta je ovo što nam dolazi od ozgo, ali, dakle, nakon što se sve to završi, mi, isto, ono što smo dobili sa leve strane, proslajđemo na desno, tako da cviti element i dobio isti taj broj. E, sad šta radimo povertikalni? Povertikal i radimo sumiranje. Dakle, rekli smo ovde proizvodova 2 plus, proizvodova 2 plus proizvodova 2. Dakle, povertikali mi šaljemo naši rezultat i o ono što smo dobili od ozgo, sabiramo sa tim što smo mi dobili i šaljemo dalje. Dakle, povertikali ide sumiranje. E, sad, da bi ovo sumiranje moglo da radi lepo, onda to znači da one prvi element, i dakle, da bi svi imali uniformni izgled, to znači da ovo što nama stižu od ozgo za prvi proces treba da bude neutralni element za sabiranje. Dakle, da so vde sve možilo povertikali, onda bi ovde verovatno trebalo da bude jedinica. Dakle, kao neutralni element, da bi onda dobili valjan rezultat. Dakle, ovo prvo što stigne nula plus x puta a11, šaljemo dalje pa onda imamo, evo ovde se i vidi. Dakle, a11x plus a21y i onda još plus a31c. I to je one rezultate, dakle, to je one prvi element koji nam je deore zultovićeg vektor. Dakle, gdje se nam zapravu čuvo ovaj vektor i napad, to je ovaj niski podatak koji nam stiže, dakle, element po element u ovaj ovdje doni kvacise i oni dakle su ti koji će da skupljaju element. Nas nezanima na koji način će tačno oni posle da komuniciraju i one kočita i zdih možda, iz tih čvorova na koji način će ono kraju doformira, taj vektor isto kao što nas nezanima na koji način ćemo do dobijemo ovde in element. Ono što nam zanima, jeste, dakle, kako se ponašaju ovde čvorovi i zanima nas da odavde šaljemu i zanima nas da odavde stiže kula, zanima nas da ovde prikupljaju podatke i, opet, da bi se svi uniformno ponašali, treba da imamo i ovde ovo jednom završnu kolonu, koja će samo da prikuplja ulozni vektor i ništa dalje neće da radi, samo takle da bi napravili da se uniformno ponašaju svi ovi čvorovi. Tako da sam kod je ovde prelično jedno.
 i jednostavan. Dakle, ovdje smo nazvali ove procese North, South, West i East. Dakle, West je ovaj koji će da nam šalje ulozni vektor, South je ono što će da bude rezultat, a nismo dodali ovaj kao severnje koji šalje nule i ove zapadne koje samo prikupljaju podatki. Dakle, West je South korisnički program i zanima nas mnogo šta će oni da radim. I kako će da nam šalju? Znamo šta očekujemo zapravo, to nam je bitno, ali znamo i da North treba, dakle, rekli smo true, ako je tačno, dakle, uvek se ovo dešava, dakle, tehnički, ovo je beskonečno betlje za ovaj West koji će uvek da šalje prvom elementu nulo. Dakle, prvom elementu, svaki od matrici, dakle, 1, 2 i 3, dakle, ovdje nismo pisali da je North, dakle, ono, Jot, 2.1, 3, pa da se šalje North. Podrozumeva se, dakle, da je ovo Jot index.org, dakle, da je ovo identifikator, kao što smo pričali prošlo put, dakle da može bude nizeo tehnične i zapravo može bude i matric. Ali, dakle, ovaj Jot identifikator od North na isti način identifikator od East i, dakle, ovaj ovdje što imamo. I, dakle, što radi East, pa East samo prijima neki podatak, absolutno nas ne zanima koji i radi skip, dakle, i ovdje tehnički radi dok god imamo elemente matrice i skuplja samo podatki. Sustina, ovdje je zapravo množenje, jeste u ovom centravom delu, to je stu strednini i tu imamo sad I i Jot kao parametre. I, dakle, stav smo rekli, radimo od levog, to je Jot minus 1, primamo X, odmah cijemo da ga pošaljemo dalje, a onda očekujemo o dozgo da nam stigna neka parcijelna suma, a mi onda dole šaljemo tu sumu plus naš element puta, ovo što je pristigno sa leve strane i to je to. Umetali možda kvitanja. Ajmo vam da dalje. Dakle, sve da će izdata kovdje u prezentaciji, ja su filozofim. S tim što ja ću ovdje, mislim da nema pohdrebe više da pričamo toliko o ovom problemu, gde, recimo, videli ste kod sandučića, to jest, kod prosludjivanja poruka da možda se napreve, da mogu da se napreve dva tipa rešenja. Dakle, možda da se naprevi ovako, recimo, rešenje, gde imate distribuirano, tako zvano rešenju filozofa, gde i filozofi su procesi i recimo, dodeljujete da viliuške isto budu procesi koji treba nesta dovlučuju. I sad ovdje recimo, primer, nije ono da su uzima par nepar na viliuška, nego, mislim, prvo rešenje koje su uvek vidi kod filozofa trebalo bi, što više mislim da se to još na osmožda pričali, gde imate nekakavone semafor pod zacima navoda za sobu koji ograničeva koliko njih može da uzme levo viliušku, tako da i taj rum semafor. Dakle, u suštini ono su su nabijeli semafori za viliuške i za taj kao nej tikit, ovde su nam sad da takle procesi. I tu nema, kažemo šta dalje da se nešto diskutuje. Sam da, takle, ovo bi bilo to kao distribuirano rešenje, gde svim medžesomno odlučuju o tome kad koji ima pravo da nešto radi. Dakle, filozof traže svoje tikete i viliuške, simsta je ovdje ono je prvo uzima i v desno viliuška, ne levo, a viliuške, takve, iz vaka viliuška ima svoj gled ovog i desnog filozofa, i dakle, može ili od levojga ili od desnog dođe zahtev za in. Dakle, dok od, ako je pristigao zahtev, dakle, ovde nema u sluva sad ali smo slobodni ili ne, zašto? Pa ako pristigne zahtev i nismo dakle došli do toga da možemo odabiremo, o nej zahtev koji prihvatimo, dakle, ulazimo u ovaj blok izvršavanja i ako pristigne onej i drugi, on će da stoji da čeka, dakle, posto synchrona komunikacija, neće se prihvatiti poruka, već, će biti blokiran, taj filozof svedog se ne prihvatiti ta poruka, a ta poruka će se prihvatiti, potencijlima, onda kada ovaj predvhodni oslobodi viliušku, to jest onda kada nam stigne poruka da smo sad slobodni, dakle, ovde kada završimo ovaj deo programu, dakle, kada izvršimo ovu komendu, onda, dakle, završavamo ovo iteraciju i reprecentivne komende i onda, dakle, ponovoproveravamo, da li nam je možda stigne zahtev od najvog ili od desnog filozofa za uzimani viliuški, tako da, dakle, ovde, implicitno zaključovamo i blokiramo ono kozivajuće, kao što smo recimo radili sa onim semaforima e-wait, dakle, simšto, naravno, tamo smo imali i uslov, ali, dakle, do god se neprimita poruka, onda, o nej koje slao biće blokiran, dakle, bez eksplicitno v neku boziva zablokiranje, mi smo zablokirali već, dakle, koristimo to što je komunikacija synchrona, da bi smo negde zablokirali one procesu koji ne mogu da nastale daji. Za run, ovde već možda, zapravo, ovo je praktično identično kao, osto je bio ono semafor sa početka ove prezentacije, dakle, run ima je kao semafor koji inicijelno ima vrednoš četiri i dakle, dogod je, dogod ima onih tiketa za uzimanje, filozofi mogu da uzimaju, kako vraćaju, tako se vraće tike, dakle, četiri mogu da prođu, 5 jako prođuje dok 1 ne vrati, nećemo moći zato što je v je već od nula, parada zato što je v je jednog u nula, dakle, kada v je postane već od nula, onda ćemo moći da primimo tu pora. Na raznovno, može i ovde da se napravim centralizovano rešenje, tako da filozofi sa koordinatorom nekim komuniciraju o uzimanju, o uzimanju biljuški, tako da dakle, to bi reacimo bilo, on možda nešto slično ridr s ratir s problemu ili u producer-consumer problemu koji smo, koji smo pričali, ridr s ratir smo reakli da probate za režbu, dakle, kod filozofa, opet, dakle, imali bi smo tog neku koordinatora i onda bi filozofi, verovatno, sličan način, funkcionisali s tim, što ne bi eksplisitno, oni tražili tike tin biljuške, nego bi od to koordinatora tražili da počnu da jedu i da kazo da su završili, dakle da onda koordinator grihno tome šta je slobodno, a šta nije. Tu može isto na više načina onda da se reši problem, recimo može da se šalje zahtim za jelom, a onda da vi čekate povratnu informaciju da to, da vam se kaže da je to ok. Tu možda, to je mo, kažem možda varijanta, ako biste chteli na neki način da probate da isforsirate neka ka vredosled, s tim što nikada ne ožete da budete absolutno sigurni u redosled, dakle da forsirate fif od avne koji je prvi poslo, prvi dobije, zato što smo reakli, to u nogom ne zavisio toga koji u granu oneltaritivne komande će nam da upadne proces, dakle koji će doda bere od tih svih koji su pristegli, ali možda kada pročitate i vidite da taj ne može,
 nešto da vradi i da onda sačuvate identifikator sa strane i kažec dobro, on je prvi zatražio pa ću ja da vidim čim se stvore u slovi da taj može sada da jede, onda ću ja njega da pustim, al mođu vremenu i dalje prihvatam poruke ili za početak ili za kraj jedenja. I da će možda opet ako neko želi da jede, a čak i ima mogućnost ako koćemo da kažemo nekoj je prvi zatražio, prvi mora da jede, onda i njega recimo sačuvamo za kasnije ili šta više uve kako taj neko ne može, drugi da jede, onda ga opet svakako stavljemo ured za čekanje. A onda kada oslobadžemo vidiške to je skada nam neki filozof pošalje poruku da je on završio, tu on ne mora da dobije nikakujem povrknu informaciju samim tim što me pročitana da poroka on zna da je to pristiglo. I da onda na osnovu toga koji je filozof završio sajalo, mi onda recimo proverimo, da li oneg prvi uredu za čekanje može da jede, ako može, onda ćemo njemu da pošaljemo onej ok. I onda eventualno, dakle, to bi valjano proveriti i da li i onej sledeći, može da može da počin da jede, dakle, ako se oslobodio filozof koji, recimo, bi između ta dva, pa onda sad, dakle, ono je uzanima po jednu vidišku i sad su slobodno obej, onda oni mogu da, mogu da jedu. Recimo, onej zadatak sa monitorima, gdje je rađeno tani filozof s problemem kada smo, kada je bio ono test kao neki, neka funkcija i tu, dakle, smo imali onu proveru, dakle, kao test, da se vidi da status levo gide, snog je nula ili jedan kako kod hoćete, pa da onda da na osnovu toga kažemo, ako je recimo nula razmišlenje, ako su njihovi statusi nula, onda se tome da zvoljava da jede, ako ne onda ništa. U suštini to bi smo mogli da napišemo i opet kao u jednoj, u jednoj petli, da, taj su u jednoj zapisu, u jednoj guarda da kažemo, ne znam, da status od i i plus 1 od 5 budu jednaki nula i da je to uslov da se onda prijime poruka o početku jela. Kažem, to je ok, zato što reklismo to samo znači da ne pisamo 5 pute i jedno te isto, tako da to je sasvim, sasvim ok. I recimo, a je to, to je jedan, jedan način za rješavanje bez recimo da ono, da ako ne može da jede, da on mora da sačeka da dođe redna njega i da onda ono bude prvi obslužen. Tako da, ovo je samo, dakle, ko prvi dođe i može da jede, može da jede, dakle, ali ako koćemo da tu pravimo. Nekakva radu svedi da forsiremo kad koo može da, kad koo može da jede, onda mora da su uredi malo togači. Mali pitanje za ovaj zadatak. Ok, onda ostavljamo još jedan zadatak iz CSPA i tu vrlo često bude problema, ali sa jednim, drugim zadatkom. Pa ćemo prvo ovodit komentarišemo, a onda ćemo da poomenemo i taj zadatak sa kojim ima problema. Dakle, izračunavanje integralom, to je zapravo, ja mislim, i prvi zadatak u izbirci koji je usoštini kao producer-consumer problem, ali mi tek sada pričemo tu podelu posla na vrpama i šta je ideja torbe poslova. Pusto je dve variante da kažem torbe poslova. Je da pravamo da nije naprta, ali to će vratno i težere da idem, i što, ola ko ćemo staviti. Dakle, dve su variante. U svakom slučaju imamo torbu i u svakom slučaju imamo radilice, to jest to nekoji obavljaju izračunavaju te poslova. Varianta je, da li imamo i kolektor? Pa ćemo sada da ispričemo pravo ovo levo, a onda ćemo da ispričemo i ovo desno varianta. Torbe poslova šta radim. Beg, ta torba ima, znao šta treba da se odreći. I hoćemo taj posao da izdalimo na manje delove koji u suštini isti tip posla. Dakle, u ovom slučaju izračunavamo integral, ili, šta bi mogli da bude još? Odmah nije pamet, oni drugi problem, ali idemo. No ne, spet. Isti je posao u glavnom, ne znam ili je, znažem izračunavanje neko, o svaru, glavnom je neko izračunavanje, gde samo je pitanje koji deav tog celog okupnu posla uzimamo. Za integral imamo ceo interval od x-min do x-max, koji može da se podeli na određeni broj delova, ali u suštini svaki od tih malih intervala, koji pripade u tom velikom, integral se u oba izračunovanja isti način. I ne znam sad nebitno, koja je funkcija koja se koristili za aproximaciju izračunavog integrala na tom intervalu, ili morate se svarno računa integral na neki način, brej ono matematicky formula, to nas absolutno ne zanima. Ili recimo, taj je idet drugi problem, n-body gravitational problem, gde se kaže da se posmata problem n-nebeskih tela u sve miru, koji medjusovno interaguju. To medjusovne interagovanje je interakcija pomoću, interakcija gravitacijenih sila, učičena svakog tela učičena svaku drugo, i te sve pozicije, i rasporeditela, i masa, i svašta to nešto učičeno gravitacijenu silu, između Multiju svaka dva postoje gravitacijenu sila, a onda kada se sve te sile saberu, onda dobijete neku rezolvdujiću koja će do učiče na to da se telo ili malo pomeri u jednu stranu, učičena najviše promenu pozicija. Nebeskog tela ne može baš da učičena masu, ali svakog tela učičena svaku drugo i svakog tela će da se pomeri pomalo, ali izračunavanje za jedno telo je isto za svakog tela, potrebno u sve informaciji od svih ostalih, gde se ono je trenutno nalaze koje su i mase, i koji ime možda vektor ubozanja ako je to išto baš bitno, nebora vam da sam taču u te forme, ali bitno je samo da za svakog tih tela znamo svakostala, gde se trenutno nalaze da bi smo mi mogli izračunomo našu novu poziciju, taj značunomo kako su svata tela uticila na nas. I svakog tih tela preračuna, i u tom trenutku kada smo izračunili nove pozicije za svat tela, mi sad imamo novu situaciju, novu sliku, taj značunomo snap shot, kako ta tela izgleduje gde se nalaze u univerzumu. Kod integrala nije baš da nam je neapodno sve sve, kod integrala nam je neapodno sve sve, kod integrala nam je neapodno sve sve, kod integrala nam je neapodno sve, kod nas sve sve, kod integrala nam je neapodno sve sve sve sve, granice intervala i potrebno nam je funkcija da bi smo prevetlnili taj te deliče. Dakle, kažem, ovde... OK. Pa, ja ćemo da je ovo prava. Dakle, ako ovo im terva, nićemo disetskamo na male deliče, i svaki od ovih deliča će dobiti jedan worker. Dakle da na torbi poslova je da podeli taj poslova.
 Nemora i što više najčešće nije to slučaj da se posao podjeli na tačnu nuliku workera koliko postoji. Jer što to onda ne dobijemo mnogo. Ako imamo n workera i todelim im n poslova, jedan worker može da pokrnuti na boljem reklinaru, da je bolj memoriom, boljom brzinom procesorom, završi da završi očas posao. Drugi worker je na neko malo lošijem i njemu trebam više vremeno da to završi. Onda će taj posao da se čeka da završi naj spori worker. Opet može da se desi da i to nam bude prihvatljivo, a onda samo gažemo ok, ovi su završili, sad čekaju dalje do kva jedan završi i onda kada svih workeri završi posao da onda se dobije taj rezultat. Čestnje stvar je da beg podeli na nezavisa neki broj poslova, nebitno koliko ima workera, i da onda worker u suštini traži da dobije posao, beg njemu dodeli prvi sledeći posao istorbe, dakle idemo redom, a onda da worker vrati rezultat. Dakle, ovdje bi bilo ask, ovdje bi bilo reply, i ovdje bi bilo, recimo, ok, ovo nje ličinino što. A ovo recimo poslednje bi bilo result, dakle ovdje ripola ipsel. Dakle, worker traži od torbe poslova posao, torba da prvi sledeći, onda drugi worker istorbe ne može da traži drugi posao, beg mu doda prvi sledeći, i tako dakle beg podeli poslove workerima do neke granice, recimo, dok oni su svi istražili, u među vremenu mogu da stivu rezultati tih poslova koji su odveđen, recimo oni workeri koji brže radje, oni brže šalju rezultat, bebu i od njega posla ponovotraže novih posao, i onda dakle dobiji oni prvi sledeći. Tako da tu imamo neku ubrzanje, da oni workeri, naravno koji radi brže, možda budu dobi li više poslova da odradje, možda se desi dovolj koji je sporim nekad ni nestigne da zatraže posao na vreme, da dobi smo rezultat mnogo ranje. Kod računanja integrala, ovdje nema istog posla koji se ponavlja, dakle, viste izračno li integral i to je to. Bega ovdje kada skuplja rezultat, on će samo da ga pokupi, i kada bude došlo ono liko rezultata, koliko smo imali inicijalno poslova, onda znamo da je gotovo i kažemo dobro tu kraj. Evo rezultat izračunavanja i to je to. Ako nam se ponavlja posao, kao što je to slučaj sa nebeskim telima, gdje jednom son je pomerja, ali sela gravitacija neće da kažu, dobro, ja sam se malo pomerjio, pa više ne važim. Već se je tijala konstantno kecu, ima mnogo iteracija, tako da onda beg tu treba da vodi računa i osledićem. Dakle, najčešći u tim situacijama kada imamo taj posao koji se ponavlja, kada nam dođe celo kupan rezultat, to znači da je to samo kočetna tačka za sledeću torbu poslova. Dakle, on mora da vodi računa da je taj rezultat koji je stigao, sada novostanje. Pritom ne smedam da se desi da mješamo ta dva rezultata, dakle da dok skupljamo rezultat on je tu na nekom poslomno mjestu, kada smo prikupili ceo rezultat, onda može da se zamenim ono inicijelni posao, dakle tek kada su sva tijala izračunala svoju novu poziciju, onda možemo da zamenimo stare pozicije i stare vektore nebeskih tijela sa ovim novim rečućom koji su nam stigli. I kod tih, kod tih, kod tih, koji toga n body gravitationa od problema, imamo situaciju da može da se posao podeli na nekoliko načina, sada dalje ćete vidi da računate dva po dva tela i da onda kažete, ah, ovo je rezultat, će su rezultatica sila izmežu njih i da onda beg bude taj taj koji se da preračunala posle za svako tih tijela i za svako tih sila, koji su prestigli za njega, šta se dešove ili ćete to da kažete dobro, to će sad da bude novim rezultat, pa će svaki worker dodobije da sbera sveta sila i izračuna za pojednu tijelu, ali i onda u tom slučaju možete da kažete ok, jedno nebesko tijelo je jedan posao. Vi posaljete informacije o svim, o svim nebeskim teljima i kažete, treba mi index za i, i u sastinu i onda workerima šaljete cowniz i index i, redom, nakon od jedan dojan, i worker je preračunavan za to i to telu, koja će da bude njavovan ovo počicije. E sad tu je uvek neka kav tridov zbog toga što ako šaljete cel vektor, to je velika poruka, mnogo informacije se šalje, pa z te strane možda malo lošije, bogat ovo je namnogo veliko, ali iz drugi strane ako šaljete za 2x2, imate veliku količinu poruka koja se šalje, pa dakle i tubu biti malo vremena dok se to sve pošli i primi. I jedno i drugo je ok, samo dakle da budete, da budemo sve smi da postoji to neka kav tridov. E sad, to je ako imamo samo baggy result, ako imamo kolektur, onda je možda lakše, možda nije, malo je samo drugačija, malo je samo drugačija synchronizacija između učestnik. Ok, opet će bag da podeli taj posao, burkiri će da traže posao, dobi ju posao, ali rezultat, naravno, šalju kolektoru, jer on, dakle, prikuplja rezultate. Polektor, kada prikupljim sve rezultate, dakle, bag verovatno treba ili u napreda da se dogoviš sa kolektorem, ili treba možda i da pošalje kolektoru koliko poslova treba da podeli, da bi kolektor znao koliko rezultate da skuplja. Najčešće se nešalje kolektoru koliko treba da skupi već zna. Ali, dakle, kada kolektor skupi dovoljom broježu zultata, onda ako je to bilo to kao što je, recimo, izračunave integrala, onda kolektor kaže dobro, to je kraj, nisme zvršili ovaj rezultat, ali ako ima više iteracija, onda kolektor šalje torbi, ovo je novih poslova koji treba da se podeli i dakle, opet krećemo, worker, šalje, bagu, bag, raču workeru i tako, dakle, dakle, ono što sigurno nema, je da bag samo šalje workerima, bez da su oni zatražili taj posao. To tehnike nije torba poslova, pa ako biste svakom workeru dodelili po jedno nebesko telo, nije, jeste rešenje, ali nije to torba poslova. Tako da tu treba malo voditi raču. Ale, kako bi izgledalo, ovo samo sa jednim, to je samo sa bagom ima udovima, reke smo, šaljem da tražim da dobijem nešto da izvršavam, dobijem levodesnu granicu, preračunam šta goto bilo i javim rezultat ovde sa samo bagu. Bag, dakle, on nima.
 da se odradi, krećemo od xmin, idemo do xmax, dogod, dakle, imam poslova, ja ću da i dogodim u granicama, onda ću ja da šaljem ovdje te podatki koji su zatražili worker i umeđevrema, ono i što tako, dakle dok mi ne pristigne n, poslova, ja ću da skupim resultat. Pritom ovde verovatno, ne se vratu, ovde treba povesti računa o tome da, dakle, ovdje x je najverovatnije xmax minus xmin podeljeno sa n, i da je to, da je to, da je to, što se Ces Piatića. So motor Pete select na t nodvji pi, ota sm wiram s prisidamーム z kanalima s四k....... Metle ne vrhute. Me to ne ch Management. Kajde da napravimo samo malo palo na bukonu od 5 minuta, krećemo s dalimnom, da se slažete. Kajde da se slažete? Kajde da se slažete? Kajde da se slažete? Kajde da se slažete? Kajde da se slažete? Kajde da se slažete? Kajde da se slažete? Kajde da se slažete? Kajde da se slažete? Kajde da se slažete? Kajde da se slažete? Kajde da se slažete? Kajde da se slažete? Mess flatni stvar da ovom predmilu dose wezbitiče ma数ar pokazal don�one Jesite warpilin da biblioteka I mislim da vam i profesor malo to pričao na predavanima, ali kao će vam u krátku dobrođemo i s sandučićima i sa CSP-a smo imali do nekle, ili baš direktno-direktno ili do nekle direktno slanje porukove. Dakle, znali smo gde šalimo poruku na neke način i predpositili smo da tu poruku ili sad sigurno ka u CSP-u ili sa sandučićima da kažemo da gde samo jedan proces može da čita poruku iz jednog sandučeta. Dakle, znamo da su te poruke sstigla na neko desu. Koć ce linde imamo to malo drugačije. Dakle, koć ce linde, kao da na neki način radimo brotkast poruke, to ja stupisajemo poruku tako da ona bude javno vidljiva. Bdia suupisoje ta poruka pa upisoje se u tako zvanim tapo space i prostor torki. Dakle, poruka se smatra nekaplom torkom, taprom kako kojada. Oni procesi koji učestuvaju, a oni učestuvaju tako što mi napravimo nita na neke načinu u tom prostoru porki. Oni mogu iz tog prostoru torki da čitaju poruke i da u nich obacuju. U zavisnosti tog da kaj u komandu pozovemo, onda je jednog ne drugog ili draca. To pravljenje niti je pomoći ivali komande. I sad tu, da li će tu biti prostor, da li će bože na tom računaru gdje smo mi pokrenuli ival, biti pravljena niti ili neto, absolutno, ne znamo. Ono što znamo, je ste da će ta torka biti aktivna svedok, ne završi svoj put. Dakle, ako smo napravili vajl trunjak da onda nikad, ako imamo, ako imamo, da se nekad završi, onda dakle, nakon što se završi, ta niti, dakle, nakon što se završi nije nareda, onda to postane pasivna torka i opet može da se čita kao svaka druga. Ono što i dalje važi, je ste da absolutno nevamo nikakvih zadnjičkeh promenimnih. Dakle, nisva to ekstremstvno pomenalo u CSP, ali, dakle, ono, recimo, buffer koji nam drži one producer-cusumer koordinator, ne može direktno iz njega da čita producer, parada da čita consumer, ili da upisuje producer, već mora pomoću poruka da se kaže da se žali da se pristupi i onda tega, dakle, se tu upisu, ali, dakle, niko nema kod sebe podatki koje može da vidi i neku drugi. Dakle, sve što žalimo da radimo, jesti bilo putem slanje poruka, a i ovde je isto to slučaj, tako da se ne postoji deljenih promenivir i ako postoji taj zajednjički prostor torki, već, dakle, ubacivanjemu torku, mi je kažemo, da ovo se s ubacivanjem torku, ubacivanjem prostor torki, sad mi je kažemo, vidimo svi oni koji hoće, mogu da vide tu torku, dok se ona iz nje neukloni. A sada, kako ubacujemo i kako izbacujemo iz prostora torki, dakle, out, pa te je torka, sad dakle, vrlo često, će torka imati kao prvi ili kao posanje ili kao bilo koji je među argument. Nekakav string, pod uslovom da, na neki ne, ne pod uslovom, mogli da razlikujemo taj torka čemu služi, nače, s imamo taj neka kav string koji služi na neki način kao identifikator, jer ako bi smo ubacili samo broj, recimo za broj trevnotnaktivnih titalaca i ubacimo samo broj za broj trevnotnaktivnih pisaca, kada nekou poželim da pročitam, on vidi, aha, ja tražam torku koja ima broj, pa nešto sam pročitala, ali ja ne znam da li je to broj čitava celih broje pisaca. Tako je da vrlo često se ubacio taj kao identifikator, da bi onda mogli da se razlikuju torke. Naravno, ako imate sve torke koji mu razlačiti broj argumenta, onda je to možda višak, ali lepše je možda da se znajer, nika ne zna te koji će da koristiti taj prostor torki, koji će tu da se pojevi, tako da bolje li da koristite sa tim nekim identifikator. Naravno, može da se desi da torka se sestoi samo iz jednog stringa, pa da to bude kao nekakavne. Nešto kao na jaceka, na primjera, knowledge, da onda ti me kažete da je nešto u prostoru torki, da bude kao nekakakavne signala ko to postoji ili ne postoji. Ima ćemo i zadatak sa ti. Uglavno, te torka na koji govod način formirana i uzavisno su zadatka u njoj imamo, sta imamo, ali out, takle izračuna polje torke ako imate nešto što je neka ka vizrazi ili ako imate nešto što je funkcija, pri čemu to sa funkcijem bi trebalo da se izbegne, da ako hoćete to da radite, da se u funkciju, prenego stubacite rezultat u torku, takle tu pogreničenje, dakle nakon što se izruši izračunavanje, ali ne i pozivi funkcija, onda se ta torka zove pasivno i ubacuje se u prostoru torki. Opet ovde imamo asihronu ubacivanje, to je s asihrona slanje, tako da oniko radi out neće da se blokje i može odmah da nastavite danje. Nas ne zanimo da li će i ko i kada da pročitati u torku, nama je bitno samo da smo mi ubacili. Toruku i torku jednu i drugu ću da koristimo. Ina je ono što bi odgovaralo čitanju i izbacivanju iz prostora torki. Pričemu, dakle možete zatražite po nekakom šablonu, gde taj šablon može da ima neka fix na polja, recimo identificator ili zanimo nas da nešto izbacim samo ako je nešto došlo dobro.
 pa onda dakle fiksirate tu neki brojčice ili integeri ili stingove ili što go drugo ili može da se desi da stavite znak pitanja ispred neki promenljive koji ste naravno pre toga definisali i da onda dakle tražite torku koja odgovara tom šoblonu od opet svih mogućih torki koje postoje u tom prostoru pojegi. Tako da mora da se da se desi poklapanje sa onim fiksiranim vrednostima kažem opet, naprima identifikator je bilo što je vrst vrst napisano da postoji, da treba da bude kao vrednost, a sve ono što ima znak pitanja. Akko imam samo jednu torku koja se poklapa na onim delovima koji su fiksirani sa onim što smo napisali u šoblonu, onda ostala polja gdje dakle imamo znak pitanja dobiju vrednosti te torke koji smo pročitali i izbacili iz prostora torke. Akko imam više mogućih poklapanja, to jest, akko imam više poklapanja sa tim fiksnim delovima, naprima imam... Neznam, imam možda, ali ne bi trebalo da tako nešto imamo, ali neznam, imam nekoliko zachteva u prostoru torki koji svi imaju nekakam svoj redni broj i sad mene ne zanima da ide nekim redom, već mi je samo zanima da pročitam bilo koji zachte. Neznam koji će od tih zachteva biti pročitati. Možda ćemo pročitati zachtev sa najmenim brojem, možda ćemo pročitati zachtev sa nekim medjovejnošću. Dakle, ovde opet imamo tu taj neki nedeterminizam, ako postoj više torki koje se nalaze u prostoru tojki. Ako ne postoj ni jedna torka koja odgovara šablonu ili koja odgovara... Nakle, šablon je i kad imaju i tiksno, i sa znakom pitanji, ili absolutno je sve fiksirano, ili absolutno sajime na pitanje. Ako dakle ne postoj ni jedna torka koja odgovara tom šoblonu, onda imamo blokiranje i dakle, on neko je pozvao im metodu, on čeka da se pojavi neka torka koje se do odgovara tom šoblonu. Ako ima nekoliko... i nekoliko procesu koji koće da pročitaju koje traže istim šablon i dakle, kad se pojevi taj šablon u prostoru torki, opet ne znamo ko će od njih dobiti, dakle ko će od njih prvi da kažemo da uhvati taj šablon. Ako nekoliko njih čeka na isti šablon i on se pojavi, opet nedeterministički, jedan će od njih pročitati to, ostali će ostati blokiranje. Šta ako nećemo da izbacimo iz prostora torki, već samo koćemo da kažemo dobro, ja ne smijem da nastavim dalje do god se ovo nedesi, da tako kasa. Znači, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se pojavi, da se iz ditchova, da se pojavi, dan , da se pojavi, otaknamo od breath od breath. Tako, opens up i opately organise you to 35 da imamo to blokiranje u slučaju da nešto ne postoji, ako je ne znam, čekamo dok neko nekaže da možemo svih da krinamo i na primer recimo neka barijera. I da ne može da se nastavi sve dok neko nekaže, eh, sad možete svih da prodjete dalje, bez toga da, onda neko kupi to, da neko uzme iz prostora torke i onda da odmah vrati. To najčešće, eh, ne treba da se radi. Eh, osim, dakle ako ne uzima, se nešto promenite ga pa ga vratite, to onda je okej. Ali ako samo koćete da uzmete i vratite, to onda nema pointe, bolje je read. I, dakle, isto je kao inopo samo što se pronadženo torka ne brši iz prostora torki. Dakle, ako ne postoji u prostoru torki, onda će, eh, se blokirati, ah, one koje pozdvalo radi. Ako postoji po prostoru torki, eh, i recimo imamo na neke, eh, imamo šablon gde treba da pročitamo, ah, vrednosti nekih promenljivih, onda se, ah, dodale vrednosti promenljivih, ali opet ako imamo više istih, ah, imamo više poruk, to je to torki koja odgovaraju u tom šablonu, neki od njih, ah, će biti pročitani, dakle, dobijemo neku vrednost iz tog prostora torki. Ivel, ah, smo pomenuli, ah, i rakli smo da, ah, ok, ovdje kažem u suštini ima isto ponašanje ka out, samo što se izrečunavanje polja radi nakon stavljenje o prostoru torki. U suštini, ah, to je ono kada, dakle, mi zovemo proces, ah, i kada pravimo proces, ah, takve, za svako, ali torki koje sodrži funkciju, koje vraće neku vrednosti, implicitno se kreir, može da se kreirano proces, ah, i ono odmah nastavlja, ah, svoj rad, ah, dakle, kada se završe svi tip proces i sve tem, ah, funkcije, onda, ah, torka po pasijne, ah, u glavnom, dakle, ivel, ah, ni baš kao ko, begin, ali, dakle, na neki način to je, to je, dakle, pokrenete niti, kažete, sa treban da, da se raćim. E, ah, imamo i dve, ah, još, ah, funkcije, a to su, i na po, i rda po. Ah, i na po, i rda po, predpostavljete da je slično kao, i, i rda, ah, u zjednu razliku, dakle, ni, ah, ovo su ne blokirajuće varijante tih, ah, tih, ah, funkcije. S tim što? Ah, ako, dakle, ah, postoji, ah, torka, onda će in da vrati true i, po našo će se kao i in, ali, u slučaju, dakle, da ne postoji torka, onda samo vrati false, naravno, pošto torka ne postoji, onda ne može da pokupi neke vrednosti iz torki, ali, dakle, vrati false i ne blokirase niku. Dakle, ah, najčešće imp koristimo i rda po, u nekim uslovima, dakle, ako nešto postoji u prostoru torki, ja ću da ga uzmem i onda na osnovu toga da li ću da, da radim, ali ako ne postoji pa ništa, onda radim nešto drugo. Dakle, ako, dakle, ne moram da se blokiram, ako mi to nešto fali. Nekada može da se koristi i da se pod znacima navoda čistit džubrem iz prostora torki, dakle, ako neko ostavi torku rezultat koji više nikom ne treba, onda možemo samo zakažemo, ok, ako je ta rezultat postoji, tako da postoja tiga samo pokupi da ne bude, da tu sad nešto ostane viška poruka u prostoru torki, dakle, da ne trošemo memori u tom i ur tomom prostoru. Tako da dve su da kažem te vrije.
 koje mogu da se vrate i dve su, da su slučaj u kojima najčistije, dakle koristimo i na p. I rad na p, dakle slično kao i na p rad na d. Dakle ako postoji torka onda ćemo, onda će se vratiti tru, torka će ostati u prostoru torke, mi ćemo dobiti neke vrednosti za promenljivo koje smo stavili u šablon i nastavljamo dalje, ako torka nije postojala, samo vrati nam se false i to je to i dakle, ne možemo naravno da koristimo one promenljivo koje su bile u šablonu torke. Idof, da krenemo odmah od i ove najlakšeg zadatka, a to je opet semofor kao što smo imali ko CSPA, dakle kako da koristići celu indu napravimo semofor. I opet koćemo, dakle da iskoristimo implicitno ove funkcije, da bi smo nekoga blokirali ko treba da se blokira i da bi oneko može da nastavili dalje, neomec ono mogu da nastavili dalje. Pa šta je susrstina? Signal je, recimo, postojeće torka u prostoru torke. Weight je uzimanje torki iz prostora torke, a broječke vrednosti semofora menjamo u suštini brojem odgovarajućih torki u prostoru torke. Dakle, ako je vrednost semoforat nola, to znači da ne umo ni jednu torku koja odgovora tom semoforu. Ako imamo 5 poruka u prostoru torki, to znači da imamo danam je broječka vrednost semofora 5. U suštini, inicializacija, dakle, string semofor, dakle, ako ćemo da zovemo semofor, dakle, ne znam, imamo semofor koji može da se zove. Newtex naprimer, imamo semofor koji se zove. Entri, ili imamo semofor, dakle, kogogod koji može da zovemo ove semofore, da onda to, dakle, ne imamo više semoforu u prostoru torki, da ih onda označavamo svaki svojim imenom. Inicializacija koliko god nam je inicijelno vrednost, toliko torki za taj semofor izbacimo u prostor torki. Signal je, rekli sam, samo izbacivanje, avuet je in uzbrisanje, dakle, nikakorada, već samo in pokupimo, o nej, permission, kako za ovaj beš u javi. Sad mi je stavno ozak. Nije otikit, nebo vas. Ali, znate našta mislim, dakle, u suštini ona broječka vrednost, permit, tako je zove, zove se permit, dozula. Ako nam je broječka vrednost semofora nulo, to jest, ako nemoj ni jednu poruku zadati semofor u prostoru torki, pa onda će ove biti pozivajući proces blokirani, dakle, zato je ono što i žalimo da uratimo. Bila pitanje, možda, do sad za našto. Ako nema, opet, Filozofii koji nećemo raditi. Ali čisto je to da vidite kako bi to izgledalo, u Lindi. Opet ne mora da znači da je ovo jedini način za rešavanje. Bilo koji od oni koji smo do sada pričali, može da se prevede u Celindo. Opet, gde treba voditi racuno, jestem da kada radite in, vodite racunam kada, dakle, smije kada ne smije i što to treba dozima teršta. Ovde je opet datorešenje, sa rum tiket koji u startu izbacimo ono likupo, tako likom. Žalimo, dakle, broj Filozofa minus 1. Svaki Filozof, dakle, opet, uzima i tu recimo levo i plus 1 modnju, toliko, viduški. To je statiča, ovdje top stick, to je neogolim izraz. I, dakle, braći ih i braći tiket. U startu izbacimo ono likoviljuški, koliko ima Filozofa. Može da bi treba u rum tiket preizbaciti ali nema vese. I vel Fil od i, dakle, pokrećemo u sushtini ove Filozofe sa svojim ovim identifikatorom. I, dakle, ovo će da naprevi nativina od nit, naprevi će nit za svaki udovi Filozofa i onda će ono i da uzima i braći iz prostorotorki. Možete koristiti, tako da, bravite niz. Pa, sad, to opet nešto slično o njim stanima, pa da vidite, da li je stanje predschodnog jednoj ili drugo. I, danas, u toga možete dodržite, šta ćete, šta ćete zarazite. Tehnici mogli biste i da čuvate, da svaki pud dohvatate po 5, recimo, ilamenata, da li je sa tim stanjimo za svakog o Filozofa, s tim što onda za svakog Filozofa morate da napisete posebno program, što on nije baš, ovaj, je porucnivo, ali topre. Dakle, to je sve što radimo u danim Filozofers, a sljedeći za datak jeste client server, i šta je tu zadatak, da u jednom distribujeranom računovakom sistemo imamo više kljenata i jedan server, ne znam okoliko imamo kljenata, ali znamo da oni šaljom zahtive, a serveri obslužujete zahtive i vraćuju odgovor kljentu. Zahtiv koji je ranje poslut, treba vidima prednosno do njim, koji je poslut kasnije. U sluštini, sad treba vidimo kako radimo ticket u linti. Da vas pitam, da li da kuckamo mi ili samo da komentarišamo vršenje? Da, možda malo brže da komentarišamo rješenje, ali da je za neke zadatak možemo i da odredimo, da vidimo kako ne treba raditi. Ove zadatak ne bi trebalo da bude sada naša šta, nemožda imamo del po delu ili nema. Ok, tako imamo server i u kljenata. Treba da oni koji je zahtiv koji je došao ranje, da ranje bude i u kljenata, da imamo i u kljenata, da imamo i u kljenata, da imamo i u kljenata, da oni koji je zahtiv koji je došao ranje, da ranje bude i obsluženje. Što znači da postoji nekakav ticket, i da server treba po tom ticketu da obsluže zahtive. E sada, to iplicitno znači da on treba da znaš koji je njegov next, koji treba da da obredi. E sada pošto imamo samo jednog servera, onda taj next koji je slajdeći je bitan samo njemo. Kljentima nije bitno, kljenti ne moreju da znaju koji je next, dakle nemo on while nesto različajte od next i ovde čakaj, već staći kljenti da radim. Dakle oni uzmu ticket koji je u startu, recimo bio nola, tako taj index neki, pokaj je 1. Inicilizujemo da ono je brojačko ide, dakle ono što uzimamo mi broj, pa tako treba da radimo. Tim i Radim treba da radimo je u startu 1, i dakle ono je ko prvi uzme tu jedinicu, on je prvi i izbacim da je slajdeći redni broj, pa drugi kljent koji hoći da mu se nešto odradimo, isto prvo uzme redni broj.
 svoj i izbacit da sledeće koju uzima, on će uziti sledeće redni broj. Oni uzima i ovdje tikete, tako što uzmu nešto iz prostoratorki i vrate. Za sledećim, za vrate on je uvećeno. Kad smo mi dobili koji je naš redni broj, kažemo imamo ovaj zahtev, ovo je moj redni broj i ovo je moj zahtev. Stvag od on bio. I onda čekamo da pristigne odgovor za njega. Mene nezanima koji je next, ja znam da onda kada bude izbačen taj moj odgovor, da ja treba da ga pokupi. A odgovorno na serveru je da on ide redom i kupi ove sve zahteve po tome koji je prvi stigo klient da zatraži broj. Dakle, ovdje ne mora da znači može se desi da Out request sa indexom 5 stigne preo noga sa indexom 1, ali ovo je prvi zatraži index, tako da on prvi travo da bude obsluženo. Tako da mislim, ako baš koćemo, možemo i da obrnemo ovo dva auto i da kažemo, ja ću prvo da izbacim svoj zahtev, ali onda ću da kažem, ja sa ti sleda ću možete dozimaš. To može da usporava zbog toga što može da više se čeka na ovaj index, ali u suštini je isto zbog toga što svakako će možda ovih servera da čeka da stigne ove requesti, tako da tu nema u mnogu razljike da vi se ova dva auto obrnu ili ne. Glamnom reklesmo da server ima taj svoj next i da server treba da ima next i da on treba da ide 1, tako da on kreće od indexa 1 i čeka da se pojavi taj zahtev sa prednim brojem 1 i njega pokupi. Odradi već što treba i kažemo out response sa tim indexom i taj odgовор koji ću onda da pokupi taj činje, dakle to nam je u suštini ovo next. Index plus plus, dakle prvo se izradno ove odradi index plus plus, ali to orka se izbaci sa indexom originalnim, a onda za slediću iteraciju nam je uvećan index i kupimo sledići zahtev. I tako redom dok nam ne ponastane zahtev, ilok neko ne kaže dosta. Isto kljen server, s tim što sad imamo više servera i još jedan posebon proces, nije baš server, ali dakle isto imamo proizvanjem broj kljenata, ali broj servera nam se nalazi u prostoru torki. Nije bitno koji servera poslužuje koji zahte, bitno je samo da se dobije rezultat i da zahtev koji ranije poslut ima prednos na donim koji je poslut kasnije, naravno. Zašto nam je bitan broj servera, ne zbog kljenata, nego nam je bitan zbog tog dodatnog procesa sumatora koji s vremene na vreme zahteva da mu se pošli broj obrađenih zahteva. I to tako što svi serveri završi sa trenutnom obradom, izbace rezultate obrade i onda šalju sumatoru koliko su obradili podataka, to jest zahteva, i čekaju sve dok sumator nekaže je dobro prikupio sam sve i onda može dalje. Dakle, ovde je ona situacija na neki način, što sam pomenulo sa barijerom, sve dok sumator nekaže je dobro, sada mi svi koliko god da vas ima poslali. Zbog toga sumator mora da zna koji je broj servera, da bi znao koliko podataka treba da dobije od svih tih servera. I to je to, dakle, sada treba to da izmenimo. S sumatora ćemo da prokomentarišemo zemrvicu kasnije prvo šta je razlika u odnusu klijenata i servera iz predskonog zadatka. Pa pošto imam više servera, ne mogu da imam jedan next za svaki od tih servera zato što oni ne primaju direktno zahhtili da neko kaže e, taj redni broj server meni treba od tebe rezultat i da onda na taj način radi se FIFO, njegode da kažemo globalni FIFO i sada next ili index kako govoda ga zovemo, mora da bude globalna promeniva, ali pošto ne evamo globalnih promenivih, to znači da to treba da bude torka u prostoru torki. Pa tako imamo klijent index i server index, dakle sad tako smo ih nazvali, naravno možda se zove kako god. Klijent index gde je to kao ne index što su klijent i prošle put uzimali, ali server index je zapravo sada ono što je bilo lokalno za i jedan server, ali sada prezvi dele taj globalni next. Request response, isto kao i prošlet puta, imamo sad još do znoda i number of servers, u kupom broj servera što smo rekli da nam je neophodno da znamo zbog sumatora, ali opet ne može to da bude globalno značka promenivah, već mora da se nađe u prostoru torki. Zašto da smo, da znamo da je fixan broj servera uvek, onda bi verovatno moglo to da ostane, da kažemo, ok, biće 5 servera uvek iz avjeki vijekova, ali pošto serveri mogu da se priključuju i odlaze povolji, onda je taj broj servera dinamicki, ako imam samo dva servera koji treba odno rade, pa onda imam dva, ali ako se pojevi 3. i 4. onda i oni sada učistvoju u radu i onda treba da ih uključimo i uvećamo broj i trnaktivnih servera. Imaš tu ovu torku, i idemo i number of processes, da mi ne ir izkovi, ali imamo ovu torku koji će da izbacuju serveri kao odgovorno opito broj određenih zahteva i imamo summing i not summing, da li se vrši sumiranje ili se ne vrši sumiranje trenutno u prostoru torki, to jestu suštini, da li je sumetor trenutno aktivan ili nije aktivan, jer ako je aktivan, onda treba da izbacimo ovu poruku, ako nije aktivan, onda ne moramo. E sada. Da pro komentar rešemo zašto su nam možda potrebne objave torke, ili da li možda je jedna viška. Ok, sto se klijenta tiče, on absolutno nema nikakve razlike u odnosu, on ostalo, on uzima index, to je su uzima ticket, čekad izbacim sa tim rednim brojem zahtev i čekad da mu se zahtev obradi, tako da što se njega tiče, samo smo premenili do ovde naziv torke, ali što si servera tiče, on ima malo, malo nam se razlikuje. Ovde ako bi nekde postojev break ili ako ovde ne bi bilo one, jedan, ovdne bi na kraju na kraju morali da smanjimo broj aktivnih servera, ali dakle čim se neki server registroje, onda kažemo, ok, imamo sada za jedan više aktivni server i imam counter koji mi govori, koliko imamo obrađeni zahteva do sada, dakle brojim kako koji stižu, i ovde našto falita, i šta radi server, pa ako trenutno nije sumiranje utoku, to jest. Ako nam ovaj red-up od samink vrati false, to znači da se sumator nije aktivirano i da ja treba da pokupim.
 zahtev od nekog klienta i da mu dam odkovor. I doovecamo rezahteva koje smo imali. Dakle, sad da kupimo server index, izbacujemo odmah plus 1 da bi i drugi server neki mogo uzno odmah slediti i zahtev, zato da napravimo što konkrent nije možemo. A, dakle mi i onda pokupimo zahte sa našim rednim projem. I tako, dakle, tu dogod sumiranje tranopno nije aktivno, onda mi radimo. E sad ako je sumiranje aktivno, onda mi izbacimo broj naših opređenih, ali treba njega da izbacimo samo jednom za svaku od iteracija za sumiranje. Dakle, ne smemo da primemo nove zahteve sve dok nam neko ne kaže da je sumiranje gotovo. Zbog toga nam ipak jeste neophodna i ova druga torka. Dakle, moramo ovde da sačekamo da taj sumovo torkaže, pa gotovo više se ne sumira, možete da nastivite. Dakle, sumator će biti taj koji će ovdje da izbacim odgovarajuću torku i ovde takođe da završim, isto će da je izbacim. U među vremenu, dakle, ako je noc, amem kada hoće da počne da sumira, onda će onda pokupi torku koja kaže da se trenutno ne sabira, izbacili odmog da se našto sabira, on tada pokupi broj servera i krenu da sabira, to je da broj. Nakon što stigne n brojeva i nakon što smo smo ih sve samo otvoreli, onda dakle pokupimo ovu samim i kažem da se trenutno ne sumira. Sad. Moram da bi ovo, rad mogla negde druge da se stavi, ili možda bi ovde mogla da se stavi pre i na nam broj service, da se pokupi noc samim, pa da se onda vrati, slučajno, mada opet rad, ako ne postoji torka, nije strašno. Dakle, čisto da se ne bi desala slajdeće situacije, dakle, pročita klijem server broj servera, a onda se pojevi novi server koji će dojacit aj broj servera. Nismo među vrana rekti da se trenutno sumira, tako da će on ovde da izbac i broj procesuranih nola, pošto ili na u te tek se prijavio. Ali mi ovde imamo za jednom broj manji, tako da ovde treba biti pažli i ja bih šta više rekla, da ovde, a verovatno bi trebalo da pre ovog ubacivanje i rezervisanje servera, mi dakle treba da nekako blokiramo da se pojavljaju novi serveri dok je sumiranje utoku. Akro šta bi onda tu bilo, pa, da opetne napravimo dadlock, a da opetne napravimo niju poslanu čekanje. Dakle, ako je not suming, pa recimo da onda mi ovde pokupimo in not suming, a da go ovde izbacimo na kraju. Dakle, ako je sumator već počao da pokrenemo sumiranje, onda će novi server ovde da se blokira. Ako bi smo samo radili read, pa, da li bi nos to blokiralo? Dakle, mi bi smo radili read, torka bi ostala, i sumator bi pokupio to torku iz prostora torki, izbacio ovu drugu i mogo bi on već stada da pročita broj servera, koji će u narjednom koroku teka da promeni ove servera. Tako da ovde bih ja dodala in not suming i posle out not suming, nakon što se promeni broj servera, da onda ne bi bilo problema sa tim da neki server pokupim, da neki server promeni broj aktivnih servera, dok sumator trenutno nešto vati. Pa recimo, mislim da ću to i da ubracim u rešenje. Ima, imate li pitanje možda? Ladići zadatak je, mislim, novi zadatak, mislim da nismo ove radili do sada. Sigurit smokers, madem, e. Ustvari, mislim da je stano. Ne mogu da se satim dalje, možda imamo kod regiona. Da mi je stano možda, al dobra, isprečitimo gopoć svakog. Dakle, imamo nervozne pušače i agenta koji posleduje rezerve trenavko na predmetan za lečenje nervozje kod pušača, a to su, i meni se čenje da ima radiji zadatak. Papir duvom šibice, pušač ima i bezkonečno zalih 1. god ta 2, agent bira neka 2 i onda stavlja na 100, a pušači uzimaju predmite i rad ću ih na 100. E, pošto smo radili predpostavljate od prilik, o da berem na random sta ću da izbacim na 100 i izbacim 1 i 2 koje god va i čekam da se to pokupi sa stola. E, sad, pakvo rešenje koje stoji ovdje može dovedati do zaposlanog čekanja. E, sad, kako to može dovedati do zaposlanog čekanja? Pa, imamo 4 učestnika, 1. god, 3 pušača i sad ovdje izbačeno outwatch, na primer. I, taj smulker, 1 po 1, takli uzimamo, kažem, ja ja ću da, kažem, ja sad gledam šta je na stovu i proverim, ako su oba koje meni trebaju, dakle, ako imam i jedno i druga, ali provera vam se da ne uzimam odmah. Zašto ne smo da uzmem odmah? Pa, uznam 1, koji meni treba, ali drugi nije taj ko meni treba, onda sam, ono me koji trebaju, ta oba, uzela jedan sastojaka. Tako da, ne smo da uzmem sa im, sve dok nisam sigurno da su oba, ta za mene. Ali, dakle, ako je su oba, ta za mene, onda kupim, završavam i kada završim, kažem, ok. Ali šta je problem? Jedan od njih, može ovdje konstantno da kaže, gledam, gledam, gledam i, da onda imam zaposlanog čekanja, zato isto i teraciju. A zada, šta mogu dovradim, tako da ovdje sprečim da bude zaposlanog čekanja. Imateli idejo? Uželite, uželite, uželite, uželite, uželite, uželite, uželite, uželite, uželite, uželite, uželite, uželite, uželite, uželite,
 Što je problem? Zašto dolaze do zaposljeno učekanje? Tako što proveravamo za isto iteraciju više puta. Najjednostavnije recimo bi bilo da ubacimo informaciju o tome koji je ovo iteracija poredu i da onda kažemo dobra o svakog njih može jednom da proveri za to iteraciju, ali sljedeći put provera za sljedeću. I to može na više načina, s tim što treba biti pažljiv kad se šta čita i kad se šta uvećava. E sad, mana može da bude da dok nekod ođe to iteracije koja sadrži podatke za njega, možda on nije ni jednu iteraciju pre toga bio proverja. Tako da tu onda, opet kažem treba da vidimo šta ćemo u tom slučaju. I kako da on ne pogleda ono što je na stolu sada, a da vidi kao da je to bilo nekoj preetkonu iteraciji. Šta hoće da kažem? Reci možda, ako bi smo ovo da ubacili neka ostano i paper i to bekoje meče i ok. Ali recimo da watch kažemo ok, watch zaraz 1. Watch zaraz 1. I onda da kažemo ovdje, ja tražim i u startu jedno koja 1. Tražim in watch od 1. If ovo, dobro, završim u suprotnom outwatch 1. Ili neko, opravio čak reka jo ostane, ovdje outwatch 1. Ali onda da ja kažem i plus plus, tako da sladite put, gledam watch 2. Ako je recimo bilo za mene, ja sam opet izbacio watch 1. U slučaju da ostala 2 pošače nisu pročitali, i da li da nije za njih. Ali čim ja ovdje kažem ok. Agent će da krene u novu iteraciju i ja ovdje gledam watch 2, ja znam da je 2 iteracija, ali možda ova druga 2 pošače, da li nisu to završilo, ne gledaju kao da je to prva. I da pročitaju kao da je prva iteracija. Da li je nima bitno u koji su oni iteracijim? Možda jeste, možda nije, samo pročitamo. Pa dobro, ne piše da on mora da za svaku iteraciju provereva, ali da možda da se desi i da mi, da to nismo hteli, da imamo elementi iz neki naradnji iteracijama i mislim da smo u prvoj. Ako on svakako dobije mogućnost da uzmete elementi i da zapalite igaretu, varecimo da nam je to ok. Ali treba biti obasriva, zbog čega. Ok, nismo ovde uzali watch 1, izbacili isto watch 1. A smo uvećali i, ako koće da izbacili watch 2? I koće da kaže, sad idemo druga iteracija. Kako da znam koliko bude pročitano ovom? Ali možda ovde treba izbaciti watch 2, ali sta sam onda ovde uradio ako nemam trenutno ništa na stovo? Tako da tu je malo skakljivo, veratno može da se izbura, ali možda se više zakomplikuje nego iža da se zakomplikuje. Druga možda varijanta bi bila ok da promenicimo da sada svaku zna iteraciju. I da kažemo ovde, out paper 1 to bako 1 ili matches 1 i tražimo in ok, 1 dakle agent 1. Dalim nam je ovde i potrebno ovaj watch? Ili mi opet možemo da klimamo taj brojč, kažemo i 1, i tražimo if, 1, 1, to bako 1, onda uzimam, vratim ok, 1 i tu zvršo. E, ali šta je ales? Kako jada se ovde zustaju? Tako da kažem ja nečitam dalje. A da opet nemoj da u poslano očekanje i da kažemo kaj ales i 1, 2, i čekam za drugu iteraciju da se izbacio ovom oje. Potencijalno ti moglo, ala pet škatljivo, da recimo, ne izbacimo možda samo 1, autok je 1, nego da ovde radimo in, recimo oje alsu, da onda izbacimo 3 puta ok, druga 2 pusača koji nisu dobili to što je za njih, i za agenta koji treba od ide daje. A smo onda tako recimo, reseli da imamo, akve, provjeraveno za 1. iteraciju, ako nije, onda kažem, dakle, u else in ok, 1, dakle, gotova 1. iteracija, čekam da bude gotova 1. iteracija, pa onda u sljedećem koraku, uči da kažem, gledam za 2, ili ako nije, onda radim 2, tako da tu bi verotno resili onaj problem da, i na uzima imam iteracija koje nije, i da nemo, titan je onda kada nema podataka, i da samo neko, za koga je, može da tita, i da nemo u poslano kčekanje. Dakle, ako u 1. iteraciji za mene nije bilo ničega, ali taj za koga je bilo, on je već pročitav, izbacio AutoKey sa 1. iteracijom, i u 2. iteraciji recimo, isto nije bilo ništa za mene, ali taj za koga je bilo, je pročitavo i izbacio AutoKey 2, i recimo sad u 3. iteraciji je ovo za mene, ali ja još uvek nisam pročitav ni iz 1. iteraciji. Pa, rda po, paper recimo 1 i to bako 1, sigurno nisu tu, jer smo i već izavršeli 1. iteraciju, tako da ovdje je false, i idemo AutoKey 1, pa one koje bio prvi on njiveć završio, tako da tu imamo OK1, pokupili smo sa in, i idemo dalje, takve, 1 ko 2. Ni u 2. iteraciji nije bilo za mene, sigurno ga, dakle onda nema u prostoru torki, što znači da je i ovdje false, ali i on je izokoga je bilo, već nam je izbacio OK sa 2, i onda idemo, ni u opet, u 3. iteraciju, i proveramo, ako je u 3. iteraciji to za nas, super, pokupimo te elemente, enjoy, izbacimo AutoKey 3, 3, 3, i nema ovede poslanika kavina, za nas je bilo blokirilisno, s idemo u 4. iteraciju, čekamo da vidimo šta će da se desi dalje. Tako da možemo da ubacimo informaciju o iteraciji u ove podatke koje stavljamo u prostoru torki, da bi smo izbegli u poslanu očekanje. Naravno, ne mora ovako da se radi. Možete vidio, smislite nas drugo i da kažete, dobro, ja neću da izbacujem jedno ili drugo nego ću ja da kažem, pretom to baš nije osklado sa zadatkom, ali to će da rati. U slučaju nola, neću ja da izbacim da sad imaš ove dve stvari tu, nego ću da kažem wake up matches, da se budi one za koga su šipice i da kažem, ovo je u tvoj oto iteraciji. Ili tako ne moram ni da kažem u koje iteraciji, nego ću samo da kažem wake up matches, pa jedin, jedan jedini ima koji treba da se probodimo. I da akla onda njega probodimo, ono da kažem, ono da ovde uvekime samo in wake up matches.
 Enjoy, Outokjai i dalje ide agent i toto. Dakle, može i tako da se da ste pojednostavi. Onda ne moramo dimo literacije. Svako od njih zna tačno ka treba da se probudi. Agent isto zna tačno koga čeka i to je onda to. Riders Frighters mislim da ne moramo da pričamo, ako bude trebalo ispričat ćemo goveratno u petak. Zašto ne mislim da moramo da ga pričamo? Zato što je ovo isto korijesinje tiketa kao što je bilo s onim serverima. Ako da to smo ok. Uzna, aravno, to što je Riders Frighters počet, da je Riders Frighters problem, po moramo da pazimo kad kosme da radi. Dakle, šta je samo ovde ideja da... Dakle, imamo tikat, čitavci uvek izbacuju next nakon što su uvećali broj čitalaca, pisci uvećavaju next. To ne mi sad ovo ok to work, tak nakon što završe pisanje. Kada dođe na njih, red oni moraju da sačakaju da su svi oni čitavci završili. Dakle, ovde čekamo da broje čitalaca padne nulu prenego što krenemo u writing, ali smo ovim inom sprečili da... ovim inom smo zapravo da i ovde blokirali ove ide i znamo da smo mi na redu, tako treba sačakamo da svi ovih završi. Ali ono, sto bih ispričalo u kred koji mislim da ovo predposlednji zadatak, tako da osta će nam nažalost lift da pomenimo na konsultacijama u petak. Zašto hoćemo... Zašto hoće ispriča moje problem izbora, pa zato što on ima oni iteraciji koja se malo prepominjala u ovom problemu sa pušačima. Dakle, ovde imamo tri osobe, među kojima treba da izbejremo jednu i svaka o tih osoba posleduje novčić koja ima glava pismo stranu. Izbor osobe sodigrava tako što svaka osoba nazivisno baca svoj novčić i ukoliko postoji osoba koja je novčić, pa na drugu stranu, odnosno, preostali d, to jest, o nekoji se razlikuje, je pobenik. Ako svih baca isto, onda se zake ponavlja, sve dok barem jedno ne dobije različitu i pošto nam je nek param broj, to je stivimo mojih tapšin tri, onda sigurno ću to nekada se desi pod uslu, onda se nam naučići pravidnje. A nadamo se da jes. Dakle, sta je tu sad problem? Dakle, ovde definitivno moramo da znamo iteraciju. Zašto pa ako mi samo kažemo, kje ja sam bacio glavu, ja sam bacio... Dvaj, ako recimo, ja sam izbacim, ja sam bacio glav. I izbacim tako torku dva puta, da bi jedan, to jest drugi učestnik, isto pročita o to, da je bačena glava. I sad ja čekam da dobijem neke dve torke od idejeva koji su levo desno od mene. Dakle, i plus jedan, i plus dva moj tri. I sad oni su isto, ne znam, izbacili, ne znam, i jedan i drugi da su bacili glave. I sad ja, dobra, ja pročitam da su oni bacili glave, dakle oni prvo izbacuju. Dakle, onara mora prvo da se izbacili šta je realuta, dakle oni su izbacili istu su glave, a kazam, nisam ja povednik, ja bacam ponovom i bacim pismo. Onda, ovaj malo prem koji je izbacio neki drugi, dakle, naš učestnik, koji je bacio glavo, pročita torku od mene. Ali, ja imam sad dve torke u, ok, tehnijski tati, ja imam dva različita rezultata. Prejadhodni, koji je bio glava i na osnovu kojoj ga sam ja značičuju da nisam povednik, ali sad imam i pismo i ja ne znam koji će o ta dva, ona i drugi igrač da pročita. Zbog toga, ovde ne može drugačije, nego moramo odubacimo i broj iteracije, u kod našto radimo. Dakle, da se ne bi desilo da neko pročita je rezultat iz predhodnih iteracije, dakle, opet ovde kao ne game of life, ne može našto mnogo da se pobegne u naprede, dakle, zbog ovog čitanja rezultata od dva korisneka, dakle, imamo maksimalno dva različita rezultate iz veslusnih iteracije, ali može opet da se desi da čitamo našto pogrešno, tako da ovde moramo da pazimo isko iteracije to čitamo, da ne abismo došli situaciju, da mislimo da igra završena i prenego što jeste. Dakle, stavio ovde mogu da bude problem. Ove koji je pročita o poslede pismo, kaže, ha, pa dobro, oni dobiju pismo, igra je završena, ja završavam, one koji je dobiju to pismo, čeka odmene da pokupi ništo i onda se blokira i imamo deadlock i veliki problem. Tako da ovde definitivno mora da se ubaci informacije o tome kada je nešto izbačane. Ostatio što je problem liftova, ali njega ćemo u petak ispricati na kratko. To je poslednje ovde zadatak, možete i da bacite pogled, pa ćemo prodiskutova ti u petak. Ono što bih ja samo pomenula, ovde je evo govo INP koje nije deo ifa. Već, dakle, samo ako imamo tu viško neku poruku ovde pokupimo da, jer nam je to bitno zbog ovog lista koji se kreće, nismo ispricili koji je problem, ali bitno nam je zbog ovog drugih učasnika da ne pučiti u nešto što više ne vaši. Dakle, nije samo da je smeće, nego je potencijalno, kako se to kažem, nije smeće koje potencijalno može da nam napravi problem dalje u zadatku. Dakle, da odemo nekdegde, ne treba dodemo ili gdje već jesmo. Ime to ne možda pitanja. Ako nema, ako se tlanu opetak, čujemo se opetak, usuprot nam, uživajte pa vidimo se na nekom ispitom. Pozdrav. Do vidićenja. Uvijek. Uvijek. Uvijek. Pa idemo prvo da pogovoramo na arantulno pitanja. Vidimo ima jedno od detakta, če se će da pročitan. Pa ćemo da odredimo ove zadatak. Zadam se da se slašte. Pita koleginica, dali oblasti BSP, Konik dola za nispitu, i dali postoje još nešto porad CSP, AD i cel Inder, što će biti deogradiva. BSP i Konik tako takvi ne dolaze, ali savjeto se da pročitete zadatki da provetili provažbu tu nećemo dolova što smo radili na vežbom enam predavanjima. Prostledivanje poruka i one komunikacije ne kanali, to isto dolazi ne ispitu. AD, IGO i one koncepti koje su tu pričani, nećete dobiti da nešto napišete u AD, da nešto napišete u GO, ali da kre može da se desite da budu pitanje koje su vezana za to što je pričano u tom delu gradiva. Nemogu da se cetima petacu koji je bio zadatak, ali mislim da je bilo nešto da se randevu, da proba da se odredi nešto, neki zadatak u ristim koncepta randevu, naravno, od sada komunikacije na kanalima, a nebaš u AD-i koji je.
 da se radili. Dakle, ono što je pričano na predavanjima i na važbama se dolazi u obzir u nekom obliku, ali kažem, dakle, ono manje poznato, taz, ono što je malo manje radiljene, što je u principu skoro druga čije od onog što ste da sada radili, to nećemo da vas teramo da radite u tome, a ovo si naravno cespia koji smo malo detaljnije radili na važbama. Dakle da nadam sam da vam to odgovara na pitanje. Jelimo manješ našto? Kaj da onda da završimo ovaj zadatak koji je osto iz lifta? Mislim, nećemo nešto baš mogu pričati drastično. Ima par stvari koje bi su specifične malo za taj zadatak, u kojem ćemo onda prediskutovat-i, a da nećemo do detalji baš raditi raditi. Da je doključimo sa nadenim. Nekoga lako. Dakle, problem liftova kaže, možda ste videli zadatak negde, ako ste gledali rokove, dakle pojavljivalo se. Dakle, putnik poziva lifca proizoljnog sprata i želi da ode na neki drugi sprat. Dakle, kad lifstigne na odrađeni sprat prvo, naravno, izloze svi putnici koje žela da izlađu na tom spratu, a nakon izlaska putnika onda puštamo ljude da uloze i, preli ko mu ulozka u lift putnici kažu na kojom spratu žele da izlađu i tek, kad se svi izjasne, onda lift prelazi daljem na neki drugi sprat. I nije potrebno optimizovati put lifta i putnika. To u Lindi ima dosta smislu, dakle, recimo, ako bi se radi o sa regionima, to možda nije toliko kritično za implementaciju. Kada u kod regiona možda biste mogli každa, ok, idemo prati po sprati tamo gde ima neko koja, gde to je tamo gde ima neko koja želite ili uđe ili izlađe, idemo, dakle, redemo od provoka Anton spratu, s tim što, dakle, to bi smo verotno voreli da znamo koliko ima spratova u izgradi, a kod Lindi, zbog toga što, dakle, vi, kada se neko izjasnjava, dakle, vi onda kažem, kažete u prostor torki da želite da izlađete na tom spratu ili želite da uđete na odrađeno spratovi, dakle, samo ubacite neku torku u prostor torki i onda zbog toga što kada se uzimaju torki, ne zna te koja će se uzeti, dakle, ne postoji neka vredoslj, dakle, zbog toga ovo stojne je potreba noptimizovati put, lifta i putnika. Zašto ovde u Lindi ne bi bilo baš pametno proveravati sprat po sprat, koliko ima, nakom sprato ljudi koji žele da uđu ili izađu, pa, dakle, ako, opet, zbog toga što ne zna te koji ćete torku preuzeti, nakla, predpostavit ćemo recimo da treba, nekako se mu treba da čuvamo, nakom spratu, koliko ljudi žele da uđe i nakom spratu, koliko ljudi žele da izađe, jer njome to neapodno, dakle, da može da funkcioni što da znamo da su svi ušli, da su svi izašli i naravno kako dolazi da pozove lift, onda on treba da uveće ili smanji taj brojač nakon što bude izlazio, dakle, znamo da sigurnimo te torke i mogre bi smo potencijalno da proveravamo koliko, dakle, izvučemo torku ili to zaulazili za izlaz i onda vidimo, ha, ako je to već od nola, pokažemo dobro onda to jeste, tu hoćemo da izlađemo, ili ako hoćemo da kažemo dobro, on je na, recimo, lift inicijelno na prvom spratu i onda mi pokošemo da imamo da li postoji torka, to je stavno da postoji. Uzimamo torku za sprate 2 i onda vidimo, da li je, bilo, jedna, bilo druga torka veća od, da li je taj brojač već od nola, ako jeste super, onda kao stali smo na taj sprat, dakle, mnogo više ima tu proveravanja i moho potencijalno radimo busy wait pod uslo on da niko trebantno nije pozva lift, dakle, ako nema nikog vetu, onda, dakle, mi konstantno proveravamo te spratove, a tu njih smo dobili ništa i možda mi, ako dođemo da ne znam 17. sprata, a neko je pozvao na drugom, a imamo, recimo, 50, neka velika zgrada, pitanje, kad ćemo mi da dođemo do togo drugog, gdje nas je neko pozvao da siđemo. Tako da, s te strane treba biti pažljiv da se ne napravi nekako uposlano čekanje i da se gleda, dakle, da čim nešto bude dostopnu, da može, dakle, neko da se pokrene. Tako, sada kad smo taj dial ispričali, dakle, da vidimo kako se kreću, kako rade lift i putnici, i gdje provoćemo do ove metode, dakle, kako lift bira na koji sprata će da ode, a tako što bilo koju torku, koja ima, dakle, flor identificator, pokupi. Dakle, ovakva torka sa ovim flor identificatorom da tako nazovema, će nam označavati da je neko pozvao list na tom spratu, dakle, neko kada hoće da uđe na 5. spratu i pritisne drugme da dođe lift, onda kaže ok, i on izbaci outflore 5. Ako nekako kada ulazi u lift, hoće da izlifte i izlađe na 7. spratu, onda on kaže outflore 7. Naravno, pod usnom to ćemo proveriti, verovatno da već, ako, dakle, već ima ljudi koji su se izjasnili da hoće da izlađe na tom spratu, nema potrebe mi ponovod izbačajmo, nego, dakle, samo ako smo mi prvi uvacili. Ako smo mi prvi ti koji hoće da uđu u lift na tom spratu ili prvi koji hoće da izlađu izlifte na određeno spratu. Tako da, dakle, na taj način smo odradili i, dakle, tu je ovo da i nema optimizacije, dakle, koji u torku izvucamo, izvucamo sad oni koji će malo više da se vože nazvo smaloće da čakaju. Ok. Dakle, lift odabere sprat na koji će da ode. Dakle, dok niko nije pozva lift, on će onda biti blokirano ovom get floor, dakle, zato što nema torke s identifikatorom floor, dakle, kada neko pozava lift, onda će lift da se kokrene i da ode na taj sprat. I, dakle, treba nekako da obavestimo ljude da je lift došao na taj sprat i da sada mogu da izlaze a potom da uloze, dakle, zvok toga imamo ovdje ovu torku off kojem govorimo da, tkojom signaliziramo ljudima da oni treba da izadju izlifta. I, dakle, čekamo da, sada, ono što smo rekl, imamo torku koliko ljudi želi da izadju na kono spratu, dakle, to je ovakau stop torka za sprat x da padne na nulo. Dakle, čekamo da svi koji su želili da izadju na tog spratu, izadju. Dakle, čekamo da se pojevi torka sa ovim, dakle, ovdje, ne kupimo da proveravamo koji je broj, pa da, dok pa ako padne na nulo, onda kažemo, ma je super, sad je kraj, nego dakle, čekamo samo da, odgleda, znam, organski to padne na nulo, pa te koje onda kada padne, nastavimo da. Nakon što je, dakle, broj ljudi koji ulaze, neoparve koji izlaze pao na nulu, onda pokupimo ovu torku, koji smo rekli da može da se izlazec lifta i vratimo, dakle, neobhodno je da se vratio va torka z izlaza ku tom spratu, zbog nekih drugih spratovanog koji odlazimo, dakle, da može da sažurira taj broj. Košto se uloska tiče, dakle, nakon što se završio, izlozak, onda signaliziramo da može da počne ulozak i čekamo takođe da broj ljudi koji uloze bude nula i kada se to desi, onda kažemo.
 nema više ulozaka i izbocimo, vratimo opet takla torku u prostor tolki da bi nekako dođe opet na taj sprat, ovaj mogu da pozove lifti da kaže ja želim da ulozak. Tako da je kod izljost, samo ovdje jedna mala napomjena kod izljost, kad je tu zbog toga kako i pišu zadatku da moraju svih prvo da se i vjasne prene na gostokrjene lift, tako da svih treba da se izjesne na kojoj spratu žalili dizadju, ne može da se desi da nekako se, da neko kaže, e pa čekaj, ja bih ipav dizadjem na ovom spratu na kojem je sada lift, pada i starčim. Tako je tu ne može da se desi zbog toga kako treba da funkcijaniš je zadatak i kako smo ga napravili, ali, tako tu sigurnoći da padne broj na nulu i niko ne može da to probada urećeva, ali naravno kod ulozaka, nekod ulozaka u lift može da se desi da, ta manka da su svih koji su do sada, recimo, bili ispred lifta se izjasne mi da su želili da uđu i ušli u lift, da onda nekod dotrči i kaže, e pa čekaj, hoću ja da ulozim, tako da tu može da eventualno može da se desi da prenego što mi pokupimo ovo torku za nulada, ona i nekoko žali da ulozi u lift, pokupi tu torku pa onda može da na vreme uđe u lift ili može da se desi da ni pokupimo prvo tu torku da ima sad da sad niko nečeka i onda pokupimo i torku da ne može više da se ulozi u lift, tako da taj koji je dotrčao, zapravo će morati da je sačeka slajdeći putka da dođe lift na taj isprat, dakle tu nam ništa nije račano u zadatku da moramo da čekamo ili da one ko dolazi dok je lift tu mora da sačeka slajdeći putka os to recimo imamo na kod autobuse, dakle tu je ostavljena, ostavljeno malo na sreću, malo da je kažemo ostavljeno sreći da li će neko uspeći da uđe u lift ili ne, ali dakle to taj del je ok. E, dobro, pošto, za lift i strane lifta prvo puštete ljude da izađu pa onda da uloze, a ljudi prvo, dakle, uloze pa izloze iz lifta. I, dakle, putnik kada se pokreće, dakle imamo identifikator koji nam usoštini nije ovde presodan, dakle ne zanima nas koja osoba želi gdje da uđe, ali, dakle, ono što nam jeste bitno, jeste sprat na kom ulozimo i sprat na kome želimo da izajdemo. Dakle, to su dve stvari koji je putnik mora da se izjasni prelikom početka vožnje i, dakle, kxipselom su nam ti brojevi. I naravno, sad, u principu možda ima nekih ljudi koji hoće da uđu u lift i odmav izlaze, ali, dakle, radimo nešto pod us, onda to nisu isti spratori. Dakle, ako nekog kaže, ulazi na petom, izlazi na petom, pa čo što sadiš, vatali. Eda, svakako trebuji nam neke promenive, ja si jedan je zva, to je zbrojači da bi smo mogli da znamo koliko ljudi trenutno ulozi i znamo koliko ljudi trenutno izlozi na tom spratu na kome smo mijeni, na kome žalimo da budemo, dakle, da bi smo pokupili, žurili te boja brojače, neopodno je da imamo te promenive. E sad, imamo ovde in start, dakle, pokupimo koliko ljudi želi da uđe na tom spratu. Dakle, ovde reka smo ako je ovde već neko pokupio ono nulico, ništa mi ćemo da čekamo prenevo što im neko će vam pokupio onda one in, ali ako smo mi ulatili, super. I, dakle, ako smo mi prvi koji žele da uđe na tom spratu, dakle, koji po prvi koji pozivaju lift, dakle, ja to volim da kažem da treba da pritisnemo dugome, da lifta obavestima da treba tu da se pojavi, dakle, da zbog toga ako je s1 jedno konula, onda radimo outflore x. E sad, da se vratimo opet na onu situaciju, sta ako je nekod, dakle, dotarčao do lifta koji se već nalazi tu, dakle, svi su već ušli, ali još uvek nije lift rekao da je kraj za ulozak. I što onda može da se desi, pa može da se desi, dakle, lift je već na tom spratu x, nismo prvi koji smo došli, čak i možda ne mora da bude situacija da su svi već ulazili, može da bude da je lift sta ona taj sprat, zato što svi žele da izadžu na tom spratu, a niko se nije do sada javio da on žali da ulazi. Dakle, da mi ovde izbačemo torku da lift treba da stane na taj sprat na kome se on već nalazi. I trebalo bi da tu torku nekako uklonimo ako se on već tu nalazi, ako mi već ulozimo zbog toga, da ne bi lift mogu da pokupi torku i da kaze je pa, ja idemo opet na taj sprat, pa nismo ništo, nećemo ništo dobiti timet zbog toga. Ovde kasnije, dakle, nakon što ulazimo uli, nakon što uđemo lift i ovdje kje smanjićemo broj ljudi posle koji ulaze na tom spratu, uveća ćemo broj ljudi koji i lze na spratu na kome žalimo da izadžemo, da zada zanema limo ovaj odif, ali, dakle, radimo inp za taj sprat na kome se nalazimo, dakle, ako smo slučajno mi izbacili viška torku, jer je lift već na tom spratu, mi ćemo da je pokupimo. Dakle, to je ono da nam ne ostane džubre i primena, dakle da inp i čisti prostor torki, dakle da, kažem, trebalo bi voditi računa o tome da ne ostane višak torki u tom virtualnom prostoru, zbog toga, dakle, mi ćemo ovde potencijalno pokupiti to torku viška. Ako nije bilo viška torki, dakle, ako nije neko utrčao, nego smo, recimo, lifti na nekom 17. spratu, mi smo na 5. Niko nije zvali lift na 5. sprat, onda mi, dakle, treba da možemo, da treba da dođe na 5. Tako da, onda u ovom slučaju neće biti te torki, ovo inp će da vrati false, dakle, nećemo se blokirati, većemo samo nastaviti daje. Dakle, a to neprimere, inp koji sam pomenula na prošlom, na prošlom času. E sad, ovaj ovdje if, dakle, sličan je kao ovaj ovde gore, u smislu da, ako mi žalimo da izrađemo na nekom spratu, in niko nije javio do sada da žalim da izrađemo na to spratu, onda izbacimo torku da žalimo da izrađemo na spratu i psevo. I šta sad može da se desna, i tu može da se desna, da imamo torku viška, pa situacija neko je, dakle, lift je na petom spratu, neko ulazi tu i kaže koći da izlazi na sedmom, i onda vidja, ha, niko za sada ne izlazi na sedmom spratu, onda on pritisne da li ih treba dode na sedm sprat, a u međovremenu pojavlja se prva osoba koja želi da uđe na sedmom spratu, i onda, dakle, oba putnika imaju ovdje ovu nulu i oba će izbaciti za isti sprat, odpati imamo duplu torku, pa sad, da li će ono ovdje pokupiti prilikom ulaska, ili će, ovaj prilikom izlaska pokupiti tu torku viška, sve nam je jedno, dakle trebalo bi provariti i u jednom i drugom slučaju, dakle, kažem, ovdje moglo da se desi izbog toga što je neko uletao kao poslednji pan da treba da pokupimo ovu torku, ali dakli, i prilikom izlaska je moglo da se desi da imamo viška, torki izbog toga što je neko možda u međuvremenu istore, kao da hoće da uđe na tonisnom spratu. Pošto, juči smo malo dužra pričali u živo, pa smo tamo odradili, malo smo disputovali ovaj zadatak, dakle, bilo, ako recimo, šta bi malo možda smanjilo šansu da se pojavim, da se pojavim dupla torka zisti sprat, pa evento ono ovde ovom nifu bi moglo da se doda i, toma, red, pardon, not red da po, samo da provjerem dalje.
 a a a a a a a a a ako razepa vrati false, to jest ako neko još uvek nije izbacio tu torku onda ćemo mide izbacimo dakle i ista stvar, dakle i ovom ovde i dakle ovo malo smanji u slučaju da dakle neko je ušao kažemo na pet ospratu i kaže koći da ode na sedmi a nije koji još uvek nečekada uđe na sedmom spratu ljivce negde voze i onda se pojevi neko ko želi da uđe na sedmom i onda vidimo a ha ovaj ovde ovaj ovde koji je u liftu je već signoizirav da treba da se ode na sedmi spratu, tako da mi ne moramo ponovu da izbacimo tu torku ali može da se desi opet u slučaju da dakle oni isto vremeno to pokušavaju da urade dakle jedan ovde proveri drugi proveri, nema super izbac i jedan izbac i drugi dakle ti procesi oni dalje rade nezavisno, dakle sam ot ovaj opet se ovde malo vraćimo na ono gradivo, semofore dakle da tu moramo da pazimo šta ako neko, nekom trnutku se nalazi ovde pa ne odradim našto što nam treba da li će onda oni drugi poočekujte u poruku da li tako nešto raditi raditi ok dakle, stak, ovi sto vremeno oni tu nešto pokušavaju dakle da je dobro kraj mislim, ovo sam već malo prepomenulo dakle, prilikom u Loska svakak osmanjamo broj ljudi koji su ispred i uvećavamo broj ljudi koji su u liftu koji žalo da oduna neki sprat i se izvesimo sve to ježuriramo brojače, puštamo drugi da ulaze u lift, ako nam je ove start pao na nulu pao onda će možda lifti da se pokrene i dakle onda čekamo da nam lift kaže ok, sada možda da se izlazi na tom spratu na kome mi žalimo da izlazimo, dakle u štini čekamo do lift dođe na taj sprat i da se i da nam se da dozlazimo da izlazimo, dakle i samo izlađemo ovde smo reakli da opet za svaki slučaj provarimo da sklonimo tu torku za izlazak koji je neko izbacio duplo i to je če, akle nema tu nešto mnogo logički problema više je zbog toga, dakle da vidimo šta se dešava prostoru torki ali možda tu nekih probračica i dažem to je to u startu, naravno treba da izbacimo da na svakom spratu se ima, no, ljudi ispred i koje žele da izlađu to je to da je u svakom ako drugih pitanja nema ali na pažljima se vidimo verovatnjom za inspit pojdr.
