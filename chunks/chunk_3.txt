 napravimo izvorni assemblerski kod. Da bi smo tako nešto uradili, iskoristit ćemo ovu ovde opciju minus s, što je samo prevođenje bez assembliranja i linkonja. Tako da ćemo sada reći arm non eabi gcc. Izlazni file će biti main.s, jer u pitanju assemblerski kod, a ulaz će biti main.i. Sa naravno još naznakom za koju mašinu rešemo prevođenje, u pitanju je Cortex M3 i instrukcijski set TAMP i još ćemo dodati opciju minus s koju smo i prvo definisali, da nam je neobohana. Značno, je to neko se uvrna. Resultat ovoj prevođenja je ste ovoj main.s file koji ćemo sada prodiskutovat. File sa izvornim assemblerskim kodom se suštinski sastoji od samo dve stvari. Prva stvar su assemblerskje direktive koje počinju tačkom, i za koje sledi naziv same assemblerskje direktive, a druga stvar su assemblerskje naredbe. To su dakle simbolička imena za mašinjski instrukcije ispred koji se potencjalno može naći i definicija labele kojem se suštinski definiše novih simbolu. Opis svih assemblerstvih direktiva koje postoje u gnu ovom assembleru moguće naći u dokumentaciji gnu ovog assemblera koje se nalazi na stranici gnu.org. U okviru sekcije za dokumentaciju pa gnu manuals. U okviru paketa binutils se nalazi as, gnu ov assembler. Ovdje je moguće onda pronaći svaku assemblersku direktivu i njen detaljan opis. Mi ćemo sada proći kroz čitav ovaj file sa izvornim assemblerskim kodom kako bi smo videli koje je to sekcije generisao gnuo c prevodilac kada je kao ulas dobio ovaj naš main.c. Zašto baš tražimo sekcije? Sekcije su nam bitne zvok toga što su one osnovne jedinice sa kojima baratamo iz linkerske script. Tako da je bitno da vidimo koje ode sekcije postoje da bi onda kada pišemo linkersku scriptu, znali koje sve sekcije treba da referiš. Pa hajde da krenemo redno. CPU direktiva definiše ovo se jezgoro radi, ova direktiva je ovdje navedena zato što smo prilikom prevođenje navjeli onu opciju minus m CPU da je Cortex M3. Zatim se nalazi direktiva embedded ABI attribute kojom se navodi prvo u kom atributu tačno se radi i koju u vrednost taj atribut treba da ima. Prvi argument ove direktive ABI attribute može da bude ili integer koji tačno referiše 1 atribut ili može da bude ime samog atributa simbolečko, očigledno ode se GCC odlučio za intigerske vrednosti. Naradna direktiva je file kojem se definiše naziv file. Sledaća direktiva je tačka text i to je prva direktiva koja nam je najviše od interesa a to je direktiva koja se započinje nova sekcija. Zbog toga ćemo nju malo razvojiti od ostalih, čak ćemo i za nje kral komentar navesti neki delimiter da bi smo jasnije mogli da vidimo gde počinje neka sekcija. Dakle, tačka text je direktiva koja se započinje nova sekcija či ime upravo tačka tekst i to je sekcija sa dobro poznatim imenom za koju se najčešće vezuje da je njen sadržaj mašinski kod koji prestalja instrukcija. Ovoj del tekst sekcije je zapravo prazan, jer odma nakon njenog navodženja sledi druga direktiva koja nam je bitna, to je tačka section, tačka rodata. Tačka section je direktiva koja se započinje nova sekcija, što znači da se predko na sekcija ovdje privremeno završava, a ovo tačka rodata je samo argument ove ovde direktive tačka section i prestalja ime sekcije koja pojuza počinje ovo ovde direktiva. Tako da ćemo i ovde navesti delimiter, zato što ovde počinje nova read-only data sekcija, koje možemo samo da čitamo. U okjuru nje se nalaze direktive kojem se postiđe poravnanje na adresu koje je deliva sa drugim stepenom vojke, to je u suštini vrednost 4, što nam i odgovara za ovu nepromenljivu koje je ovde definisana i to je definisana kao reč, dakle direktivom tačka rodata se alocira prostor za jednu reč, jedna reč na armu je 4 byte, izbog toga je ovde upravo i traženo poravnanje na adresu koje deliva sa 2 na drugi step. Ovde se sekcija rodata završava i zatim počinje nova sekcija, a to je data, ali prejmovo što pređemo na nju, ovde samo treba povući paralelu, između ovdje segmenta izvornog semberskog koda i njegovog pandana u izvornom c kodu, dakle to je ovde nepromenljiva koja ima modifikator const i ima inicilu vrednost 6, u suštini ovde kompaler rekao da to treba da se smesti u rodata sekciju i da ima inicijalnu vrednost 6. Ono što smo još peskočili, je su direktive type i size koje se odnose na neka simbol, type definiše tip simbola, ovde se radi o objektu, dakle nije reč o funkciji, a size govori da je veličina nepromenljive 4 byte. Sekcija data jako poseća na ovu predhodnu sekciju, dakle opet imamo poravanje na adres udeljivu sa 4, imamo definiciju tipa ove promenljive, opet i u pitanju objektu nije funkcija, veličina je 4 i alociranje prostora za jednu reč, to je 32 bita či je inicijalna vrednost 7. Nakon toga je navedena direktiva common, kojem se alocira prostor za jednu zajedničku promenlju, koje se naziva neinicijalizovanja, prostor je veličina 4 byte i poravanje koje je zahtevano za taj prostor jeste da bude deljivo adresana, koje se smešta, taj simbol neinicijalizovanja, da bude deljivo sa 4. Zajnička promenljiva znači da ako u još nekom filu postoji ovakav simbol, simbol definisan direktivom common, onda će za sve njih biti alociran samo jedan zajednički prostor, neći biti više rezultat. Ovo ovde, ova direktiva, prestavlja rezultat prevođenja ove ovde naravno linije izvornog koda, pošto nije dodeljena vrednost, ovo se nesmatra jako definicijom, već se može čak ismatrati i deklaracijom, ako li bi ovakav simbol bio definisan u još nekom filu. Zatim imamo početak još i jedna sekcija, to je tačka tekst, kod koje imamo porananje na adresu deljivu sa 2 na prvi stepen, što je u suštini deljivo sa 2, deljivo je sa 2 zato što su sve ovde instrukcije i tab, tamt instrukcijskog seta koje su najčešće veličine 2 byte. Zatim imamo proglašavanje simbola main za globalni simbol, što znači da će main biti vidljivo izvan ovog našeg fila, imamo definiciju architekture u pitanju ARM VS7 za microcontrollere, definiciju da se koristi unit...