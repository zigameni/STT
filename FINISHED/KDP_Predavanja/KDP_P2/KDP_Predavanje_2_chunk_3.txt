 znači y plus 1, y je jednako 1, a onda ovamo bi mali y y plus 1 plus 1, x je jednako 3. Ali to nisu svi mogući rezultati izvršavanja jednog ovakvog programa. Ono što se može desiti da sam ja napisam, x je jednako y plus y plus 1 bi bila. Ajde, idi pročite y. Y je jednako 0 load y sam napravio. Nakon toga, kažem, ponavlo load y ali se izvršio ovaj ovde sekvencijalni ideo. Cilosebe y sad da postalo jednog, znači bila je 0, postalo je 1, a ja onda oddaj gaću, idi pročite y. Y ima vrijednost 1, tako da ću ovdje imati ljubu pročitano, pa ću ovdje imati ove, pročitano je 1, pa ću ovdje imati 1. Tako da rezultat izvršavanja može da bude jednak a. Ovo ne odgovara ni jednom sekvencijalnom izvršavanju našeg programa. Ovo ovde nije rezultat koji je dobar. Či to što ovde piše y i ovde piše y, ako ja imam dva učitavanja iz memorije, nije znači da ću dva puta zaredob učitati istu vrijednost. Može se desiti da ja pročitam potpuno različitu vrijednost. Umeđu vremenu je moglo da se desi da naša promenjiva dobije novu vrijednost. E, ako bi smo značimali, y je jednako y plus y plus 1. Može da programski prevodilac bude pametan, pa onda napiše da je ovo dva puta y, to znači imam jednom učite y, pa ga pomerim za dva. Ali može da programski prevodlat vi će biti dovoljno pametan, nego će napisati load y, load y add, load y add, store. Ne znamo šta će se desiti u pozadini, a ako ne znamo šta će se desiti u pozadini, mi smo možda izgubili, ovako kako je napisan, imamo ethmost one property, tako da moramo da razmišljamo o tome, da li treba staviti dodatnu synchronizaciju. Ne znači da treba, možda treba. Če videli smo da. Ako imamo ispunjenu ethmost one property, onda ako je ispunjenet ethmost one property, ne treba synchronizacija. Ne treba synchronizacija ako imamo samo jedan. Jednom ispunjen. Ako nije ispunjeno, e onda treba da kažemo šta se to izvršava nedeljima. I ovde je sada jedna način, da to možemo da kažemo šta hoćemo da se odradi. I kako? Ko šta hoćemo da se odradi, a videli smo na prošnom časku uvelo sam jedan term i koji se zove Korsgrade, lup na atom s karacija. I želimo da se ovo odradi. Ne znamo kako. I želimo, da se sada samo hoćemo da speticiramo, šta želimo da se odradi kako sam? Ne kako. Nego šta. Ovo je ovde uveden, jedan zapis, gdje ćemo koristiti ove znake veći manje, u čežu kojih imamo ovde await, tako da se sada pojavljaju taj await. Kajte kaže, čekaj do klegod uslova ne postane izvršav. Kada uslo postane? Ispunjen ide i odradi. Nekaj se kvenca naradi koje završava, koja odrađuje neki posl. Speticiramo kako taj posl odradi na ovoj naši. Mi samo chodimo da kažemo, da ovo treba da se odradi. A postanćemo, kada budemo došli na sitnodzerno, kada budemo došli na fajne grejne rešenja, da kažemo, kako to stvarno doda. Zatim, da sada samo želimo mehanizem, da kažemo, želimo da se ovo odradi nedeljivo. O koncet veći manje. O ako nešto. Block. Stavili smoš tili veći videli na programjskom jaziku java. Ako se prisetite, beš je ključno reć synchronizat. Ako stavite synchronizat, biste stavili nedeljiv block. Ako je to ista promenjiva, neku drugi radi, na tvoj biste napravili tu nedeljiv. A. Šta sam sad rekao, ako stavimo samo između ovih znaka već manje, neki deo, neku sekvencu naradi, mi smo dobili mitlju sobno isključivanje. Pa rekli smo da se izvrši, ta sekvenca, nedeljivo. Ako napišemo samo await B, mi smo dobili uskonu synchronizaciju. Rekli smo, sačeka je dok se nedesi neki događaj dok uslob B ne postane izpunjen. Šta ce ne mogu? Jedna jednostavna stvar, ako ovo i ovaj de naš uslob B ima svojstvo at most once property. A mi možemo a ovo ovde await, bih u ovom izrazu bilo ono predkonom da realizujemo jednom ovakvom petljem. Da će da kažemo, while not B skip. Napravićemo uslovnu synchronizaciju, a u sustini imaćemo zaposlenu čekaj. Jeden spin loop. Če jednu petlju u koji se vratimo i čekaj. Eee, je to dobro da imamo zaposlenu čekaj. Ako nemošta drugo da radimo, imamo racunara na pretek i nije nas briga za korišinje, racu na zastroju a onda zaposlenu čekajnje je nešto što se može koristiti. Znači ako to neće imati prevećne instrukcije da se radi. Na primer ako su neki delovi koda, gde mi treba na primer da prevežemo dva pokazivače li tako nešto. A mnogo je verotno bolje da stajemo zaposlenu čekajnje da sačekamo tih dve-tri instrukcije, nego da parkiramo našu nitkod operativnog sistema, nakazemo vejtna semaforu, pa onda da kazemo signalna semaforu. Jer, bukalo prevezivanje, pokazivača iljubacivanje negde neko gelamento u listu, to je mali broj instrukcija. A parkiranje nitki, zvajenje operativnog sistema to ću imati na 100, 1000 demožda instrukcija. Tako da, i ova zaposlenu čekajnje. Ako tačno znamo šta je posao koji se radi, ako je ta je posao kratko trajan, se isplatila. Tako da, sada neke implementacije, nekih struktura podataka u bacivanje, izbacivanje setlostištini realiziraju, koristići ove spin lupove. Tako da, u nekom trenutku ću vam jasno menuti jednu vevno lepo kljigu. To je implementaciju u stvini besikom i zake. Sa ovakom zaposlenim čekajnim i poselim nekim instrukcijom. A da, sve ovo drugi ispoti zaposleno čekajnje. Ako imamo dovoljnja broj racuveskih izgara na koje nešto možemo da postavimo čakaj ako je duži posao, a nemošta da smo go da radimo, ta c'e isplatila. E, ali, ove treba sada primetite još jedan mali detaj. Aj, mali detaj je ovo ovde nije stavljeno wildnotb.zapreba. Ovde stoj skip. Ka znači to skip? Eee, to se različno prevodi na različni mjezicima. A, premonume kako ste vidi do sada na privi radili progromski jezik javom. Zirećemo se za sad na javo pošto to znate. A, ovo ovde bi odgovaralo onom yield. Ja ne vam šta da radim, ako imaš nekog drugog, a ti pusti nekog drugog da radim. Ači mi kažemo, a ja se ovde vrtim za alodan, čekam da se desi neki događe, ako postoji neka druga nitkoja može da se pusti. Koja imaš, ta da radja, tu pusti tu neku drugu nitko. Nemojme ne da parkiraš, ja sam tu, radim nešto, čekam. Tako da, to je jedna način. A vidite ste na progromskom jeziku java da postoji jedno malo lepši način, sada da realizujete kako to realizavno sada javi, koristit će anotačiju. A tako da, možete na neki del koda da nakačite anotačiju, nekako se mi se nakačite anotačiju. Koje će reći, java virkulo mešini, ovo pače koda ako ima nešto drugom boja se izvršava, ti izvršava to nešto drugo. Nemoj ovde troši srema. A brže je nego da se zablokiramo na semoforu i parkiramo niti da se postoji isparkiramo, ovo, znamo, pozolimo sema proponu pa isparkiramo niti. Ako imamo dovoljno resursa na kod na nemošlijas, ako se ovo ne implementirat optimijanom ovaj skip, nemojte skip zaboraviti, ako neka treba da napišete algoritm i zaboraviti skip, stavite samotačka zapetku u biliste performance. To je definitivno zapostajno čekanje bez bilo kakvo izgleda da ne bude zapostajno čekanje. Ako stavite skip