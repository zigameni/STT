 Vrlo jednostavno si realizuje. O programmskom jeziku javako ste otlušali ove materiale koje se odnose na RMAI, već ste videli da ovo ovde postoje. Sam programmski prevodilac može lepo da prevede ovako nešto i da izgeneriše stap. Jednu klasu stap i skeleton, klasu koja poslava način pakovanje objekte, tako da ove metode mogu da se serializuju. Kako da vi poslalite zaakte, negde tamo neke računar, tamo se to obradi i vi dobijete nazad odgovor. Kako se realizuje prijem, odnosno, ono blokiranje kod monitora, ako što čekate, kao da čekate na entry queue, i u svariji čekate receive neke poroke. Kako se završa monitorska metoda, kako se to ovde se to radi, tako što radite send reply. Kako obezbeđujemo da postojne deljivozda niko ne može da nas prekine? Vrlo jednostavno. Rekli smo, na serveru postoj jedna jedina nit. Nemaj ih više, samo jedna jedina. Dobro. E sad, ove malo komplikovanje da se napravi u odnosu na ovoj orignali monitor, ali ne nešto mnogo, videte ćete da postojneka pravila, kako ovo ovde se može da se realizuje, čak je kojima moj jednu jedinu nit. Mi znamo da ta jedna jedina nit ne zme da se zablakira, i onda moramo da osmislimo mehanizam kako da ne zablakiramo tu nit. Dobro, argumenti. Rekli smo, može biti više monitorstvih metoda, pošto može biti više monitorstvih metoda. Mi je te loporoke moramo da kažemo koju od zdik monitorstvih metoda mi želimo da pozovemo. I moramo još da stavimo šta su operandi te opera metode i moramo nekako da specificiramo kako ćemo dobiti rezultat. I evo ovde jednog primera. Kako to može da se deklariši? I ili mora ovako da se deklariši, to će zavisiti od konkretnog jezika. U programskom jeziku java da vi nešto mogli da primjer da transportujemo ka objekac jednog računara na drugi računar, te objekat mora da zadovoljeva interface serializable. Znači da može da se serializuje. Ta interface serializable nema nije jednu metodu. On samo služi programskom prevodijuco da zna kako da upakuje argument. To je ovdog dologa što dato da je su to na kjenumi. Ovo čisto da može da bude nekih preklapanja tih argumenta pošto je ovdog ovdog nekih programski jezik koji nema objekne tipove. Pogleda možda da pokažemo da to neki objek pa onda šaljem objekt. Ujavi možda kašta objek i pašljete objekat. Šta imamo od komunikacijoni kanala? Server ima jedan komunikacijoni kanal. Ovo je označeno sa chan request. Komunikacijoni kanala se zove request ili mora da se zove request. On ne mora. Nazovite kako goleći. Kada moš da ga nazovite i da je to. Serverski prihvatni kanal. Šta smo rekli da ima odergomenata? Ima identifikator klienta koji treba da se vrati i odgovor. Kao kad šadite nekome ime il treba da stoji koji je uputio za aktiv. Da bii mogu od odgovori. Ili kad radite komunikaciju na nekom režnom nivu. Ovi ću vidjeti pa čekaj, ja neke nešalje ima IP adresu. Nakon treba mi se vrati i odgovor. To što ja nešaljem adresu ne znači da neko drugi nešalje adresu u moj ime. One protokol ko se nalaze ispoda, one TCP-IP protokol. Če slati IP adresu da bi sama komunikacije moga da se obavi. Tako da se u suštini šalje klientski identifikator. Ovde stavljeno da je klient ID celo broj na vrednost. Ili to je samo nešto što predstavlja identifikator klienta. Ovo ovde operation kind je kako se zove operacija koju želimo da pozovemo na serveskoj strani. I oni type, arg type je su argumenti datemetode. Šta imamo kao povratno? Imamo request reply type, to je rezult neki. Šta, šta, kako prijavamo poroku, meše? Imo channel reply, niz. Ilo odelje napromeňa. Ovo ovde je samo namesteno ovako da bi mi mogli da prevedamo i da razvujemo kako izgledaju programi. Ali to nisu deljene promenjive. Kao na primu kad vi šaljete nekome email. A vi, a nemate tuđe poštansko sanduče u koj je, u koj mošte čitate. Nego mošte samo da upisujete, imate jednu metodu koja vam dozvoljava da vi pošljete poroku tuđe poštansko sanduče i da dohlatite. Ovde samo na neki način to predstavljeno da bi moglo da se preveda i da se razume. Kako ide ta komunikacima imate reply? Ja dobijemo odgovor. Kroz to ima tih n poštanskih sandučića. Imo aradnih bude, pa možete ih biti više, ali kod aktivnih monitora. Mi ove kažemo, a servenska strana u suštini ima jedno jedino poštansko sanduče. Preko kog se primiju svi za aktivnih, a klienti u ovaj ima jedno preko kog treba da dobija odgovor. I kako izgleda sada servenska strana? Svaka servenska strana. Ovde za sada je še uvek razmatramu neblokireviće operacije. Kako izgledaju neblokireviće operacije, odnosno kako se o ne mogu realizovati? Servenska strana se sasto iz jednu suštini uvek beskonačne petlje. U toj beskonačnoj petlji prvi red je Receive Request. Čekaj dok nekone uputi neki zahdje. U programskom jeziku java kada ste pisali i gledali kako se pravi distribuira na aplikacija, vam je stajalo na servenskoj strani imate Accept. Znači stojite na servensoketu i radite Accept dok se ne pojavi neki zahdje. E to isto ovde. Samo što je tamo server posle pravljan da ima više niti koju obrađujete zahdje, pa ste tu onda taj zahdje prosledili nekoj od tih niti da nešto može dalje s nim da radi. Am i ovde ima tamo i rješenje sa jednim serverom, ali ovde je sad napravljeno da može biti samo jedna nit. Znači ovde je sve realizovan u istoj niti. I sad što onda radi servenska strana, u suštini odradi proveri u koju operaciji se radi, if, kind jedna kooperacija 1 radi operaciju 1, if operacija jedna kooperacija 2 radi operaciju 2 i tako ko ko ko gode imate. I na kraju je potrebno da odradite send reply. Znači na kraju treba da se odgovori o noj strani koja je uputila za aktiv da jo se prosledi rezultat kakav god da je taj rezultat. Resultat može da bude u nekim slučajom OK. To je samo neki dami. U nekim slučajom, očak vidjet ćemo da odgovor može da bude i potpuno prazan, da mi imamo stvari, možda, nemoramo očak nikad niste nidešanje s nekom očaku. A kako može da se vesi situacije da ne treba ništa da javljamo? A ako je potrebno da se realizuje nešto blokirajuće što je tipa void, što nema povratnu vrednost, u tim slučajima po nekad nema potrebe da mi dobijemo povratnu vrednost. A ako imamo neblokirajuću void metodu, a onda možemo i izostaviti ovaj ovde sand reply. Možemo vidit ćemo u kojem to specijalnim slučajima možemo izostaviti, za sada pričemo generalno, olakob i trebalo da izgleda, a onda u tim specijalnim slučajima, a kad može da se izbacite oslanje odgora, u suštini ako upravite na primjer semafor. Znači, želite lepo da realizujete jedan istribuerani semafor koneći monitor, a ne ono što smo pravilili po pazijanju prošli put. Zašto po pazijanju? Komunikacijuni kanal je namenjen da samo jedan proces či to dačne. Ne da više procesa čita iz isto komunikacijuna kanala, znači to nije nešto što je podrazumevanostanje. Verovatno možete napraviti sistem da više procesa čita iz isto komunikacijuna kanala, ali to nije predvizjenu način rada jednog sistema. Iz jedno kanala čita jedan proces. To je isto kao kad imate mailbox, pojedno namenjenu VAMA i ta jedna osoba bi trebalo točiti, ili mobilni telefon. Jedna osoba bi to trebalo da ko korist. Sa kako možete napraviti još analogiju? Zašto mi treba jedno poštansko sanduče, a ne dva? Pa ovo dva poštanska sandučeta, znači to možete zamislite. Treba da napravite komunikaciju i treba neko da vam vrati poruk. Aho, pošto treba da vam vrati neko poruku, ja ću se da kupim dva telefona. Pa ćete s jednom osobom da pričete koristit će dva ili tri telefona. Mislim da potpuno beskorišnujem. Osim ako se nebavite o određenim aktivnostima, ako zahtevaju da imate malo više te komunikacije i da želite da sakrite tragu u toj komunikaciji, onda se koristite tehnikama konfuzije i difuzije. Ali, ti mi se mi nebavimo na ovom prednetu, to radite tamo na zaštiti podata, kada probate da razgraničite i da minimizujete nivog komunikacije. Ovde nije smisleno da jedan koristnik ima veći broj tih sandučiće preko koji bi, odnosno, komunikaciju ni kanala preko koji bi išla komunikacije dovrno. Da je ima jedan. He, ali većina programskih jazika, ne mora ovo i-f-l-c-f-l-c-f-l-c-f-l-c, nego ustavite jedan switch lepo. I onda, uz avisnosti od toga koja operacija treba da se realizuje, to ovu suštini vi radite. Ako ste nekad pisali server-l-te ili ako ste pravili nekad servisku stranu bilo koje web-applikacije. Vi o suštini. Uvaj treba da odete i da javite onom serveru, koji se nahozi nekdo pozadani, koji, vrlo, nikad nećete ni dirati, da prijavite šta su vaše stranice koje treba da se renderuju. I onda, jednostavno kašta, ako stigni zaachtev koji počinje ovako, ovu ovu.