 Zdravo svima, u ove lekciji ćemo proći kroz proces formiranja HEX file-va. Vide ćemo jedan format HEX file-va, alate za njihovo formiranje i dotatit ćemo se pisanja linkerskih script. Najpre, kao podsetnik, čemu tačno služe HEX file-vi, vratit ćemo se na primer i spredhodne lekcije u okviru koje smo instancirali jedan microcontroller i njegovu memorju inicializavali sadržajem jednog HEX file-va. Konkretno, filaprogram.hex. Nakon inicializacije memorji ovoj microcontrollera datim HEX file-va, microcontroller ispoljava sledeće ponašanje. Periodično, invertuje svo vrednost na svom pinu PC-0 čime u suštini postižemo linkanje ove diode. Microcontroller ispoljava ovako ponašanje zato što HEX file-kojim smo inicializavali njegovu memorju sadrži podatke i instrukcija, kao i adrese na kojima se tih podaci instrukcija moraju nalaziti, da bi se ispoljilo upravo ovako ponašanje. Format kojim se postiže mapirenje između podataka i instrukcija, odnosno, niza byte-va sa jedne strane i adresa na koje te byte-ove treba smestiti, vidjet ćemo na primeru filaprogram.hex. Format ovog fila nosi naziv Intel HEX i njegove detalje možete jednostavno pronaći na internetu, ukoliko pretražite upravo Intel HEX. Dođemo se mi sada pozabaviti najbitnim elementima ovog formatu. Intel HEX fil se sastoji od proizvoljnog broja i jednoliniških rekorda. Svaki rekord mora da odgovora precizno definisanoj strukturi, što znači da svaki rekord mora početi dvo tačkom. Prve dve hexadecimale cifre nakon dvo tačke predstavljaju veličinu sadržaja rekorda izraženo u broju byte-ova. Naradne četiri hexadecimale cifre predstavljaju adresu u memori na koju treba smestiti sadržaj rekorda. Sledaće dve hexadecimale cifre predstavljaju tip rekorda. Postoji veći broj tipova, a nama su odznačaja tipovi nula četiri i jedan. Značenje ovi tipova možete pronaći u okviru opisa Intel Hex Formata. Nula označava rekord tipa data, što u širem smislu obuhvata i podatke i instrukcije nekog programa. Na konkretnom primjeru program.hex file to bi značilo da sadržaj svih ovih rekorda či je tip nula predstavljaju podatke ili instrukcije našeg programa. Jedinica označava rekord tipa end of file, što znači da se ovakav rekord nalazi jedino i isključivo na kraju Intel Hex file. Četiri predstavlja rekord tipa proširene linearne adrese. Rekord ovog tipa nam služi za prevazilaženje sledaćih problem. Najme rekli smo da ove četiri hexadecimale cifre predstavljaju adresu u memori na koju treba smestiti sadržaj rekorda. Sa četiri hexadecimale cifre možemo adresirati samo 2 na 16 byte-ova, što je najčešće značinu manje od veličine adresnih prostora današnih procesora. Problem prema tome jeste to što sa ove četiri hexadecimale cifre ne možemo adresirati čitav adresni prostor današnih procesora. Rekord tipa proširene linearne adrese razrešava upravo ovaj problem. Tako što svojim sadržajem definiše dodatne hexadecimalne cifre koje učestuvaju u adresiranju. Na koji tačno način te dodatne cifre učestuvaju u adresiranju videćemo za koji trenutak. Nakon hexadecimalih cifara koje presavljaju veličinu sadržaje rekorda, adresu na koju treba smestiti sadržaj rekorda i sam tip rekorda, nalaze se hexadecimalne cifre koje presavljaju sadržaj rekorda. One su tekstolnom editoru označene najčešće crnom bojom u slučaju rekorda tipa 0. Ovde se nalazi 16 decimalno bajtova što je definisano ovom ovde hexadecimalnom 10. Osenje polje rekorda jeste kontrolna suma koja se nalazi na samom kraju. Sada kada smo se upoznali sa svim poljima rekorda, možemo da vidimo na koji tačno način rekord tipa proširene linearne adrese utiče na formiranje adrese na koji će se smestiti sadržaj rekorda. Prva bitna stvar je da rekord tipa proširene linearne adrese utiče na sve sukcesivne rekorde do pojeve novog rekorda tipa proširene linearne adrese. Druga bitna stvar je da se sadržaj rekorda proširene linearne adrese. To bi bilo ovo ovde 0.8.0.0. Zaista ima dva bajta u njegovom sadržaju. Ovej sadržaj se postavlja na najviše bitove adrese a na njiže bitove adrese se uzima adresa iz samog data rekorda. Što znači da bi ovaj ovde sadržaj iz prvog narjednog data rekorda išao na adresu 0.8.0.0.0.0.0. Ovim smo završili upoznavanje sa ostanim detaljima Intel Hex Formata tako da možemo preći na alate koje ćemo koristiti za formiranje Intel Hex Files. Svi alati koji su nam neoporni mogu se preuzeti sa model platforme i to u okru kursa mikroprocesorski sistem. U pitanju su sledaća tri file, to je GNU ARM, Toolchain, Build Tools i Eclipse. To su tri zip arhive koje samo neopodno raspakvati i ja njih već imam preuzete na svom računaru tako da ću odmopreći na njihovo raspakivanje. Alate možete raspakvati na bilo koje mesto dakle neopodno je samo da preuzmete ove tri zip arhive i njih onda možete raspakvati gde god želit. Možete ih direktno raspakvati i trebalo bi da dobijete jedan direktorium koji se naziva GNU MCU u okviru koje će se naći i alati za prevođenje, pomoćni alati koji su neopodni takođe za prevođenje i prevođenje kao i razvinu okruženje Eclipse. U okiru ove lekcija koristit ćemo samo Arm Toolchain konkretno alate iz ovog bin direktorium. Pošto ćemo u ove lekcije ove alate pozivati i sklučevo direktno iz komadne linije možemo ovu putanju dodati u sistemsku promenljivu da ne bi smo stalno morali da navodimo punu putanju do ovih alata. To možemo uraditi tako što ćemo u Windowsu petrživaču ukucati environment variables i dodati za tekućeg koristnika u promenljivu pad putanju do ovog našeg direktorium. Dakle, pronačit ćemo u okviru gnu mcu Arm non eab gcc bin od direktorium i njega dodati u okviru pad promenljive. Da bi smo dobili Hex file, neophodno nam je da imamo Elf file koji možemo da pretvorimo u odgovarajući Hex. Z toga prvo ćemo krenuti odpisenja jednostavnog programčitva.