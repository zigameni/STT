 Proces broj 2 dolazi u korak broj 1. U korak broj 1 je došao proces broj 2. Ovaj ovde ovde da se uporedi sa tim tu. Šta sam sad rekao? Ovaj ovde da se uporedi sa tim tu brj 1 manji od 2, jeste jedan je manji od 2. Dalje proces 2 može da uznapreduje? Ajde da vidimo, doponujemo još jednom šta sam sad rekao. Proces broj 2 se nalazi in od 2 je jednako 1. In od 1 je jednako 2. Znači ovaj ovde in je manji od dolog tamo. Dalje smemo da napredujemo samo ako mi nismo poslednji. Proces broj 2 Dalje je poslednji? Proces broj 2 Nije poslednji u koraku broj 1, proces broj 2 ne može da se povede nisa kim drugi. Dođe proces broj 3 Kajže proces broj 3 ja oću dođem u kritičnu sekciju. I onda ovde dođe i upiše vrednost broj 3. I sad gledamo šta se sad događa. Ajde proces broj 3 se uporedi Dali ja mogu da preteknem ovog ovdje? Da je pano, dali ja mogu da preteknem tog 2 i 1 je manje od 2. Ok, ne mogu po tom usluvu, ali sam poslednji. Znači pošto moram da bude end. End je oba usluva usluva ispunjena. Ja moram da čekam u poriziji u sedjenicu. Dođe naprimer sad a dvojka dobi pravo da se izvrašava. A dvojka se poradi s sedjenicom. Dalje ovaj ovde broj manji od tog 2 broja? Dalje je taj tu broj manji od tog tu broja? Jeste manje? Dobro, onda dalje sam ja poslednji koje doša u korak broj 1? Nisam. Znači smem da preskocim 1. Isto smem da preskocim 3. I onda ja mogu da preteknem u korak broj 2. Ja mogu da preteknem u korak broj 2. I u korak broj 2 sam ja poslednji došao. To je proces broj 2. A šta će se sad da događati? Trojka? Da imamo da li trojka može bilo gde da uznapreduje ovom trenutku? Pa ne može. Trojka trenutno ne može nigde da uznapreduje, jer trojka je poslednja koja je došla u ovaj ovde korak. A ne može da pretekne ni jedinicu, ni dvojku, zato što imaju veći identifika veći stepen u odnosu na trojku. Tako da trojka mora da čekaj. Imo dvojka šta može dodrati. Košto mi, ja sad slučajno puštam ove naše procese. Ja ne znam šta će skeđurar da odradi, tako da mogu slučajno nekako da ih puštam. Dvojka? A, da li je ovo ovde jednako ili veće? Jednako je da sam ja poslednji, ja sam poslednji, znači moram ipak da sačekam. Da dođe neko može da posla mene, ne imam nikog trenutnu posla mene. A, tako da će dvojka sačekati, probudite jedinica. Jedinica može da dođe do ovde. I jedinica će prva ući u kritičnu sekciju. Prve došla do ovog ovde koraka. Šta smo reklja, ja sam nalazim u koraku broj 3. Ispore, uporedio sa sesim i zaključio sam ja sam jedini. Kako je jedinica mogla da pretekne dvojku? Jedinica mogla da pretekne dvojku, zbog ovog ovde uslova, dvojke poslednje stigla u taj korak. A, da li jedinica može da pretekne trojku? Može da pretekne trojku, zato što jedinica uznapredovala više. I ovde je slučeno ispalo da će doći po onom redosledu kako su započinjali, ali to uopšte nemora da se desi. A, mogu da se desi da je in, upisao ovde jedinicu, da je ovaj ovde upisao o jedinicu i da je ovaj ovde i da... Što više procese na početku koji se negde navaze, a to više ne znamo šta će se desiti. A što proces više uznapreduje, već je veratnoći da će on verovatno doći ranije i ući u tu kritičnu sekciju. Tako da u ovom ovde konkretom slučaju koji sam ja napravio, zato što sam uznapredovalo sam procesom broj 1, napravio FIFA o redosledu. Da nisam uznapredovalo da su svi oni ostali u koraku broj 1, mogle da se desi situacija da dvojka pretekne jedinicu i ako je možda jedinica došla da, kažemo, ranije i postavila svoju promenjivu in. Znači moglo i tako da se desi i taj slučaj ja mislim imate snimljena na nekom od prošlo godišnjih ili pretkonne godine materiala. Ajde da ponovio šta radi naš algoritm. Imo jednu petju veliku gde u svako iteracije, imamo n iteracija, da u svako iteraciji izbacujemo po jedan proces, dok ne ostane samo jedan na kraju. Ko se blokira, onaj koji je poslednji došla u neki korak, a da nije jedini. Znači da kako znamo da li je jedini ili nije, moramo da ododemo da su poredimo sa svim. I ako je onaj iz kim se poredimo uznapredovalo više u odosu na nas, moramo da čekamo. Nemoramo da čekamo u slučaju da je neko došao posle nas u korak, koji mi trenutnu posmatramu u naš korak. Neko je došao u naš stepn posle nas, nema veze. Znači mi u suštini preskočimo sve ostale na datom koraku idemo dalje. Šta smo rekli, ovo je jedan del od usluva koji poredimo, da li smo mi uznapredovali više u odosu na susede ili ne. Šta je mana ovog rješenja? Maloče sam rekao, mana ovog rješenja je kurisit veliko grove promenji, moramo tačno da znamo koliko ima procesa i nemamo FIFO algoritm. Ovo ovde blokira poslednjeg, ako nije jedini, ali negarantuje da će o nekoj je prvi došao i prvi ući u kritičnu sekciju. To je jedna mana ovog našega algoritma. Dobra strana ovog algoritma je zna nezakteva nikakvu specijelnu instrukciju. Ništa specijelno nezakteva, a rati. Jedan od prvih algoritama koji je poštena, algoritam, je ticket-algoritam. Ticket-algoritam je nešto što ćete verovatno koristiti dosta često, ako treba da obezbedite da rešenje bude poštena. A mi ćemo na ovom predmetu u ovom ovde prvom, prvom četvrtini raditi još dva. Znači danac imamo vidjeti još dva poštena synchronizacijona algoritma, koji treba da vode račun u tome koje kada došao. Prvi, ticket-algoritam se zastniva na radu šalterskih službe. Kako glasi, kako izgleda taj algoritam? Imam osobu, koja dolazi do mašine. To je mašina u banci ili šalteru, pritiska neko veliku dugme, je ovdje jedno dugu me, pritisne dugme i izlađe jedan listić. Na tom listiću piše koji je redni broj date osobe koje došla. Onda data osoba čeka. Dobila je ta osoba listić, dok se na velikom display-u i ta osoba možda nije jedina, možda tu imaju još osoba koje čekaju. I sve imaju taj broj, svoj broj. Osoba čekaju. Dok legoce broj koji se ne pojavi o ovde, ne poklopi sa brojem koji se nalazi na tom papiriću. I kada se taj broj poklopi, osoba traži broj odavde o te mašine, nači pritisne dugme, uzme broj i onda čeka dok legoce broj ne pojavi. Znači ovo ovde fif algoritam, gde dolazimo do mašine, pritisnemo taster, uzmemo broj i onda čekamo dok legoce broj ne poklopi. Pošten algoritm i vrlo jednostavan algoritm. Šta kaže naš algoritm? Potrebno je nekako da uzmemo taj broj, nedeljivo. Kada smo uzeli taj broj nedeljivo, onda treba u jednoj wild petlji da čekamo dok legoce. Taj naš broj ne pojavi sa poklopi sa brojem koji se nalazi na display-u. Aha, nači nama će ovde biti potrebno da imamo neka dva broja. A ovaj ovde broj će biti tiket. A ovaj ovde broj je broj next koji kaže koja je sledaća osoba koja može doći na red. Ovo ovde će biti moj tiket, maj tiket i šta ja u sušteni treba da radi. Ili number ili kako da vi ovde ovde nazovete. Turn od i je jednako number, number je jednako number plus 1. Ovo ovde je posao koji radi naša mašina. Turn od i je lokalna promenjiva. A ovde je izvučeno izvan petlji zbog porećinja sa jednim drugim algoritmom. Ali turn od i, a ovo je moj papirić, je moja lokalna promenjiva. Nemam potrebe da bilo ko drugi gleda moju lokalnu promenjivu. Ali kažem, ovo ovde je za sada izvučeno malo izvan. A on je naše, ovogo naše lokalne promenjive. Da bi mogli da go poredimo sa bikerij algoritmom koji ćemo razmatrati na početku na arenog časa. Šta sam beša, ja sad rekao. Da mi radimo prvo dođemo do mašine, kažemo daj, pri...