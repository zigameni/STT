 Cjau svimam, dobrodošli naš i dan čas koji ćemo drzati Adrijan ja. Cjau, tema danesnjeg časa je, dakle neka sledeća šema takođe za zaštitu elektronske pošte. Zdajeli ste da smo prošli put završili PGB šemu, tako da danes radimo S-mime, odnosno, mime koji zapravo predstavda jedan standardizovanj format za zaštitu elektronske pošte, a S-mime praktično predstavda njegu u ekstenziju, dakle secure mime praktično. Hajde da vidimo, očam ćemo pričati danes. Prine košta predstavimo na same pojedinosti S-mime, pročit ćemo nekako malo kroz istoriju, da tako kažem, odnosno kroz RFC format na osnovu koga su prosto unapređivanjem, kas nije nastali S-mime format, dakle vidjet ćemo koji su to nekih gradivni elementi koji su osnovni zapravo za sve ove formate i onda ćemo se po lako, dakle, kretati prosto kroz to šta je sve unapređivano, zašto nam ovi početni format i nisu bili dovoljni, odnosno zašto smo imali uopšte potrebu za mime formatom i kasnije, naravno, za poširivanjem uokviru S-mime. Tako će pričaćemo o osnovnim funkcionalnostima S-mime, gde je negde i cilj, tako će da vidite kako, naravno, pošto se S-mime i PGP koriste u slične svrhe, odnosno, dakle, tipično namena im je identična odakva, to je da štite elektronsku poštu. Koćemo zapravo da vidimo da bez obzira na koji način ni prosto definisali te funkcionalnosti, one u suštini rada jednote isto, odnosno takođe obezbeđuju neko autentikaciju, obezbeđuju neku tajnosti i poruka. Tako da ćemo najvišlo ovde zapravo povlačiti paralelu sa samim PGP-om, vidjet ćemo gde su sličnosti, gde su razlike, te ćemo, naravno, dosta značiti, ukoliko se sećete svarik koje smo radili na PGP-u, jer prosto nećemo toliko do detalja ulaziti u same funkcionalnosti, već ćemo se na dovezati na ono što već znamo generama. Vidjet ćemo, naravno, dakle, i neke primere poruka, vidjet ćemo šta sve može prekstavljati sadraže i ovakvih poruka i nakraji ćemo pričati o pojemu certifikata i o obradi certifikata u skopu S-mime. Ok, dakle, kao što sam repla, S-mime koji nam je tema za dana, zapravo precevljuju na priđenje ovog majmu formata i u principu dakle to je standard elektronske pošte, gde videli smo prošli put jedan drugi protokol, da smo drugu šemu u što je PGP i u što je nešto što se u glavnom, dakle, koristi za neku ličnu upotrebu kod elektronske pošte, dok je prosto S-mime nešto što se malo globalnije koristio. Mi ćemo dakle krenuti od ovog početnog formata elektronske pošte, RFC 822, i tu ćemo vidjeti, dakle, na čemu se uopšte bazira S-mime, odnosno, kako za početek izgleda taj osnani format. Da, kao što sam rekla, dakle, RFC praktično definiši format tekstualnih poruka, koje se šalju putem elektronske pošte, i malo kastim ćemo i vidjeti, kako izgleda primer jednog takvog formata. Međutim, dakle, prosto vidjeti ćete i na samom primeru, ovak pa poruka je ono što smo svi videli uvek, al tako, kada pričemo nekoj elektronskoj pošti, odnosno, poruci koji šalje, odnosno, sve nekoma nekoj melu koji ste sadstavili, njih ta poruka se tipično sustoji od neku gumotaču i od sadrže sam je poruka. Samom otacom predstavljaju sva ona neka zaglavlja koje su potrebna, da bi poroka mogla da se dostavi na isprvno adresu i da bi takođe, naravno, sadržala neke informacije i o pošiljavcu poroke i prosto neke dodatne informacije koje su potrebne. Sadržaj, dakle, u glavnom, u glavnom se sadržaju se stoji iz nekih informacija, koje se, naravno, dostavljaju u strani prijemnoj. Madan, naravno, osim toga moguće je imati neke spetificne sadrže, o kojima ćemo pričati nešto kasnije, koji takođe imaju neka zaglavlja, ali u glavnom, dakle, sadrže i prosto predstavlja neku informaciju, koje treba da se dostavi na prijemnoj strani. Dakle, kao što sam repla, ova zaglavlja se stoje iz nekoliko linija, gde svaka linija zaglavlja se drži neku ključnu reču i vrednost koja je se prosto asociara sa tom ključnom reču. I sad, tipično ključne reči koje se gotovo uvek nalaze o ovakvim porukama, su, naravno, kome je poruka namenjena, od pogada poruka stiže, neki time stamp, odnosno prosto neko vreme svanja poruke, neki subjeg, odnosno šta je tema poruki i to je ono našto ste već praktično navikli kada pričemo o elektronisku i poštri. Nakon toga, dakle, sadrže sam je poruke i odvojeno odnosno na zaglavlja i onda imamo neko tekstualno telo, odnosno informacijon i sadrže poruke, koji se može nalaziti u proizboljnom broju linija. Međutim, kod ERAFCA, dakle, tipično je da je to obavezno neki tekst i upravo to pregleda jedno do granicenja ovog formata, o čemu ćemo takođe pričuti malo kasnije. Dodatno, često postoji i neki identifikator same poruke, message ID i to informacija koja se takođe svali u samu poruku da bi na neki način mogla biti interpretirana na prijemnoj strani. I kao što sam već napomenalo, dakle, vidimo ovdje jedan primer same poruke i kao što reku, to je u glavnom nešto našto ste već navitim. Dakle, kao što vidite, gor nida opretavlja zaglavlja, odnosno nekoliko linija zaglavlja, gde se svaka ta linija brozozostoji od nekih ključne reči i od sadržeja, odnosno vrednosti koji su vezani za te ključne reči. Tako, dakle, imamo neki date, odnosno datum, zatim od koga potiče poruka, kome je namenjena, kome sve namenjena. Zatim neko informacija o samom sadržeju poruke i nakon toga odljenu od tih zaglavlja imamo prosto neki tekstualni sadrže i poruke. Tako da, ovodakle, predstavlja jednostavnu verziu elektroske poštog, odnosno neke poruke koji bi ste poslali, odnosno neko gmela koji bi ste poslali, kao što primećete, dakle, u pitanju je još jednom istručivo tekstualni sadrže. Tako da, naravno, taj tekstualni sadrže može biti u nekom određenom broju linija i izgleda, napr. u pravo ovako. Ok, možemo dalje. Sad, jasno je nakve da prosto, tu postoje neka ogranicenja i da ovakav format i ovakodefinišan format je dobar kao jedna osnovam, međutim nije sve što je generalno potrebno da bi poruka, dakle bilo kok sadržeje koja je na neki načinu potrebljeva, realno mogla da se šalja i da predstavlja neko elektrosku poštog. Tako da je potrebno na odgovarjeći način proširiti zakteve za ovim formatom. I uprvo je tako i nastavljajim, tako što su rešeni, dakle, neka osnovna ogranicenja koja su sajavljala pod RFC formata. Posebno imajući u vidu da naravno svi ovih formati takođe sigurišu sa nekim protokolom koji se koristi za samo slanje poroka. Dakle, recimo, RFC u kombinaciji sa SMTP protokolom koji je jedan od protokolu za slanje poroka, ali naravno i sa nekim drugim protokolima je prosto imao neka ogranicenja i rešavanjem tih ogranicenja je uprvo nastavl i main format. Jedin od tih ogranicenja je zapravo bilo da se ne prenose nikakvi izvašni paljlovi, niti bilo kakvi drugi binetni obikti, odnosno da je jedino moguće preneti neku tekstualnu poroku. I jasno je da to definitivno nije dovoljno, da nije dovoljno samo slati izključivo tekstualne poroke. Tako da je to jedno od prvih stvari koji su na neki način prevaziđeni u opferom maina. Oblastno, dakle, definisani su naravno i neki drugi tipovi poroka koji mogu biti prenecti u potrebom, i definisani zapravo u potrebom ovog formata i prenecti na kraju nekim od protokola koji figurišu za jedno sa mainom. Recimo, sam je tako. Osim doget, dakle, ove protokol nije bio u mogućnosti da prenosi bilo, kakve tekstualne poroke koje sadrže nacjunalne karaktere. I razlog je zato što prosto i ovaj format u kombinaciji sa SMP-om je definisalo izključivo, dakle, sedmobitnazki karakter, i to je ona osnovna varijanta zapravo aski kodova, a kao što znate nacjunalni karakteri su nešto što je prosto definisano u okru proširanih aski kodova, za koje potrebno osam biti. Tako da zbog tog kodiranja koje bilo na sedm biti, dakle, u kombinaciji ove dve protokole i ovakvog formata, takve poroke nisu mogla biti premet. Takođe sam protokol definisuje i neku maksimalnu veličinu poroke koja može biti premeta, i preko toga, naravno, poroke nije moguće prenositi u okviru jedne elektroske porake. I dodatno je što jedno dograničenja je upravo neka vrsta konverzije između razvečitih kodova, gde za aski kodove, dakle, sam sigurno da znate, a za extended binary coded decimal interchange code ne znam da li znate, ali to je dakle neki kodov, koji su definisani od kodove,
 na strane IBM, i prosto korišćeni su vise rani, i prosto da kli postoji jedinstveno mapiranje iz ASCIA u ovaj pod, da u kombinaciju ovog protokola i dakle ovog formata prosto to nije bilo jedinstveno, odnosno nista nista korišćena ista pravila za mapiranje izmeđi ove dva koda, pa to naravno predstavlja problem za konverziju u jednom i u drugom smijah. I dakle postoja još neka druga ogranicenja, ali naravno nećemo i sve pominiti, zato što nema potrebe, ponočno je glavno ideje da prosto budete sve snidi dakle koje su neka bazično ogranicenja koje su tu postojila i zbog čega je prosto bilo potrebno unaprediti ovaj format. Sad da bi sve ovo naravno moglo da se realizuje, majim i prestavio neku praširenju u odnosnu na RFC i upravo njegovu specifikacijam, uključuje pojev u nekih novih zaglavlja koje su definisana, koje zapravo predstavljaju praširenje u odnosnu na RFC zaglavlja i koje se drže neke dakle dodatne podatke o samom telu poruke. Malo kastniji ćemo viditi u kojim zaglavljima se radi, viditećemo koje su to neka obavezna zaglavlja, koje su neka dodatna, koje prosto donose neke dodatne informacije, ali nisu obavezna. Osim toga naravno definisano je nekoliko različitih formata sadržaja, zato što je dakle upravo jedan od imperativa bio da sada možemo da prenesemo i neku poruku koja nije isključivo tekstualna, tako da to može biti neki binary sadržaj, dakle i do neke aplikacije, ili dakle neki drugi multimedialni sadržaj, ali u glavnom dakle ne isključivo više tekstualni format. Tako da naravno definisani su različitih formati sadržaja, koje sadamajem format obukvata i podržava. Osim toga takozi definisano je i kodiranje prenosa, što znači praktično da bilo koji sadržaj koje se prenosi u okveru, mind može biti konvertovan u neku formu koja je zaštićena od promena i koja je zaštićena generalno i od preglada i od čitanja nekome koja ne implementira mind format i na taj način definišamo koje su to različita kodiranja koja postoje i dakle kako naravno funkcionišu i kako odgovarajuće inverzno kodiranje, takođe može da bude definisano sam strani prijeva. Ok. Prva stavka u koje pričamo su polje zaglovlja koje su dodata i sad je dakle prvo polje zaglovlja i neka mind-versija, naravno dakle versija samog formatu. Međutim, ovo vrevnosti uvep podešena na 1.0 i u principu to je dosda misim interesantno, zato što su jednosti strane, naravno, mora biti podešena versija minda, je sve tima uprvo specificirada da se radi o mindu, da nije takla običan RFC, već je uprvo mind format, ali osim toga ne postoje u principu druge versije, zato što, odnosno, nisu standardizovanu druge versije, zbog toga što sajmu napređenjem nije bilo dobilno jasno definisano kako će te u napređene versije zapravo izgledati, odnosno, dakle kako će se izvlati same versije, tako da je ovde praktičnog harta kodovanu 1.0. S druvi strane takođe, naravno, ono što je odsnačaj, što ćemo imati prilike da kasnije vidimo i na primeru, dakle nekih porokog, da ćemo prosto viditi kako izgledaju ove informati, je recimo kog je tipa sadrže, što u principu opisuje, na koji način su organizovanih podaciju u samom teloporuke, šta je to sve što je sadržena u teloporuke, dakle kog tipa su te informacije, to je, naravno, odnačaja da bi poroka mogle korekno da se obradi na stani prijena. S druvi strane jasno, u koliku imamo više načine za kodiranje sadrže sa samet poroke, onda nekako moramo da označimo, odnosno, markiramo i upravo koje kodiranje je korišćeno, kako bi se prilekom prijema samet poroke, naravno, moglo podraditi inverzno kodiranje, tako da će ovde biti opisana ili neka od standardnih načina transformacije, odnosno, standardnih načina za kodiranje, ili će biti opisana, dok je neko nekone standardno kodiranje, vidjet ćemo kasnije kako to izgleda. Osim toga, sama zagroja mogu sadržati i neke dodatne informacije koje nisu sami po sebi značene, a to su, odnosno, da kažem, nisu sami po sebi značeno u smislu obavezne, međutim, naravno, da je dobro imati ih, zato što jednostavno, dakle, mogu da olakšaju neke procese popotrecimo identifikatora sadržaja ili neku opisu sadržaju okru koga prostopostvaja neke dodatne informacije o tome šta se nalazi u samim porokama. Dobro, što sviče samih tipova sadrže, dakle, sad da, osim običnih tekstualnih poroka koje smo imali i ranije, imamo i obogaćene tekstualne poroke što ćemo vidjeti kasnije, ali, u suštini, imamo i neke potpuno nove, naravno, tipove, odnosno, vrste podataka koji se mogu slati u okru elektruske pošte, ako i prosto nisu bili definisani u okru prethodnog formatu. I takvi, takvi podaci, odnosno tipovi podataka su i više seksijske poroke, zatim, inače, za svaku od ovih različitih formate ćemo kasnije malo više popričati šta zapravo predstavlja, a tako, ođe ćemo, osim toga, imati prilike i da vidimo kako izgleda format za neke od ovih konkretnih vrsta različitih formata. Tako da, ja ću ih stada samo nabrajati, ali onda ćemo, naravno, kasnije nešto detaljnije vidjeti, o čemu su tu zapravo raditi. Znači, više seksijski, prosto, dakle, neke format koji definiše više seksija, kao što mu i samo ime, kaže, u okru poroke. Zatim, format koji se zove poroka, zato što tipično predstavlja neke enkapsulirane informacije po specijpićom formatu. Zatim, slike, video zapisi, audio zapisi, dakle, svo šta nešto što je prosto bila nedostupno koderacija, a što se sada normalno može prenositi u okru elektronske pošte. I na kraju prosto neki binarni podacij, odnosno, neke aplikacije. Zazviča samih tekstuolnih tipova, dakle, ono što smo videli koderacije, da smo mogli doprenosimo obična aski kodode, dakle, običe neki tekst, međutim sada je mogli će prenositi i različiti neki obogaćeni tekst, odnosno, dakle, sa dodatnim formatiranjem, sa nekim karakterima posebnim, tako da na daj način je praktično bogaćeno slanje i ovih običnih tekstuolnih porok. Što sliče više sekcijskih poroka, one su nam zanimljive zbog toga što prosto mogu da definišu više različitih sekcija, odostu više različitih delova poroke, koje su onda mogu interpretirati različito. A što to zapravo znači? Pa to znači da u različite sekcije poruke možemo smješlat i prosto različite tipove podataka i da za svak od stih sekcije se onda posebno definišu zapravo neke informacije iz samih zaglavio, a kako bi svaka ta sekcija naravno mogla ispravno da se interpretirama strani prijeva. Svaka sekcija je označena i odvojena od drugih sekcija nekim granicama, koja su takođe definisane u samim zaglavlju poroke, što ćemo vidati kasnije na primeru i u principu postoje neke četiri pod tipa tih sekcija. I to smo mešovite sekcije paralelne, alternativne i zapakovanje. U principu razvijekuju se po tome u glavnom šta predstavljaju i na koji način se šalju, zato što sekcije međusobno mogu biti nekako povezane ili u potkonnosti nezavisne, a to zavisio doga, da je praktično o njihov radosledne neki napčeno uslovdjem. Naprimer imate ovaj mešoviti tip gde imamo nezavisne delove, međutim, prilikom njihovog slanja bitno je da na samom strani prijeva možemo da rekonstruišamo njihov originalni poradak i zbog toga može da mora postoji neka informacija na osnovu koji se taj poradak može rekonstruisati na samom strani prijeva. Sa drugi strane paralelni tip definiše to isto, međutim, sam originalni poradak nije značajan, tako da na strani prijeva se poruka ne mora rekonstruisati identično, odosnovu, koradak ovih sekcija se ne mora rekonstruisati identično kao na strani slanje. Osim toga imamo i ove dve neke podvrste koje se razlikuju odnosno to kakva informacija tipično šalju, tako da kod ovih alternativnih podstipova sekcija, svakir različiti deo predstavlja neku različetu versi u isti informacijak, da se onda na strani prijeva koriste i sljučimo jedna od tih različitih informacija i to ona koja je najkompatibilnija. Sve ostale informacije predstavljaju prosto neki višak. Četvrti podstip prestavlja zapakovanji podstip, gde s ovdje radi takođe o načinu slanje koji smo videli od mešovite podstipa, što znači da imamo delove koji se premnose tako da poštuemo njihov originalnih poredat. Među vidim svaki deo zapravo prestavlja RFC poruku, što znači da je neke način specializovan i, da tako kažemo, optimizovan taj neki ostomni format koji je bio definisan u RFC, pa zbog toga postoji neki, da kažem, poseban tip koji je odvojen za tako našto. Ok, da što stit ću tipa koji se zove poruka, ako smo videli, kao što je rekog, dakle, ona predstavlja enkapsuliran poruku. Sad što to označi, enkapsulirana poruka podrozumeva, da vi imate, dakle, sve što je potrebno za slanje neke
 poruke enkapsulirano kao celino, pa onda napr. ako to treba nekde umetnuti u više seksijsku poruku, dakle videte ćete u okviru te sekcije i samo telu poruke, ali njena zaglavlja boja zbog enkapsulirana u okviru tog. I primjer ćemo za to videti nešto kasnije. I tu dakle imamo pod tip RFCa, gde je enkapsulirana dakle poruka u vormatu RFCa ili main poruka, takođe bez obzira na to što je naziv takav kakavijesta, ali u principu, dakle kao što sam rekl, tu su onda izagljulja i sam sadrže neke poruke. Zatim, sledajši pod tip je parcijalna poruka i ovo je jako slično ono mešto smo videli prošlet put koji PGBa kada smo pričali o segmentaciji. Tako da kada godi je na neki način potrebno podeliti neku veliku poruku, prosto zbog limita veličine slanja takve poruke, a na neki način koji je prosto neopterećujući za primjoca, onda se prosto dakle poruka deli u više segmentata, definišu se, naravno, identifikatori za sve segmente poruke, kako bi se nastani prijeva, naravno, takva poruka mogla rekonstruisati u celinu od koje se krenlja. I treći pod tip, predstavlja spolješnje telo poruke, odnosno, dakle, jednostavneročeno ovom, dakle predstavlja najčešće prosto umetnutu neku adresu do nekog sadržaja koji zreba da bude sadržaj samo poruke, ali koji nije direktno umetnutu samo poruku, dakle, recimo, neke link, neka putanja, neka eksterna putanja koja pokazuje na neki file, recimo koji se nalazi nekde drugde, ali uom sam file ne predstavlja sadržaj poruke, nego tu imate zapravo samo putanju koje pristupate do takvog sadržaja. I onda, naravno, značano je označiti da se radi u prvo o takvom tipu poruke, kako bi onda mogla, naravno, da se interpretira takva poruka, odnosno da se dođe do odgovarećeg sadržaja na strani prijevan. Ok, ovo za aplikaciju smo već reklji da se radi objenerljim podacima. I naravno, one audio, video i slike ne moramo posebno komentaristati, znaš da što sve to predstavlja, tako da, dakle, normalno, mogu predstavljati sadržaj malim poruk. Što tiče kodiranja, kao što sam već se napomenilo, kodiranja vam tipično koristi da bi smo na neki način mogli da zaštitimu poruku tog kom premusa i da bi ta je premus poruke bio bezprednan i da ne bi bilo zapravo poruka izmenjena od strane nekok treće bilice. Samo i tim što prosto postoji više različiti horesta kako možemo kodirati poruke, onda, naravno, u okkur u zaglovlja prosto moramo imeti neko polje, koja će da nam markirao, o kom načinu kodiranja se tu radi, da bi, naravno, posla mogla takođe da su uvradi im drzno kodiranja na samom strani prijevan. I kao što vidite na vam slajdu, imamo šeste nekih različitih vrsta kodiranja, gdje zapravo prve tri vrste suštinski ne prekstavljaju modifikaciju podatka i suštinski ne prekstavljaju modifikaciju, dakle samih informacija, odnosno, ono što sam odmah na početku rekla da znači naše kodiranja, a to je bilo je al tako, dakle kako menjamo neke podatke, tako da oni budu zaštititi pri likom slanja pork. M.d., ove tri vrste kodiranja koje vidite, koje su sedmobitno kodiranja o smobitno i binary, zapravo nam samo sugerišu o tome kakvi su podaci koji se nalaze u samoj porci. Tako da tu nemojmo efektivno neku izmenu samih podataka, već, i agustavno nam govori o tipu podataka koji se nalaze u samoj porci. Tako da, koj sedmobitnih, dakle, imamo onu osnovnu verzi u aski karakter, ako do smobitnih imamo one prošire na aski karakter. I binary, dakle, prosto imamo binarne podatke. M.d., preostala tri i oga neke klase, tako kažen kodiranja, predstavljaju neke farne algoritme za izmenu samih podataka. I tu imamo dva neka standardna kodiranja, Quoted Printable i Base64 kodiranje. I imamo neko X-Token kodiranje koje predstavlja neko nestandardno kodiranje. Ja mislim da na sledećem slajdu imamo nešto više o svakom od ovih kodiranja, tako je. Dakle, ove prvi deo, o samim već vrednostima i njihovom formatu to sam već izpricala, a ovo suštini što spriča ovih nekih posebnih kodiranja. Ove X-Token je veoma zanimljiv, zato što on zapravo označava da je primenjeno neko nestandardno kodiranje. E sada što to znači? To znači da konkretni koristnici koji šali u značim razmenjaju poroke u kojima je naznačeno da postoji X-Token kodiranje koriste dakle neko svoje specificno kodiranje. I to kodiranje je implementirano i na strani slanje, poroke i na strani prijeva poroke. I u tom slučaju se ove vrednost koriste istjučivo da označi koje to nestandardno kodiranje primenjeno, da na neki način praktično tu naznači okom algoritmos se radi, preti može biti dakle da prosto imaju više razvečiti neke kodiranja koje implementiraju i na ta način, naravno, moramo značiti okom kodiranju se radi. M.d. dakle u tom slučaju koliko se koriste X-Token kodiranje tipično je da to nije jedno od ova dva preostala kodiranja koja se uvičajno koriste u ovom pirunaima i da je to nešto što ove bezbeđuju dakle strana koja šalje poroku i strana koja prima poroku. Z druge strane kodiranje, prestaljno kodiranje, koje je zapravo čicivo da tako kažem i uglavno se koristi kod ASCI karaktera. Dok ovo biš u 64 kodiranje je našto smo već videli i što zapravo predstavlja isto što i radik u 64 konverziju pod PGP a ovdje su zove malo drugačije, ali u principi funkcioniš na isti način, dakle tako što na neki način, neko policinu od 3x8 bita konvertuje u 4-byte, jedino što je kodde delali na malo drugačije grupa, ali u principi u radit se o identičnoj konverziji. I ovi dve postoje konverzije predstavljaju nešto što je standardizovano za majem, X-Token predstavlja nešto što se definiše dodatno i što svaka od ovih strane definiše sama po sebi, a dakle, ove prve 3 vrednosti koje vidimo, s mobitnoj i banerik kodiranje, zapravo označavaju da nema specificne izmene samih podataka, već samo govore o vrst i samih podataka u okviru porike. I sada smo stigli do neku konkretnog primera, gde možemo i da vidimo kako izgleda ovaj format i ono što nam je verovatno najviše odznačuje, zapravo da vidimo kako izgleda jedna viši seksijska poroka, zada što prosto u okviru te više seksijske poroke, naravno, možemo videti neke od oni pojedinačnih delova poroke, odnosno, pojedinačnih formata poroke, pošto smo rekli da, dakle, viši seksijska poroka se stoji iz nekoliko seksije koje svaka može predstavljati, prenositi neke od oni pojedinačnih formata u kojima smo pričali. Prvi deo gornje, kao što vidite, sodraži neka zaglavlja i ovej deo prilično liči na ovej format koji ispaviteli koderfce, rekli da je on prošire nekim dodatnim informacijom. I kao što vidite, prošire nije na početku o ovom versijom majma, rekli smo na ovom podješanom na 1.0, ali su gjeriši da su prvoradi o majmu, zatem imate nekoliko ovih zaglavlja koje smo videli i koderfce, i on što je namaznačeno, dakle, je da imamo definiciju toga, kakav je sadržajit naše poroke. A ovde vidimo da imamo višniseksijsku poruku i dakle, takođe, vidimo na koji način se šalju, znači, mešovitu višniseksijsku poruku, vidimo na koji način se šalju pojedinačne sekcije. Takođe, ono što nam je ovde definisano je i šta je granica između pojedinačnih sekcija, kao što vidite, dakle, unik boundary 1, gde goh najdžemo na to u samom porici, označavaće nam prosto granicu između pojedinačnih sekcija. I ono što možete videti već na ovom prvom slajdu toga primera, dakle, nakon ove jedne linije, imamo toteloporoke i kao što vidite, imamo neku tekstulnu poruku koja je default prednost i nakon toga imamo prosto granicu između ove prve sekcije i naradnih sekcija. Pa onda sad recimo u sledećoj sekciji, dakle, dobro, pati imamo neku sekciju gde vidimo ove razveki, a na primero, ovo što vidimo, ovde baš da sad adrejenu pokazuje, jedno možemo i eksplicitno definisati sadržaj same sekcije da se radi o tekstu o ovom formatu i dakle, okom setu karaktera se radi koji se naradno tu koriste, gde okoliko se to ne definisate, dakle, tipično, po defaultu se radi o tekstualnim prednostima, kao što smo imali prilek u gore da vidimo u ovom prvom delu, a inačo, dakle, ovde smo sad eksplicitno prosto zadali, okom tipu podataka je reć i u kojem formi su oni predstavljenje. Ok, idemo dalje da vidimo preostale sekcije. Zatim, nadalje, možemo vidjeti da ram jedno od ovih sekcija može sam, bo sebi biti više sekcijska poruka, gde vidimo da se ovde, naprimer, definisano je da se svaka sekcija, odnosno svaki del, da tak pažem, to je te poruke, šalje kao paralelno, videli smo što to znači, to znači da možemo da pošljemo sve delove prosto nezavisno nevodeći ratuna u njihovom inicijalnom poretku. I ovde je definisano takvoj dje koje granice između pojedinočnih delova ove sekcije. I sad da vidimo da je to unique boundary 2, znači jasno da ne može biti unique boundary 1, zato što je to granice o nih početnik sekcija, da tako kažem. On što bih dozala sam u ovom momentu...
 je takođe naravno da same granice, odnosno, ove neki knjučne reči da tako kažem koje definišamo kao granice, jedino naravno ne smaju biti nikde definisane u okviru samog teksta, koji se nalazi u korupci, jer će onda to jasno biti interpretirano kao granice samih sekcija. Tako da prosto moraju biti izobrene neke vrednosti, koje se njegde regulabno neće koristiti u okviru same korupce. Znači ne možete imati sad nekada u tekstu Unique Boundary 2 kao odlično regularni tekst. Ok, a on što možete viditi u ovih sledećoj podsekciji, je recimo sad da je tip podataka koji se šalje neki audio podaci i su pitanju i kao što vidite, ove imete eksplicitno navedenog kodiranje, kao base64 kodiranje, dakle znamo da se to koristim ovdje. I tako dalje, recimo u sledećoj sekciji, imete opet neki slike, kao podatke koji se šalju, takođe se istim podiranjem, onda u sledećoj sekciji, to nam je sad već gotova, ovaj više sekcijska poruka koja bila embedovan o ovu jednu sekciju, pošto vidimo da imamo Unique Boundary 2, pa onda imamo Unique Boundary 1. I sledeće, al da, ko opet nam je neki obogačen tekst, koji vidimo dakle kako izgledam sa nekim posebnim informatiranjima, pa tu opet imamo kraj sledeći sekcije. I onda na sledećem slajdu imamo jedno od oništa embedovanih poruka, odnosno, dakle tip, poroke koji smo videli, je prestavlja sam message i upravo, dakle, ono što i tip message je RFC 822, što ako se setite, bila je jedna od oništih pod tipova za samo enkapsuliranu poroku. I kao što vidite, dakle, prosto imamo ugnježdeno ne samo sadreže i poruke u opštom slučaju, nego i sama zaglavja koja su dodata u određeno sekciju, u niše sekcijske poroke. Tako da, dakle, tomenom generalno služi, dakle, ta i pod tip sami poruka. Ok, ovo bio jedan primar, kako izgleda ta višniseksijska poruka, odnosno njen format, da smo prosto imali kriliku da vidimo i sve one pojedinačne, odnosno, da kažem vrste poruka, tipove podataka koji se šalju i prosto smo je to to videli na nekom primar. Inače sve ove poruke, dakle, možemo da posmatram u neke dve forme, a to je praklično da kada kreiramo samo poruku na nekom sistemu, dakle, koja je zavisio od konkretnog sistema na kojem je kreirana, to se naziva izvornom formom neke poruke, zato što se koristi neki set karaktera koji je zaristan, možda za taj sistem i tako dalje. I to u principu nije nešto što može biti interpretirano na bilom kom sistemu. Zbog toga je potrebno svaku tako poruku prevesti u neku kanoričku formu koja je prosto standardizovan, i koja je se upravo, dakle, nakon prenosa takve poruke po neku, principu, konverziu, kanoničku formu, tako poruka se šalje, dolazi na stranu prijema i tamo se ponovot transformiše iz odgovarajuće kanoničke forme u izvornu formu koja je karakteristično sada za taj sistem, gde ponovot, dakle, sad je do revarzibilni proces u odgovarajući set karakter za dati sistem, zatim recimo za neku depopresiji, uz avisno sve toga koji algoritm se implementira na tom sistemu i različite generalne transformacije, sadržaja i dodatnih informacija koja se nalaza u samog porućima. Što se diče funkcionalisti? Ova sam već reakla u samom uvodu. Definišamo neki funkcionalisti koje se možda zove nekako drugarčije, ali u principu rada isti posao ili sličom posao, kao što je stvar koj te geteja. Zato što u krajim slučaju, dakle, ono što nam i najbitnije, da možemo da uredimo sigurno nekoj bezbeđivanje tajnosti samih podataka, ali se drugi strana jasno i podpisivanje, kako bi smo prosto naravno garantovali, koja poslo o samog poruku i da poruka na neki način nije izmenu. I tako ovom funkcije S-Majma zovemo, dakle, obmotanim podacima, dakle, o toh da prva funkcija koja je zapravo podrazumeva šifrovanje. Odnosno šifrovanje, sadržuje same poruke, dakle, tjučeva koji se koriste za šifrovanje, sadržuje same poruke i dakle dodatno podatke koji se pripremaju, da bi se slali stranama na prijem. Vidaćete malo kasnije, kako, odnosno, vidjet ćemo malo kasnije, ili kako to funkcioniše malo detaljnije, ali u principu vellmo slično kao što je bio slučaj i kod PGP. Što zdiče potpisanih podataka, dakle, sam potpis se ponovog formira, tako što se napravi neki potpisame poruke, odnosno izgeneriše se neka hash prednost i ona se šifruje privatim pljučam samog autora porke. Zatim naravno rade se neko kodiranje, da bi se sama poroka poslala na prijemnu stranu, gde je onda prosto ukoliko se uokul u ovih potpisanih podataka kodira i sam sadržaj i potpis, onda je jasno da neko treću strana koja je presretna, dakle, poruku ukoliko ne implementira, S-mime jednostavno ne može da vidi samog poruku, jer je izvršena neko kodiranje. Samog kodiranje može biti izvršeno i isključivo nad potpisom, a ne nad samim sadržajom poruke i u tom slučaju definišemo nešto, ko su zovu čisto potpisanih podaci, a to znači, formiranje potpisa za samog poruku na identiča način, kao što je to bio slučaj malo pre i kao što je to vlučaj i kod PGP, dakle, kreiranjem hasha i nakon toga šifrovanjem top hasha, privatim ključom, međutim u ovom slučaju se kodiranje radi izključiv i vornad samim potpisom, ne nad porukom i na taj način je poruka dostopna, ukoliko nije šifrovana i ukoliko sama poruka nije na neki način kodiranja, dostopna je i nekoj trećoj strani koja bit tako poruku mogla da prečita, ali sam potpis nije, pa u tom slučaju ne bi mogla biti verificovanja. I naravno moguće je obezbediti i potpisivanje i obmotavanje podata, ka što znači praktično i potpisivanje i šifrovanje samih poruka, gdje se naravno prostove funkcionalisti mogu uginždavati, tako da se šifrovanje podaci mogu podpisivati, a onda ponovno podpisani podaci se mogu šifrovati i tako koliko godije potrebno. One što je slučaj kod S-majma je da imamo jednu situaciju koja je veonal slična kao kod P-G-P-A, a to je da mi ove zapravo ne definišamo neke specialne algoritme koji su pravjeni za S-majm, već ponovno integrišamo različite algoritme koje se koriste za obezbediđivanje ovih podinačnih funkcionalisti. I onda pošto tipično postoji više različiti ih algoritama koji se mogu implementirati, postoji ovako jedan spisek gdje prosto za svaku kod i načinu funkcionalnost postoji neki neki ili skup algoritama koji se moraju implementirati i svakoku podržava S-majm da mora imati implementiranu te algoritme da ima obezbediđivanje neke funkcionalisti. A sa druge strane, naravno, postoji neki skup algoritama koji se preporučuju da budu implementirani, ali prosto nisu obovezni. I ovu, naravno, kasnije ima utice kada se dati algoritme konkretno koriste. I kao što vidite, dakle recimo, mora biti implementiran permission s a 256, može biti implementiran s a 1, zanim mora biti implementiran r s a u kombinaciji s s h 256, ali može biti implementiran dsa. I kao što vidite, razne neke druge kombinacije. U principu, ono što je, da kažem, razlog za ovako nešto je što prosto, naravno, sam protokol, da bi se smatrao, odnosno, ja tako da kruca, ove sistem da bi se smatrao bezbednim za obezbediđivanju pojedinačne funkcionalisti. Ose kao i pgp oslanja na implementaciji pojedinočnih algoritama koji se smatraju bezbednim za svoju kategori, odnosno za funkcionalnost koji obezbediđuju. Zbog toga dakle jasno, moramo implementirati neke algoritme koji su do i koji su povzda. Međutim, prosto postoji neki minimum povzdanosti koji se mora obezbediti, a postoji i povzdanost na nekom višom njubou ili neka boljega kombinacija algoritama koji se mogu koristiti. I na taj način se samo konkretno šifrovanje ili otertikacija može napraviti sigurnim ili bržim, ili šta god. Međutim, to nije obaveza i ne moraju svi ovi algoritmi biti implementirani i u zavisnosti od toga, naravno, postoji implikacije porišćenja pojedinočnih algoritama. E, a upravo te implikacije su kako ćemo znaati koji algoritm da koristim. Koji algoritm dakle, mi možemo da koristimo, odnosno, kada Že mi i nemiste mi kao koristici, zato što naravno koristicim koji išalju poruku, prosto se naravno nebrinu o tem stvarima, nebrinu se o tome, koji algoritmi su implementirani u posledini. Već, stvupostoji nešto što se zove agent po šijoca ili agent pri noca, gde je naravno se vodi ročuna o tome, koji algoritmi se koriste za implementaciju svih ovi pojedinočnih funkcionaciju. I onda, u principu, glavna odluka je o tome da li se koristi neki od ovih još jačih algoritama ili se koriste algoritmi, za koja sigurno znamo, da prosto su implementirani na drugoj strani, jer su oni mast, ako se implementiram očite S-Mine protocol. I u tom slučaju prosto agent mora da poštu je neka stvravila, prilikom odlučivanja koji od ovih algoritama će iskoristiti. Sa jedna stranjem, koliko agent ima listu algoritama, koji su implementirani na strani prijama, znači ima dostupnu nekakvu listu, da se naleze sviji od ovih algoritama, koji se implementiraju
 koji je dinačne funkcionalnosti, onda naravno da ću on verovatno želiti da izbejre onej najboljij algoritm koji ima da kljeta prijemna strana, ako i takođe postoji i na strani slanja, jer se da kao on koristi, recimo, u svrhu šikrovanja na strani slanja, a u svrhu deši provanja na strani prijemna. Dakle, to je nešto što oba agenta prosto moraju da implementiraju. Međutim, problem se naravno javlja ako te informacije nisu dostopne i, dok li naravno vroje moguće da one nisu dostopne i tada prosto agent može da, ukoliko, ipak ima neku dostopno informaciju o tome šta može da koristi prijemna strana, a tu dostopno informaciju može da ima recimo, prema tome, ukoliko je prethodno postojila komunikacije između date dve strane, znači strane onoga košaje poruku i prijemne strane, može da je nekoj su korišćeni i prethodno. Zato što ponevo, prethodno, odnosno, nekoj bit prethodnih situacija razmen elektronske pošte, agend je provozio kroz isti ovakav sistem odlučivanja, izbog toga se možemo osponiti na tu prethodnom odlogu. Sa druge strane, ako se komunikacija teku spostavlja, prosto agent ne ima takva informacije, onda, dakle, tu postoji odluka, da li će koristiti neko od oni, neki od oni, boljih algoritama koji on implementira i na taj način će prosto probati da pošljaju takve podatke, dakle, recimo, šifrovane podatke, nekim od oni kombinacija algoritama, koji su označeni kao shud, ali u suštili nikon i u obovozi da ih implementira, i u tom slučaju se, naravno, može desiti da na strani prijama takva poruka može biti prihvaćena, može biti desiprova na datim algoritmom, jer je agend primovacu opravo implementira dati algoritam, ali se, naravno, može desiti i da on jednostavno nema dati algoritam i da ga ne može, recimo, dekriptovati poruku ili ne može interpretirati poruku datim algoritmom pojespetifitira na strani stvanja. I u tom slučaju, dakle, može, naravno, takva poruka se onda ne može prihvatiti, a u tom slučaju jednostavno agend prosto pošljajuca, nema drugi način, osim da iskoristi neki od algoritama koji primovac mora implementirati, koji su označeni samast i tada će, naravno, biti siguran da će one na strani prijama moći tako poruku da interpretira i prihvati. E, sad, naravno, treće, korake u potponosti mogao biti preskočen i mogao je agend odnov da odluči da će da iskoristi neki od algoritama koji su označeni kao mast i jednostavno bez tog koraka ispetivanja, da ali neko može da interpretira neki algoritam, ali ne zato što za ovaj mast, ako sigurno zna da je obavezem i da takva poruka sigurno može biti prindena. Ok. I sad smo taman došli do pauze. Ako ne, onda idemo na pauzu, pa se vidimo za 15 minuta. E, pa zdravio još jednom. Nadam se da ste s odmorili na pauzi, da ste stremni da sastošate šo u prezentaciju do kraja. Dakle, nadalje ću pričati ja, a ono o čemu ćemo nadalje pričati jeste prosto koje su sad to novi tipovi main tipova sadaržaja koje es main uveli, kako se oni koriste da bi se obezbedile sve, one funkcionalnosti koje su tu kratko spomenuli sa majom, tču su oni obmotanih podataka, podpisanih podataka i tako dalje. I onda da vidimo na pokon kako izgledaju detalji tih funkcionalnosti i da popričamo malo i ovde u načinima za prosto neku administraciju svih onih ključeva i ostalih stvari koji su nam potrebne da bi smo i sa jedne strane slali poruki, sa druge strani primali poruki u okr-us maina. Dakle, sve ovo smo pričali okr-up PGP i ovde ćemo prosto onda malo manje da se sadržavamo na svim funkcionalnostima, jer prosto ideje nekako slična, gotovo ista za neke konkretne funkcionalnosti, ali prosto ćemo se pocetiti svakak u tih funkcionalnosti, a za sve ono što je novo ovde i što se razliku odnosu na PGP, i da smo malo detaljnije prosto pro komentarisati. Tako da, za početak prosto potrebno je da vidimo, u kratku pa ćemo pričati malo detaljnije koji su to novi tipovi sadržaja koje s maina nudi, a u okr-u maina poruki mogu da se nekako stave ono zaglavlje u kojem ste pričali na predhodnom času. I te sve tipove, odnosno njiho je pod tipove, znažemo da vidimo ovde u okr-u tabela. I sad nećemo se konkretno ovde zadržavati na svakom tipu ovaj tabel, jer ćemo na naradnim slajdovima vidjeti kako se oni koriste, ali prosto razlog za njihovo uvođenje je prosto mogućnost izvršavanja svih onih funkcionalnosti koje ste spomenuli na predhodnom času, koje se tiču i podpisivanja podataka i obmotavanja podataka i nekih drugih funkcionalnosti, sećete se sa strane PGBa šta je kompresija, a i prosto ovde imamo onu neku noviju vrsto funkcionalnosti koje se tiče o njih čisto podpisanih podataka, pa prosto ovde moramo da vidimo kako krajiramo te čisto podpisane podatke. Što se tiče obmotanih i podpisanih, o njih obično podpisanih podataka, prosto takva poruka u sebi mora da sadrži tip application i pod tip koji je konkretno ovde. Na vedanu pitanju je jedan public key cryptography specification 7m pod tip podataka, gde za parametar novog neku parametra koji zovemo smim treba da navedemo ili sign data, u koliko taj antitet tu u celu poruku želimo da podpisemo odnosno envelope data, u koliko tu poruku odnosno taj antitet želimo da nkryptujemo i time obezbedimo tajnost. Tako da što se tiče tih funkcionalnosti i stvari jednostavna, prosto u zaglavlja dodamo još jedan ova i niz parametara, a onda poruku prosto napisemo po načinima kako ste videli na predhodnom. Času islično i za kompresiju prosto posto jedan nov tip poruke. Što se tiče tipa generate sign data, dakle o tome ćemo pričati malo kasnije kada budemo spomenuli konkretne radce sertifikatima, dakle prosto rekao sam da ćemo na kraju časa popričati kako to sve možemo da čuva moj informacije o javnim pjučevima ljudi sa kojima komuniciramo i o našim nekim privatnim i javnim parovima pjučeva. I tu će nam služiti ti sertifikati, pa prosto moramo nekako da radimo sa njim okuraj smajma, podatle i ova i pod tip poruke, a što se tiče čisto podpisanih podata, dakle to je praktično poruka koja se sastoji iz dva dela, gde je jedan del sama poruka koja kažta je maja rekla možete da pročitate, a drugi del je podpis te poruke koji se prosto onda kodira i šalja, dakle na stranu prijema, tako da nekako prosto dobio tu poruku može da pročita sadaržaj poruke i bez prethodne verifikacija, naravno, u koliku implementira smajm sa strane prijema, može da verificuje poruku. Tako da je tip poruke naravno multi-part, jer se sastojate iz dva dela, gdok je pod tip poruke sign, da bi se prosto naznačila do u ovom trenutku se radi o poruci koja će imati baš dva dela, gde će jedan od tih delova da bude taj čist podpis. I taj čist podpis vidat ćemo kako se generiše, u svakom slučaju za njega postoji konkretan, takođe pod tipa application, tipa sadaržaja majim poruke i njegov smajim parametar postoji i navedanje ovdje u tabelji, a ove drugi deo poruke vidat ćemo kako se krajira. Takve, generalno već sam spomenu, ali to ukratko, dakle prosto smajmo sigurava majim antitet ili potpisom ili šifrovanjem ili korišćenje oba servisa, gdje se prosto taj majim antitet priprema kao što ste videli na prethodnom času po njim nekim pravilima, a onda se koriste sam antitet i dodatni neki podaci kao što su s jedne strane informacije o javnim ključavima koji smo ili koristi ili koji treba da se koriste na strani prijama, to smo sve pričali u PGP-u, ali ovde dodatno identificatori algoritma koji se koriste. Nekako pomoću smajma obrađuju, formiraju taj neki pk c s, odnosno public hi, kriptografi, univerzificacijan objekat koji se onda tretira kao sadržaj poruk je dodaje u samu poruku i onda pretvara sve to u kanonički oblik. Na taj način smo prosto obradili taj majim antitet i on je sad ospreman zakorišćenje u smajim protokolu. I sad da nadaljećemo prosto da vidimo detalje svih ovi funkcionalnosti koje smo spomenuli, pa da vidimo i neke primera kako se otvorete te konkretne poruke. Što se tiče obmutavanja podata kao odnosno tipa podata koje zovemo obmutan i podaci, koraci za pripremu su gotovo i den...
 identični kao i koraci za pripremu kod obezbeđivanja tajnosti okviru PGP-a sa nekim svih tim razlikama. Dakle, ono što prvo treba duredimo, sad, nažalost, ovde neamo šemu ali možete da se priseti tot prilik je kako izgleda šema, jeste da generišemo neki slučajan ključ sesije koji ćemo koristiti isključivo za slanje te jedne konkretne poruke i tim ključom sesije ćemo kasnije šifrovatit u poruku odnosno obmotati podatke, dakle tako se ta funkcionalnost ovdje uaj smajmu zove. Naravno treba da odaberemo o koonim pravilima koji ste videli na predkljom času neki specifican simetrični algoritm zaštite koji ćemo koristiti kada ovojim ključom sesije budemo šifrovali samu poruku, a onda prosto za svakog odprimavca okoliko ih imamo više, mi šifrujemo sam ključ sesije, javnim ključom konkretnog primavca da bi prosto svaki primalac na strani prijema svojim privatnim ključem mogao da dohvati taj ključ sesije kojim će dalje da dohvati sadržaj cele poruke. Naravno poruka se šifruje pomoć u ključa sesije, ali dodatno se za svaku primavca da pripremaj taj neki blok koji se zove, odnosno koji predstavlja nekoliko informacija o samom primavcu poruke i sadrži sve ono što je potrebno da bi primalac na strani prijema mogao da deshifruje tu poruku, odnosno da nekako odmota ove podatke. I to su slične ono informacije kao i kod PGP, dakle prosto treba da dostavimo i identifikatori s vih algoritama koji su korišćani s jedne strane da se šifruje ključ sesije nekima simetričnim algoritmom ali sa druge strane i neki identifikator algoritma koji se koristio za šifrovanje same poruke, odnosno neki identifikator simetričnog algoritma zaštite i naravno ceo šifrovanje ključ sesije se kao i kod PGP i ovde dostavlja kroz poruku i dodatno da bi smo znali sa strane prijema koji od naših privatnih ključa treba da upotrebimo, ukoliko ih imamo više, nekako nam treba identifikator i javnog ključa primavca gde, pošto ovde radimo sa certifikatima, vidite ćemo kasnije, dodatno se u poruci osim identifikator algoritama i ključa sesije dostavlja identifikator, certifikata, javnog ključa primavca da bi prosto primalac na strane prijema znao kojim svojim privatnim ključom da deshifruje prosto ovu poruku, odnosno sam ključ sesije. Sviti podaci se pakuju i onda se prosto koduju nekim o konkretnim kondiranjem, napr. PES-64 i naravno onda se prosto i šalju na stranu prijema gde, na strane prijema se ove ovi koraci rado na nekom inverznom redosledu, dakle to sad već možete da pripostavite kako, prvo se skida sama konverzija, onda pomoću privotnog ključa primavca se dokvata ključ sesije, onda tim ključom sesije se prosto deshifruje sama poruka. Naravno koji ćemo algoritam koristiti na strane prijema i imamo zapisano u ovom bloku informacija o primavcu. Što se tiče podpisanih podata, kada klo, opet slično, kod PGP, pa ćemo proći kroz ove korake, bedneke šeme, dakle prosto opet je nekako potrebno na ome načine sa predkonog časa odabrati algoritm koji se koristi za podpisivanje same poruke, odnosno algoritme, jedne za strane heširanja, druge za konkretno podpis tog heša. Tako da se prvo opet izračunava podpis same poruke, dakle neki heš kod, a onda se taj podpis poruke šifru je privotnim ključom po šiljavca, dakle isto kao i kod PGP, sam kod se šifruo tim privotnim ključom, pa će na strani prijema prosto morati da se verificuje taj kod, tako što će se dešifruova ti prosto javnim ključom tog onog koja podpisala tu poruku, da bi smo provarili da li je baš ta osoba podpisala tu poruku, jer samo ta poruka ima, samo taj koristnik ima, da ima taj konkretan, privotan ključ i onda ćemo tog da uporadimo sa onim što smo mi izgenericali na strani prijema kao hešte i ste poruke koji dobijemo. Naravno i ovde na strani prijema da bi smo mogli da prosto sve ove postupke, odnosno ove korake odradimo i ovde na strani slanja prosto pripremamo taj neki blok informacija o podpisivaču koji se opet sa stoji iz svih mogućih identifikatora algoritama koji su korišćeni, a ovom sluči to su algoritmi koji su korišćeni za kriranje samog podpisa, odnosno za šifrovanje samog podpisa, dakle neki asimetrični algoritm. Naravno dostavlja se i sam podpis da bi smo mogli da ga verifi kojemo na strani prijema i ponovno da bi smo od svih mogućih javnih ključeva koristnika koji je podpisao poruku koji mi na strani prijema imamo nekom našom, nekoj našoji tabeli, intern, nekoj ćemo videti kak u izgleda, da znamo koji od svih tih da se iskoristi prosto opet u ovom informacijama, moramo nekako da dostavimo i sertifikati javnog ključa, onog koja podpisao poruku da bi smo mogli na isprava način da je verifi kojemo na strani prijena. Ukoliko je potrebno, a videli ste, a videt ćemo i ovde, dakle da se kada pričemo sertifikatima pričemo X509, konkretno verzi 3 sertifikata i pričali ste na predavanjima, nadam se da možemo da imamo i neki, da kažem, Lana sertifikata do neku konkretnog autoriteta za sertifikate. Ukoliko je tako nešto potrebno realizovati ovde da bi smo prosto došli do konkretnog javnog ključa i ovde možemo da imamo u mestu jednog sertifikata javnog ključa set sertifikata javnih ključeva od kojih se generiše taj Lana do nekoga autoriteta za sertifikata ili do nekog poznatog korena, za koji smo sigurni da smemo da mu verujemo. Naravno svea ova se konverto je pomoću base 64 konverzija na strane slanja i opet na strani prijema se provo skida konverzija, a onda se Korac i radi onako, ko sam spomenu i na početku, dakle prosto se javnim ključem podpisivača desifruje podpis i onda verificuje poruka na isti način kao i kod PGPA. Koji algoritmi se koriste, opet izlačimo iz ovih informacija podpisivaču i koji javni ključ koristimo, opet izlačimo iz tih informacija. I ovde imamo neka dva primera, dakle na govrnje slici primer za obmotan, na donje slici za podpisane podatke, dakle konkretno neku poruku, gde prosto treba da vidimo da je sad tip samog sadržaja u oba slučaja application, odnosno sub pod tip je pkac s 7m, dakle kao što smo videli ono i neku tabeli, gde prosto za ovaj neki parametar s mime type treba da navedemo ili envelope data, okoliko to znači da prosto naša poruka je sadar obmotan, odnosno bezbeđene tajnost, odnosno signed data, okoliko je prosto to je naši poruci koji šaljemo potrebno obezbediti neku autentikaciju i onda još neke druge parametre, dakle koje smo videli na predhodnim primerima i naravno sam sadarže poruke koje sad, kao što vidite nekako šifrovana, dakle ili podpis, ili sama poruka na načinie koje smo videli na predhodnim slajdom. Ešto se tiče čisto podpisivanja, dakle to je nešto drugačije, nešto novo što imamo ovdje ko desmaima, da jeste sam malo malo ispomenuli kako funkcioniša čisto podpisivanja, odnosno čemu služi, ovdje ćemo da vidimo opet konkretno jedan primer, čisto podpisivanja i da vidimo ukratko i korake koje su potrebni da bi čisto podpisali poruku, dakle prosto poruka nekad može da bude vidljiva na svakome koje nekako dobije, ali da prosto imamo jedan deo u toj poruci koji predstavlja naš neki potpisi i za to služi čisto potpisani podaci. Rekli smo kada smo gledali ono tabelu da se ovde prosto pošto se poruka sosto iz dva dela, to je baš šta poruka koji želim moj da vidimo i sam odvojen potpis porukje koristi više seksijska poruka i to baš šta je neki nov pod tip koji je karakterističan za s majm, a to je ona i signed pod tip više seksijske poruke koji nismo videli u okviru majma. I sada ta poruka kao što reko, ima dva dela, dakle, taj prvi del može da bude bilo koj majm tipa poruke, dakle, absolutno nije nibitno, ali ono što je bitno jeste da se pripremi tako da se neće menjati prilikom tog nekog prenosa, dakle mora da se koristi konkretno ili base64 ili quoted printable kodiranje, ja stavam je zbog čega, ali prosto, dakle, taj deo, odnosno, taj deo koji smo sada kodirali se na isti način po istim koracima obrađu je kao i ko od obezbeđivanja podpisanih podataka, dakle, o čemu smo malo prepričali na predtkonom slajdu i prosto, taj deo čini prosto...
 neki objekat koji jeste u formatu podpisanih podataka, dakle jer smo obezbedili sve one, odnosno išli smo po svim onim koracima, ali sada ostavljamo prazan sadržaj poruke. Zašto prazan sadržaj poruke pa zato što prosto poruku želimo da ubacimo u drugi deo celeve ove majne poruke, a da nam ove i deo poruke koji smo, koji smo provukli kroz sve one korake za obezbezđivanja, autentikacija, odnosno podpisa odvojimo od same poruke. Tako da prosto sam sadržaj poruke ovde prazan i taj objekat predstavlja nepovezani podpis, nepovezani podpis poruke. Naravno drugi deo, te više seksijski podpis, neporuke, se koduje takođe pomoću nekog kodiranja, naprim. base64 i on takođe ima neki tip sadržaja, koji smo vidili i one tabeli u ovom slučaju, to je tip sadržaja application, gde je pod tip opet, onaj prkac sa 7 signacher, koji nam označava da je prosto ovo deo poruke, gde imamo nekde odvojenu podpisu u nekom drugom delu ove više seksijskih poruke. Naravno verificacija bi se ovde radila, tako što se izračuna podpis za taj prvi deo poruke, koji nam je otvoren i onda desifrujimo onaj podpis iz drugog dela, dakle onaj odvojeni podpis koji imamo i uporedimo te dve vrednosti, dakle to pretpostavljam da vam je jasno. Kako izgleda konkretan primer, dakle možemo da vidimo ovdje na slajdu, vidimo da je u pitanju neka više seksijska poruka, gde nam je pod tip baš signed, da bi se znalo da to nisu neke seksije poruke, koji smo mi je to tako hteli da podelim, nego prosto postoje baš dve seksije, gde je jedna taj podpis koji je odvojen, a druga seksija baš sama poruka. I onda, naravno, opet treba pošto više seksijska poruka da navedemo i neke graničniki koji odvoja te dve seksije, ovdje smo rekli da to, napr. neki boundary 42 i vidimo da ovdje imamo odvojeni te dve seksije, gde je prva seksija sama poruka, koja može da ima neki svoj tip, dakle ne mora, dakle u koliko želimo podrozumevan tip i naravno ima svoj sadrže, kao što vidite, on je čitljiv sakome ko ovu poruku nekako preuzme, odnosno dohvatije, a ovaj drugi deo poruk je, kažemo, taj odvojen podpis. I taj odvojen podpis mora da ima svoj poseban tip podataka, to je application, pa kada se s sedam signature tip podataka i prosto on enkodovan uspomodž base 64 ili quoted printable načina kodiranje, kao što vidimo, taj podpis je nekako nečitljiv koristniku i prosto predstavlja podpis ove ovde poruke, ali odvojen od same poruke. I onda smo rekli na strani prijem, abi smo mi uzeli ovu poruku koja možemo da vidimo i provokli kroz isto hash funkciju, koju ćemo znati tako što ćemo pročitati i svih onih informacija od podpisivaču koje algoritmi su korišćeni, a ovu ovde poruku, dakle, ovaj drugi deo poruke deshifruemo, korista će javnik ljuč podpisivača i onda uporedimo ta dva i onda vidimo dalje tu poruku napisao baš ona i koji je poruku i poslao, da bi smo verificovali poruku. Tako da to je taj nov neki tip, odnosno način podpisivanja, gde odvajamo ta dva dela. Naravno, ono što jeste bitno, što ćemo sad nadalje da objasnimo malo detaljnije, jeste da popričemo malo o konkretno certifikatima javnih ključa, odnosno kako s jedne strane čuvamo te certifikate i z druge strane kako prosto se registrujemo za te certifikate u oku u S-Mime. Dakle, prosto korisnik koji korist S-Mime mora nekako da certifikuje svoj javnih ključ. Odnosno da se prijavi, odnosno registruje nekom autoritetu za certifikate, da bi prosto bilo kokojom komunikaciji sa tim koristnikom od istog tog autoriteta za certifikate ili po nekom lancu, u nekog drugog autoriteta dohvatio konkretan certifikat javnog ključa, tog nekog koristnika s kojem komuniciramo, da bi smo mogli ili da deshifuamo poruku ili da autentikuemo, odnosno verificujemo poruku kojoj smo mi primili. Tako da je ono što je prvo potrebno da uradimo kada generišemo već neki naš par javnog i privatnog ključa, jeste da prosto pošaljemo neki zahtev za registraciju tog našeg javnog ključa. Sam zahtev predstavlja konkretno jednu S-Mime poruku i to smo isto videli u onoj tabeli, ovdje ćemo da ponovimo, da je prosto sam zahtev ponova poruka, či je tip, poruk i application, a sam odnosno pod tip, po kada se s deset S-Mime, koji prosto predstavlja, odnosno označala da naša poruka predstavlja zahtev za registraciju našeg javnog ključa koji će se naći u toj poruci. Sam zahtev bi trebalo da sadrži jedan blok podataka, koji ima i sadrži informacije o samom zahtevu za tim sertifikatom, gde imamo konkretan identifikator algoritma, koji smo koristili da generišemo javni i privatni ključ i naravno naš šifrovani privatni ključ, koristeći privatom ključ po šilj awca, da bi prosto autoritet, odnosno autoritet, pardon za sertifikate mogo svojim privatnim ključom da desifro je to i da poglada koja je to naš ključ i da ga nekako registruje. Naravno, osim tih informacija možemo da imamo i neke dodatne informacije, kao što su ime onog kojog entiteta, či javni ključ treba da bude sertifico, ono i neke druge informacije, ono što se vraća kao povratna poruka, jeste baš taj sertifikat ili ukoliko je ovo poruka kojem želimo da povučemo naše sertifikate vraće se neka lista povučenih sertifikata, opet sama smajem poruka sa nekim konkretnim tipom porukje i nekim konkretnim smajem type parametrov. Što se tiče samih sertifikata, kao što sam reko, dakle u pitanju su X509 sertifikati, konkretno koristeći verzi u 3 u koji ste pričali na predavanjima detaljno, tako da su oni ti koji se koriste za sertifikovanje konkretnih javnih ključeva. A što se tiče same šeme za upravljanje ključevima koju se koristi u S-Majemu, dakle kao što smo od PGP-a imali one prste nove privatnih i javnih ključeva, ovde je sama šema liči na PGP-u mrežu poverenja, dakle koristeći te prste nove, ali je ipak hybridna, tako da osim te PGP-ove mreže poverenja koristi X509 hierarchiju sertifikata, o koje ste pričali na predavanju. Ali kao što smo pričali u PGP modelu i ovde prosto se ostavlja koristnicima, odnosno kljentima S-Majm protokola da sami nekako održavaju te sertifikate, što su svoje, što tuže sertifikate javnih ključeva koristnika, sa kojima komuniciraju u zlistu povučenih sertifikata, u koliko takve postoje, tako da je odgovornost ostavlja na koristniku, dakle odgovornost je lokalno, što ne zmači da baš svaki koristnik mora da nekako vodi ročuna o svojim sertifikatima, ali prosto može da se napravi neka hierarchija te odgovornosti, tako da u nekoj konkretne firme imamo administratora koji prosto održava sve te sertifikate. Ali ono što je bitno jeste da sam S-Majm protokol ne obezbeđuju, odnosno ne održava sertifikate, nego je to ostavljano samim koristnicima. Sam koristnik ima nekoliko funkcionalnosti koje mu S-Majmo bezbeđuje da se upravlja konkretno ključevima, a to je prosto, to su prosto sledeće funkcionalnosti. Dakle, s jedne strane imamo opciju za generisanje ključeva naravno, dakle kada koristnik želi da stupio komunikaciju sa nekim, on mora da prosto posebno je svoj par privatnih i javnih ključeva, da je vrdeće javnih ključeva da registruje. Tako da prosto funkcije om generisanja ključeva koristnik generiše taj par ključeva. I ono što mora da bude ubezbeđeno, jeste da se taj par ključeva generiše iz dobrog izvora nekog nedeterminističkog slučajnog ulaza i da taj par ključeva naravno treba da bude zaštičen. A ono što se predlaže koristnicima, jeste da ti ključevi koji se generiše naprim. are sa algoritmom, budu neke veličine naprim. od 768.000 do 24 bita, ono što nesma nikako da ne bude ispunjeno, jeste da se slučajno generiše dužina koja je manja od 512 bita jer se onda to nesmatra dovoljno povuznanim ključe.
 kad zase generiše ključ, potrebno je taj ključ reagistrovat i kod nekoga autoriteta za certifikate, kako bi se nazad dobio baš X509 certifikat tog nekog javnog ključa i onda bi mogao dalje da se koristi. I naravno prosto potrebno je bezbediti nekako funkcionalnosti čuvanja svojih ličnih certifikata i dohvatanje certifikata koristnika se kojima komuniciramo, gdje prosto koristnik ima neku svoju lokalno listu certifikata, koja se koristi da se verifi koji što dolazeći potpisi, što da se šifru i odlazeće porukje i kašto smo rekli, ta odgovornost je ostavljena ili koristniku ili mnekom administratoru u toj nekoj firmi, koji onda za više koristnika održava takav sistema. Naravno, kada pričamo autoritetima za certifikate, verovatnosti pričali na predavanjima, ali, ove da spomenemo, da postoji doasta kompanija koja pruže usluge certifikovanja, ključa odnosno pruže usluge autoriteta za certifikate, da je veri sign prosto jedna od najrozprostranjenijih kompanija koja pruže takve usluge koja naminja na da prosto bude kompata bilna s s majmom i sa još mnogodrugih različitih aplikacija. Veri sign konkretno izdajek s 509 certifikate, sa nekim konkretnim digitalnim ID-om, koji sadrži nekoliko informacija, a to su, naravno, ime odnosno neki alija samog vlasnika uz konkreta njegov jamni ključ, serijski broj tog konkretnog digitalnog ID-a i datomi isteka, dakle, tog digitalnog ID-a posle kojeg taj ključ više ne može da se koristi ukoliko je ono graničen vremenski. Naravno, tu imamo ime autoriteta koji je izdal вообще taj digitalni ID i konkretno potpis toga autoriteta, da bi smo u svakom trenutku mogli da verifi kojemo da je taj certifikat podpisao, bas veri sign, odnosno bas veri sign kompanije. Naravno, tu možemo da imamo neke dodatne, neobavezne podatke, kao što su i adresa samog vlasnika ili mail, samog vlasnika uz neke dodatne informacije o tom vlasniku i jednog ključa, odnosno korisniku, kao što su, vidim, ovde naprime, u zemlja, poštanski broj, datom rađenja, odnosno godište i pol i tako daje. Ali, dakle, to su sve neobavezni podaci. I za kraj prosto da spomenemo da S-mime, iako je standardizovan, dakle, svakodnemno se uokru njega javljaju neke nove ideje, da se prosto poboljšaju usluge koje on pruže i da sam S-mime nekako pruže neke nove usluge u vidu nekih sigurnosnijih servisa, tako da ovde su navedane neke ideje, koji su se pojavile u predhodno vreme, dakle, kao što su potpisa na dostavnica, gde prosto, dakle, kad aprimimo poruku nekog korisnika, mi zahtevamo da se prosto celokupna poruka sa potpisom pošelja kao odgovor, da bi prosto porisnik koji je poslao samu poruku, koji ima od dokaz da je takva poruka uopšta isporučena, dakle, kao neki handshake i kažem, prosto, takav servis bi smo zvali signed, odnosno, podpisana dostavnica. Sa druge strane, druga neka ideja koja se ovde javlja jeste oznaka nivosi gurnosti, koja može da se koristi, uokviru poruk je da o mogući prosto korisniku doznači koliko su neki podaci i neki dokonkratno o setljivi, da bi prosto se označili neki dosto setljivi podaci i odvojili od nekih manj o setljivih podata, ka što se može koristiti, naprim. za kontrolu pristupa, da se prosto kaže koji tačno korisnici u nekoj kompani smaju opšta da prime ovaku poruku, a koji korisnici nesmaju, dakle, da su to neki administrator ili obični korisnici u firmi ili neki drugi tipovi. Korisnika naravno ne mora da se koristi samo za kontrolu pristupa, to može da bude neka oznaka opistnog tipa ili nekom numeričku tipa na skali od jedan do nekog brojak, da se opet na neki način označava nivosigurnosti te poru. I poslednja ideja koja se pojavila, je su mailing liste, dakle, o tome, mislim, mailing listama ste sigurno čuli u toku ovih studijana na ETF-u, tako da znate od prilike šta je to, prosto da nebi korisnik koji želi da pošalje poruku ka nekoliko različitih primavca, da nebi on lično morao da pripremati poruke za svakog od tih primavca pojedinočno, koristeći mailing liste sama poruka bi se slala nekom agentu, nekem mailing liste koji bi onda to uradio u mestu primavca, u mestu pošiljavca, dakle, prosto on pripremio tu jednu te istu poruku za svakog primavca i prosledio svim primavcima, jer prosto onda se to sve nekako, taj deo radi kot konkretnog agenta, i o tome ne mora onda da vodiram računa, konkretan korisnik koji šalje tu poruku, odnosno njegu i režiski troškov i su na neki način smajniti. I time bi smo praktično završili S-smaj. Dakle, i ako smo završili malo ranje, mi ćemo ovde sada zastanemo da vas pitamo, da li imate neko pitanje. Oko S-smajmo, oko PGP, dakle, pošto su dosta slični, možda vam se sad pojavilo neko pitanje i iz PGP. Dakle, da li imate neko pitanje. Dobro, ako nema pitanja, mi bi smo ovde završili čas. Pa se verovatno sljedeće nedeđe ne vidimo sa obzirom da nam je kolokvim s kanadeljana S-yu i mi smo u obavezama i verovatno ćemo i u periodu ovih časova imati neke kolokvime. Tako da verovatno ćemo napraviti pauzu od jedne nedeđe. Čisto da bi smo i sa RT, i s M-S, i s M-N nastavili istim tempo, mali dakle, prosto obavezite ćemo vas dodatno kada će biti sledećim čas. A to do sledećeg vidženja učite, uživajte i pozdrav od menem. Ćau, čau.
