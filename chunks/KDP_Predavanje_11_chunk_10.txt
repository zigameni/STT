 možete vidjeti u materialime za vežbe ili unutar ono guđbeni kako se zove konkurent distribuja na programi. Kako bi smo ovde mogli da realizujemo ono što bi odgovaralo ticket algoritm? Znači kako bi ovde mogalo da se realizuje ticket algoritm? Kako ritm se ovde vrlo, vrlo jednostavno realizuje a što mi treba da radimo? Zaborevo je kako se ono zove. My ID. Odradimo ID. Bilo in, bilo rit. Uvečam ovo ovde zajeta. Kako je vrednost ima? Oddaj smo napravili ticket algoritm. Kako je radi o taj ticket algoritm? Uzeli smo vrednost iz prostora torke, vratili smo za jednom već i kajšam, ja sad čekam. Sada ja ovde mogu da čekam i sa RID, mogu da smo suštini... Što jedno? Ali ako moram da stajim prvo IN pa RID, ako moram da stajim prvo RID, pa IN, pa mogu ja da stajim odmah i samo IN da to prevozvim iz prostora torke. Nikom drugom neće smetati, zato što će svi ostali tu biti zablokirani. I mi smo ovde napravili ticket algoritm u ovom ovde i koristici videoteku CSP. Sad je tu još potrebno da postajimo ID na početku da bude jednako 0 i da NEXT bude jednako 0 i da bi ovo ovde sve moglo da radimo u postupku inicializacijem. Ovo ovde ćete raditi na vežbama kad budete razmatrali server sa više funcije i onda treba da realizujete ticket algoritm. Odnosno da realizujete ne ticket, nego da se zahtivi obrađuju u redosledu prestizanja. To je sve što treba da realizujete da bi bilo to sve rešeno po redosledu prestizanja. Če vidite, vrlo jednostavan jezik za manipulaciju. I je jezik, to je C ili Pascal ili Java ili Fortran ili Shshart. Znači to su jezici koji već postoje, a ovde samo jedna biblioteka koja je neko napravio koje treba da olakša distribuiranu programiranje. O nekad za projekat na ovom ovde prednetu bude da se implementira linda koristici programski jezik Java. Znači se napravi Java, linda biblioteka sa odgovarjećim funkcijama i da to može da se pretražuje. Odo što ja ovde nisam rekao, a šta se je dešava ako ja dva puta odradim out? Ništa odrad, stavio sam dve torke sa istom rednoštju, to nije nikakav problem. A reko sam da ovo ovde nije samo ključ vrednost da mora jednom da se pojavi, može da se pojavi više puta. Tako da ako biste chceli na primer da simulirate semafor. To radite tako što kašte out, out, out, out, out, out, out vrednosti, odnosno imena tog semafora i stavili ste tako kažemo taj semafor u taj zajednički prostor torki. Nije baš možda najpametnije da se na taj način programira da pravi te jednostavno direktno presnikavanje semafora u biblioteku linda. Postoje mnogo efikastne i načini kako to se može da se izprogramira, pošto je ovo distribuiranu programiranje i u suštini ovdje mogućemo da radimo u suštini ovu moćnu operaciju, to je da tražemo torku po projekciji. Imamo toliko promenjevih i one imaju te i te tačno vrednosti na tim pođema i možemo da pročitamo. Znači to je mnogo bolji način za komunikaciju i za synchronizaciju, jer možemo da radimo tu projekciju i selekciju, odnosno šta gode da nije potrebno i do projekciju. I ovako ćemo morati da pročitamo sve, ali ćemo moći da radimo selekciju po tačno određenim vrednostima. I mi smo ovde završili još jednu biblioteku, još jednu, još jedan jezik, vići to ovo raditi sa koleginicama na arene nediljena vežboma. A mi ćemo na arene nediljena predavanjima videti još dve stvari, to je komunikacija koristeći R&DV i komunikacija koristeći RPC. Znači videte ćemo formalno kako to izgleda R&DV, formalno kako izgleda RPC i kako se to preslikava na neke programski jezike i videte ćemo jedan nov programski jezik, to je programski jezik go i čak ćemo ispistati i isprobati programe koji su napisani u tom programskom jeziku. Ja sam danas malo duže pričo, ja sam inicijeno bilo zamisljeno da danas vidimo i kako bi izgledao taj programski jezik go, jer je on u suštini nastavak, direktni nastavak programskog jezika CSP, njegova implementacija, znači većina stvari koje postoju CSP-u je ovde implementena, nisu sve. Implementere su samo one slajnje prijem poruka, synchrono, onosno asinkrono, uz avisnosti od toga koja je veličina naše kanala i nekih blokiranja na nekoj alternativnoj komand, ali to je u suštini modifikacija izveđu programskog jezika C i programskog jezika CSP koja se sad koristi u ogromnih kompanije, ono primjera Google ako mi treba hljadeniti, miljoneniti, vrlo lako se pokraći. Možete sami to isprobati da vidite kako izgleda pisani program o programskom jeziku go. To ćemo mi videti na redne nedelje. Dali sad da imate nekih pitanja koje su odnose na predmet konkurentno i distribujerano programijerenje? Ako nema pitanja, to je onda sve za danas što se predavanje tiče. Prijatno, dođenja.