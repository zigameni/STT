 Šta smo još odradili? Razgranicili smo odgovornost između ono kako piše konkurentnu aplikaciju i ono ga ako piše ostatak naše kote. To je sad bilo sve uvodna pričica. Šta nam sad treba? Kako mi ovo ovde da napišemo nekako? Kuristitim ovaj naš abstraktni jezik. Ta jezik liči na neki c. Imaćemo ovde ključno neče monitor. Čisto da kažemo da je to monitor, ali u suštini to je klasa nad kojem ćemo mi raditi synchronizaciju. Vidite ćemo u javi kako to može da se realizuje, ali u suštini klasa. Šta ide otvore na vitične sa Zagrada deklaracija stavlijih promenjivih? To imao u javi. U bilokom programom objevku nojrenti su njima. Inicializacija. Ko je on struktor? Procedure metode nad kojem ćemo mi raditi synchronizaciju. Šta ovde znamo? Stale promenjive. Kada izvedimo iz nekih metode, zadržavaju svoju vrednost. Metode zadržavaju svoju vrednost. Obejka tu kod čuva neke stvari. Kako ga pozolite dva puta, imaćemo od jednog pozivanja drugog od drugog pozivanja. A kako ga pozivamo? Eo dole. Naš monitor, nemim tačka operation, nemim tačka argument. Kao da imate objeknu retisnom pristup. Kako se zove naš monitor, kako se zove metoda i argumenti nad kojem možete. Znači potpuno poznat koncent. Samo da vidimo kako to čudo funkcioniše. Šta smo rekli? Promenjive nama nisu dostupne. Dakle da ovo ovde možete da posmatrate, kao da imate klasu koje su meto, koje su polja private. Znači ovo ovde je klasa koje su polja private. Zašto su napraviti? Rekli smo, ob monitor je objekat koji služi za synchronizaciju. To pišu oni što znaju da pišu synchronizaciju. Oni što ne znaju da pišu synchronizaciju, oni zovu metode datog objekta da im odrada neki posao. Ne čačkaju sami promenjile datog monitora. Da znaju da čačkoj promenjile ne bitražili da im neko drugi to napiše. A i želim da imamo jasno podelo od glasna. Znači, da imamo časno podelo od glasna. A i želim da imamo jasno podelo od govornosti. Zbog toga, možete smatrati da su metode jedini način za pristup dati promenjiva. Možete smatrati da su oni označeni modifikatorom private. Nemamo referencirenje na date privatne promenjive izvan do našeg monitora. Stalne promenjive su inicializowane pre prvog poziva naše procedure. Kao bilo kog objekta, prvo treba da se inicializuje taj objekat pa onda može da se pozove neka monitorska procedura. A on je ko piše monitor. On je rekao, prvo treba da se zove ovo metoda pa onda treba se zove ovo metoda. To je on napisa u deklaraciji. O tako se koristi. Znači, kao što sam malo čas rekli, imate star 3, zove tend read. Nemam, nemam, nemam. Nemam, nemam, nemam, nemam. Nemam, nemam, nemam, nemam. Nemam, nemam, nemam. Nemam, nemam, nemam. Znači, ovaj što je pisalo monitor i je rekao, kako to treba da se zove. Ali taj neko, pojma nema, kako ćete to neko stvarno pozvati. Če to su dve odvene stvari. On je zapisao, ovako se to poziva. To je slučaj korišćinja. Ali će se to stvarno tako koristiti? To ne znam. To ne zna ovaj, možete napraviti neku zaštitu, ako se to ne koristi i kako treba. Ali to je sad, branite se od neku kojoj uze odradi nešto bez vese. Možete takav način programiranje, postoji defensivno programiranje, gde se branite od korisnika koje može da ne koristi sistemne odgovarajuće način. A ono što mi ove treba da odradimo je da napišemo nešto što se naziva monitorska invarianta. To je predikat smislenik stanja koji opisuje kada ovaj ovaj ovaj naš sistem funkcioniše, kada ne funkcioniše i šta on radi, kako radi. Dobro, znači treba nekako da namestimo da ovo ovde funkcioniše. Da bi ovo moglo da bude nekako uizkorišćeno. Moramo da imamo neka smislena stanja i da znamo kako se taj naš sistem održava prelikom prelaska iz jednu u drugo stanja. Moramo da znamo, a-ha, ovo ovde uve kvaži. Šta je bešte za čitac i pisce, nešto što uve kvaži. Nemože ni u jednom trenutku i broj čitalaca i broj pisaca da bude veći od nule i ni u kom trenutku broj pisaca ne može da bude veći od uvijeden. I to bi bilo nešto što bi se nazvala monitorska invarianta. Ovo je nešto što uvek važi. I to mi tako treba da zapiša. Vi da ćemo da ćemo baš da pisati tu monitorsku invariantu i ćemo mi više to tako malo razmatrati, a onda ćemo pisati to više ka uslov koji treba da bude ispunjen na pojedinima mesima koji će sadržati delove te invarianta. Znači to mi je taj dobro, da smislimo šta treba da se desi? Ne možli izrađa osobi iz autobusa ako ni ušlu njega. Ili tako nešto. Če mi smislimo pravila, a onda ta pravila posla treba da poštojimo u svim tim metodama svaki put kad se neko zablokira. Aha, neko treba da se zablokira. Dobro. Ka će to je neko da se zablokira? Kada ulazimo u monitorsku proceduru, aktivni proces dobia ekskluzivno pravo. Našta ako neko drugim ekskluzivno pravo? Šta onda bude? Ne mogu dva procedima ekskluzivno pravo. Ne mogu. A to znači da taj koji je došao, nema ekskluzivno pravo, nego ide na usluvnu promenju i čeka, kaže, ja čekam, dok l'a čekam, dok ne dobijem ekskluzivno pravo da uđemo u monitor. Kako će sad to da bude implementirano? Nemam pojem. Dobro. Kad ja uđemo u monitor, ja imam ekskluzivno pravo da pristupim celom objektu. Znači, ne to jednoj metodi. Znači, to vam isto vaš vjavi. Nemate ekskluzivno pravo pristupa to jednoj metodi. Ne, imate ekskluzivno pravo pristupa čitavom objektu. Svim njegovim metodama. Dobro. Šta sad onda radimo u tim, što imamo ekskluzivno pravo, kako to napravljenu pozodini odgore pojma, nema. To zavisi od konkretnog programskog jezika. Dalje, semafor stariji ili monitor stariji? Ko, o ta dva je prvi napravljen monitor ili semafor? Ne znam. Vjavi je prva napravljen monitor. Oje od monitora napravljen semafor. To ću mi raditi isto na ovom predmetu. Ali, u nekim drugim situacima, prvo je napravljen semafor, a onda je od semafora napravljen monitor. I to, o što ću mi raditi na ovom predmetu isto, na naravnom času, u krenu ćemo sa tim. Kako da napravim monitor, kako što, što neću ja da pravi monitor, neko šta programski prevodila, za mene treba durađi u pozodini, da bi se napravio jedan monitor. Ako znamo da postoji semafor, znači šta će kompajler za nas da odradi ako je semafor stariji? Aha, dobro. Super. A, kako što koristi? Znosmo reka. A mi želimo da napišemo neka ka uslov koji treba da bude ispunjen. Ako je uslov ispunjen, mi ćemo raditi nešto dalje, ako uslov nije ispunjen, mi ćemo se blokirati. Na čemu ćemo se blokirati? Ne nećemo što se zove uslov na promenjiva. Ači sada monitori, kao što sam pre nekoliko minuta na pomeno imaju uslovne promenjive. I sako od tih uslovnih promenjivih ima jedan red. Procesa koji su zablokirani na datoj uslovnoj promenjivi. Šta mi imamo na tom uslovnom promenjivimo? Dve metode. Ači imamo sigurno dve metode, i signala. Ovo metode se zove slično, ma isto, kao koca cemofora koji smo imali, ali su isti. Rader različit posao. Vidići, muskoro da se signalizacija kon monitora i cemofora dosta razlikuje. Šta radim metode wait? Da krenu od njiha, on je lakše za obješnjavanje. A kada pozovemo wait nad nekom uslovnom promenjivo, mi kažemo, ja napuštam ekskuzivno pravo pristupa datom objektu u kome se nalazi ta uslovno promenjiv. Znači, ja napuštam ekskuzivno pravo pristupa kome datom objektu. Napuštam baš sve objekte koji se nalazi možda u hierarchiji iznad mene. To je velika razlika. A u nekom turnu koji ću se po zabaviti i tim, je da li ja napuštam samu taj posnjenjiv o ili napuštam sve nivo je iznad, ali u javi napuštam samu taj posnjenjiv o