 Odobra. Udajme, zidravom. Teman današnjev časa, kao što je pisalo ovdje u napomeni sastanka jeste CSP, to jest malo drugačiji način za distribujačnu komunikaciju, gde imate, dakle, direktno iman olanje, dakle, direktno sobrećete procesu, sa kojem žalite da komunicirate i za razliku od sandučića, gde možete da napravite pa manje više potpuno asinkronnu komunikaciju, dakle, imate prihvatanje poruke, ne morate da čekam uopšte pa, ovaj ti me da ne bude synchronu, dakle, u CSP je absolutno sve synchronu, dakle, islanje i prijem poruke se ne došavaju dok se stvarno ta poruka ne pojavi. I dakle, onaj ko šalje poruku, ce biti blokiran sve dok onaj ko je ta poruka upućena je i ne pročito. Takođe, onaj ko treba da primim poruku, ce biti blokiran sve dok muse ta poruka koji on traži ne pošalje. Pa da, mislim da vam profesor malo možda priča CSP na predavanji mali, a to ovdje ćemo malo da prođemo kreste neke osnome, dakle, malo drugačije način pisanje koda u odnusu na sve ostalo što ste da sad da radili, dakle, možda neko funkcije, možda programirenje može malo daljećeno, ali jako jako malo. Dakle, ovaj, apa, šnu. Dakle, šta imamo pre svega u CSP? Dakle, prvo i osnovno što treba da se napiše, ja su ove paralelne komande gde treba da specificiramo koji su ti proces i koji se izvršavaju, dakle, da bi znali kome mogu da se šalju poruki, treba da znamo koliko su nam ti učesnici. I ta paralelna komanda ima ovako nekakog oblek, dakle, proces 1, 2, 3 koliko godih ima, pa nakon svakog procesa imamo dvotečku i onu suštinijka metodu koji on poziva, to jest, sta će onda izvršavat. Dakle, kao što smo da sad na primer pisali, reader pa onda imamo šta godo on radi u toj svoj metodi koje smo pisali, tako i ovde, dakle, to je neka metoda koji on treba da izvršava i koji, naravno mi pisamo, dakle, šta on treba da radi. Pa onda, dakle, imamo ovakal ili, ili paralelno, ali kako odhoćete da izvojamo, dakle, gde razdvajamo suštinijke u to procesi koji se, koji su ovdje izvršavaju. Bide ćemo da ne pominjem sad u napretu, kada budemo došli do toga isto je iz neke druge komande, isto je iz ovdje ovalu paralelno, ako imate veći broj istih procesa, onda postoji skraćene način da se to zapiše, dakle, i u toj paralelnoj komande videte ćemo, dakle, kako to isto možda se zapiše, ako imamo više procesa, naprima, više produceri, ali više konziumera ili više čitoc pisaca, na ne moramo da pišamo reader 1, 2.read, reader 2, 2.read, 2.read, i tako da je tako dalje, dakle, postoji skraćeni oblik da se to zapiše. E sad, naravno, postoji naredba dodale, dakle, da dodeljujete vrednostim, jedni promenljivama, pa osim ovih osnovnih koje smo koje se pojavljaju i nekihato koji su možda se isto negde vidjela, dakle, ovo su kao nekakve torke podataka, gdje, dakle, mogu da se na taj način dodeljuju vrednosti, imamo još nekoliko postrukata, da ih tako nazove, koji mogu da se koriste u CSP-u i koji mogu da pomognu prilikom rašavanja programu. Nekad mogu i na odmognu, zavisi, dali smo paževili. Jedan od takvih je, ajde da tako kažemo, imenovanja struktura ili imenovanja torka, gdje, dakle, imate neki naziv ispred, dakle, ovde smo imali ovo y, y, y, y, x, koji nišlo imali nazivali, dakle, ovdje imamo to neko cons, gdje, dakle, na primer, recimo, ovdje to granica neka leva desna i da onda, tajime, hoćete da takvu torku dodalite nekoj promenivoj i to je sa te strane sasvim ok. Ali ako nekoj tako imenovanju torci želite da dodalite neku promenivu, to može samo pod uslovom da je ona istog togo oblika, dakle, to je da ima isto i ima da ima isti broj argumentu, taj, isti broj promenivih u toj svoj toac. I onda, naravno, u suštini, to bi bilo kao da ste ovde napisali, dakle, ako x cons ab, to bi isto bilo kao da strekle left i ar i tb. Ove, ovakve, dodale, to jest, ovo, x jednako cons ili cons jednako x, retko ćete vi imati eksplicitno da pišete, više ćete to dobude, da poruke koje se šalju budu takvog publika, ali čisto, ista stvar važi i tome, dakle, kad se šalju poruke, te poruke u obično sadržaju neku vrednost, i onda, dakle, te vrednosti koje se šalju prijmojim moraju da se pokljepe, da bi poroka uspošla bilo poslata, to je spremljena. Dakle, ovom ovde poslaka da imamo insert n i jednako insert 2x plus 1, dakle, to je nešto slično ovom egorijostim, što smo eksplicitno reklju da su to porke istog imena, i u suštini to je, kao što regoh da smo en napisali da je 2x plus 1. Ako se razlikuje to ime, naravno, to onda ne može da se, da se dodali jedno vrednost drugo i tako da, to se zna. I ovde postoji još jedan tip koji je to mi zovemo signal, da neki način, gde je ovično ga pišamo velikim slovom, i sad on može, nemo, da ima nekakve vrednosti, ali, dakle, u suštini samo, na primar, kada hoćete každe ok, primljeno, acknowledged i našto slično, dakle, samo da signalizirate da je to, da je neka s komunikacije završena ili da je našto primljeno, bez da imate neki dodatne argumente, koje treba da šaljete, bez da neko vama treba našto da pošelje, dakle, samo kažete ok, primljeno, idemo dalje. Dakle, to, obično, zovemo signal, dakle, bez nekakvih koristnih informacija. I, naravno, promenljeno, možete dodelite vrednost signala, pa recimo, onda poslako vam je potrebno da uporedite, naprim. da je taj signal koji je došao jednak ok, ili je taj signal jednak nečom u drugom, onda da na osnovu toga radite jedno ili drugo, ali, dakle, ta sa te strane je dozvoljeno, ali signal ne može dobiti vrednost bilo čega, dakle, ne možete da kaže to, kaj signal p je jedno ko, nešto. Čak i da je to c, jednako paš, taj signal 5, nije dozvoljeno, mada, redko kad, mislim da ima potrebe da se, sa ove strane, nešto urati. Ok, a sad, kada smo videli te dotele, druga, da je stajde najbitnije, poslova neparalne, komand, egacimo, bilo, abi bila primitive zaslanje i prijem poruke, i dakle, kao što sam rekl, već, direktno šaljemo nekom procesu, poruku koja može da bude bilo, kako ga sam nasvratim na kratko, koja može da bude bilo, kako od ovih formata, dakle, može da bude samo broj, može da bude neka pa torka, moja da bude imenovan torka, može da bude i neki signal. Sad, dakle, torka sa proizolim brojom argumentacima, dakle, poruka može da bude bilo, što je osustinilo do ovih stvari, i, onaj ko' prijma poruku, isto tako mora da kaže, da hoće da prijmi poruku, i to od kog procesa ono čekuje da mu stigne, da mu stigne poruka. I sad, ovde, jako bitno da ne pomošete šta je, uzvičnik šta je upitnik, pa, najelak što svar je bilo, ok, ako meni nešto treba, ja pitan se za nešto, treba da dobijem neki odgovor, dakle, to je prijem poruku, i to je...
 znač pitanje, dakle pitan se, a uzvični kao naredba, slanje, tako da možete, možda ne lakše da zapantite šta je slanje, šta je prijem poruki. I kao što rjako, ovdje, dakle ako imam proces A koji šalje nekakvu poruku, onda u nekom procesu B treba da kažem, ha od A ja treba da primam poruku. I sad, to je ono što, zašto smo opominjali ove narede dodale pa ako se ova poruka koja se šalje ne poklapa po formatu s onim što se očekuje ovde, dakle ako ovde nije samo neka promenljiva pa šta god ja sam to primio pa ću onda da vidim šta je to došlo, ali naprimera ako ja ovde ekstrecino koji ću da kažem, recimo šaljemu ona i sons left right, a ovde on traži tignav da mu pristigne, to onda se ne poklapaju te poruki i onda dakle i jedno i drugi će da stoje tu blokirane čekajući da stigne poruka formatu koji nećemoći, dakle tu treba paziti prelikroslanje i prijama da ne dođe do dedloka ako se ne poklapaju poruke koje se šalju i primajam. Tako da zato kažem tu do nekaj olaksanu, zato što možete odmada kažete ok, ja to očekujem, ali ako se stavlja, da ja svi slučajna greška na jedno ili druge strane i onda vrlo olako dolazi do dedloka. E dobro. Dakle, sad par nekih primitiva, dakle za slanje i prijem, dakle na jednostavnije recimo x užitnik m šali vrednost procesu x koja je m, a taj m može da bude absolutno bilo šta, dakle šta godi stavljenu u tu promenljivu pret slanje. X užitnikam je da od xa ja sam tražim poruku, to je šta kam da ona stigne i rezultat je poruke se smješta u promenljivu m. Ode bih smo recimo isto tako, mogli da kažemo ok, x upitnik pa ne znam, evo, ili možete dakle xy ili imanovanu naprimer, ono, cons xy ili šta godi, gde dakle očekujem da će u odraženom formatu da stigne poruka. Tako da to je ok. Kada se šali poruka sa nekim ovakvoko složenim izrazem, onda se naravno prvo izratfuna vrednost ov izraza i onda se šali. Šta ovdje i gaš ima bitno da polena? Tako da, opet, najbitnije da se poklopim ti formati ako šali te odraženim formatima. I da, možda je to kao savet do nekaj, možda pozorenja, ne znam kako dakle ne zove najbolje, jeste da ako želite da, ako imate nekog situaciju gde može trebao da šaljete više različitih, više različitih vrednosti koje imaju različita značenja, možda je bolje da koristite, recimo, ovako nekakve, onakve imenovane porke, pa makreni nekta torka imala samo i jedan argument. Zato što ako imate, na primeru, nekog situacija, sada ćemo doći do toga, da možete da primijete od različitih procesa različite, opet, na primeret, inkedere koji imaju opet različita, različita značenja. Da onda ne bude da se tu sad poklopi, da se poklopi zbog togda što je struktura ista, a da zapravo dobijete pobrijušan urednost ako, da vam je te što hoću da kažem. Dakle, ako imate više samo čistih inkedere, bolje da se to stavio nekako imenovanu torku, za svaki slučaj pod usluvom da ste absolutno sigurni, da u jednom drugom slučaju možda stigne samo tako broj koja nam treba, ale, dake, dešavalo se sremena na vreme da bude prijem poruka, gde očekujete jedan broj, a zapravo im stigne drugi i onda to ne ispadne kako treba. Čisto zbog toga, nesli, redko se dešava, ali, ato, malo pozavštno. Da, što je už može da se šali i prijma, pa osim, dakle, ovih nekadih prenačonavaljevi da možete i direktno da šalite nekako, da kažem, konstantu, dakle, možete da kažete, naprim. uzvičnik 5, ako hoćete, pristutno da šalite samo broj 5, ili neka znak, karakter, stream, šta god, nakle, može, direktno da se šali. I takođe, dakle, možete da šalite i prijme te ove signale, dakle, šalite ok, jacaka i slično. E, sad ovdje dolozimo do jedne još stvari, dakle, ovdje piše pošalje znak a, jot minus 1, u nizu procesa konsol. A ovdje sam ja malo zanimarila, dodje piše niz. Dakle, osim prostih ipovada, interdjera, dablova, streamova, karakteram i bulija nacima, ovdje, kako kažem, vas buljent. Mada, možete da si. Postoji još u štrih nekaj, kažem samo 1 tip, a to je niz. I sad, taj niz, može da zdradili, dakle, to može da bude niz ovih procesa, možete da imate i promenljivu koje jeste niz. Primer, kako biste druga če rešeli producer koji da imate problema, ako ne imate neka vafer koji će da vam čuva sve te vrednosti. Lista, red, stek i slično, ne postoji, ali naravno u čeliste iznate, većina ti stvari je jako jednostavna da su redi preko niza, tako da ako vam treba red, može da se reši po temniza, ako vam treba stek, išto tako može da se reši po temniza, tako da niz ovih postoje kao dodatna neka struktura. E sad kako onda pristupete elementima nizapa nesa u glostim zagradama kao što smo navikli, nego s ovim kao običnim zagradama. E sad kako onda znate, da hli nešto on je signali, ili znate da je nešto čo nizapa na osmahu toga, da su vam promenljivi šta su vam procesi, dakle onda gde smo imali insert na primer u zagradi n, tu znamo da insert nije definisano kao proces, znamo da insert nije definisano kao promenljivo, i onda tako znamo da je to, dakle, imenova notorka, a ovde recimo znamo da su ovo sve procesi, tako znamo da je konsol od j-i, zapravo u onom nizu tih procesa konsol j-i uspravim, po što govada kaj bio j. Prit ćemo, oddaj treba da povedete računa, da u tom slučaju nemate, vi grašak, dakle, da je taj od minus 1 indeks zapravo koje stvarno može da postoji u tom nizu. Koje su granice niza, pa to vi definišete prilikom stvaranja, da tako kažem, tih nizuva, dakle ako kažete 1,1,1,1, onda je imenovanje od 1,1, ako kažete 0,1,1,1, onda je imenovanje od 0, doj mi u sjeda. Češći mislim da se pojavljuje od 1, ali, dakle, kažem, ako vi napišete da to ide od 0, onda to ide od 0. Ja sad ovdje dolazi ona glavna stvar gde se najveše vidi razljeg izmeđonih standardnih jezika da ih tako nazovim kojem smo radili u omnosu na csp, a to su alternativna i repetitivna komanda. U suštini to je kao if i kao vile, ali nije baš. Razlikuje se malo i po načinu, samo i po načinu pisanja, ali ove i razlikuje se i po nasanju, dakle, ličina if, ličina vile, ali nije. Dakle, što se zapravo dešalo? Dakle, imate alternativne komande, gde imate sad ovaj guard, pobenućemo šta je taj guard, i onda imate neka kao bok koji se izvršava, pa onda imamo kočkicu, pa onda imate drugi guard i drugi niz komand, koji se izvršava. Imaš, da imate guard, i šta se izvršava u tom slučaju? Naravno, ovde može da bude eventu, ali samo i jedan guard, pa da nemate nije jedan od ostali, dakle, ako želite, samo u slučaju da je nešto ispunjeno da se nešto izvrši, ako nije onda samo preskačete, idete daje. E, šta su ovi guardovi i kako to se razlikuje ovo od ifa?
 da ovo ovde otvorim jedan hot. Dakle, ako imamo guard 1, a ovdje imamo s trealicom. I sad ovde, ono što mi sam pomenilo, odakle svuda gdje bi ste i nače koristili vitiče zagrede, koristite uglaste zagrede. Dakle, uglaste zagreda označava neka kao blok, koji se izvršava pa samim tim, dakle, i ova uglaste zagreda ovdje koji. Dakle, na početku i kraju alternativne komanije, dakle to je kao jedan blok koji se izvršava. Pa, dakle, ovdje ima tenazem 3. Ten tački što gode se dešava. E sad pošto, ne može da se itiša koćkica, onda obično stoja ovako kao otvorenu-zatvorenu. Uglaste zagreda, pa onda da imamo... Onda imamo drugu narebu i tako dalje, dakle, ako imamo još nekoliko, onda imamo viš. E sad, guard je uvek i bez pogora je ide ovaj redoslet. E sad, da li ima svih alaminata ili nema, zavis od toga, kako vam treba u sluva? Dakle, guard je u suštiniju, bukvo, moj da kažemo, čuvar za ulaz u taj blok, koji ima sladeći poblek. Dakle, bulo izraz ili ajde kao više, zaraz prijem poruke. Dakle, ako imate u sluva, na primer, a već je od nula, to može da bude guard. Ako imate, na primer, ako je a već je od nula i recimo od procesa a nam stiže poruka ok, na primer ili on ne signala kako smo nagvali, onda to isto može da bude ok guard. Može da bude i na primer samo, ne znam, ajde, imamo proces koji su zove buffer i od njega primamo item, recimo da tako bo bude, to je sve ok guard. Nije ok. Ako imate, na primer, kaže to, buffera primamo item i onda item veći od nula. Dakle, to ne može. Dakle, ako može jedno, može drugo, može u kombinaciji, ali ne može da se obrne, da se obrne redosled. Isto tako, da ne mora da bude jednostav bulo izraz, može da bude i više, više njih, na primer, ne znam, ajde, a veći od nula i b veći od nula. Pritom ovde, ajde, sve jedno je, da li ćete da pišete ovako sa i, ajde, ja ću ovako to dostavim, veći od nula and b veći od nula, nećemo to uzimati, nikako za zlodakle, da li pišete ove ceoske narebe, da je bitno da se razume, šta se tu dešovi, šta je taj usov. Negde ćete, možda videti i ovako, a veći od nula, b veći od nula, pa sad nešto. Ovo u suštini znači kao and, dakle, ako je i, a veći od nula i b, veći od nula, da se možemo da ovako dostavim. Dakle, to su isto ok, ok usovnih. Naravno, je to možda i ovde, a veći od nula, por b veći od nula, dakle, kaj li to je? I ovde, možda bi bolje trebalo se koristi and yours bog Orville Bosch or, da ne bude da je ovo parallel na komendam, ali ajde, razume se da ovde nije, ne treba da bude parallel. Dakle, to je guard, esad. Kako znamo da je guard ispunjeni, kako onda znamo da može da se ulozi ovde u ovaj blok izvašavanju, to je to u listu na aredvi. Pa ako je i jedno i drugo, to jest, ako su svi delovi ispunjeni i tačni, onda se ulozi u programu. Dakle, napr. ako odlijemo, a veći od nula, ok, recimo da je ovog guard jedan, a je veći od nula, može da se ulozi da se izvašala. Ako od bafera imamo poruku, dakle, bafer je poslao nešto, da se smesti u ovom promenju u item, onda je guard ispunjen. Ali, napr. A je ste veći od nula, ali još uvek nije stigla poruka od procesa A, da je nešto ok, e onda guard nije ispunjen. Ali, postojiš şansa, ako dakle procesa nije već završio sa ovoj radi u gasio se, dakle, ovde postojiš şansa, da će taj uslov biti ispunjen i onda se čeka. To je, nije će se završiti ovoj alternativno komanda, dok got ima šanse da se bilo, da se neki od ovih uslova, da neki od ovih uslova bude ispunje. Dakle, ne znam, ako je ovo recimo bio guard jedan, a ne znam, recimo, ovo je bio guard. Dva, dakle, dok god, postojiš i onda se dostigni neka poruka, onda može da se ostaju ovoj alternativnoj komand. E sad, ako su recimo, uslovi bili a već od nola, b već od nola, i u ton trnutku, kada se dolazili do alternativnoj komande, nije a, ni b nisu već od nola, onda dakle, tu se završava alternativnoj komanda, dakle, ne može da se ispunjeni jedan i drugi uslovi, i onda ilozima iz ovog bloka izvršavanja, i nastavljamo daje. Dakle, ako postojiš šanse za primom poruke, ako ovdje imate nekako primu poruke, onda se čeka. Ako ne, dakle, u bilo kontrumku kada su ispunjeni, kada nisu više ispunjeni, onda se ide daje. Naravno, recimo da su bili uslovi, ovaj a već od nola, pa prim poruke, b već od nola prim, neke drugi poruke, pa ani b nisu već od nola, ništo ne može da se desi u ton trnutku, što može da utiče na to, da će neki od njih biti, neke od uslova biti ispunjen, i onda, dakle, izlazimo na polje. U suštini, dogod smo sigurni da ni jedan od ovih kardova ne može biti ispunjenu ton trnutku, onda izlazimo iz alternativne komande. Isto stva važi i za repetitivnu komandu, to jest, repetitivnu alternativnu komandu, tako da uslovi za jedno i drugo je isti, ako ni jedan od uslova ne može biti ispunjen, onda se, izlazimo, to je završava ta i blok. Ezat. Šta je još, znam razmijek, pa se mojve sintekse i ovoga u sluva izvašavanja, pa recimo da ajde, da su opet ovo dva uslova ovo dva ove dve stvari kardovi i da imamo i poruku od a, i da je već od nula, i da imamo poruku od basera, dakle obal vas u sluva su ispunjena. Ezat, ovo nije kao standard, nije kao standardno sekvencijelno pa i konkurentno programiranje, da idete redom po naredba po naredbu i da se izvršava. To u okviru bloka je tačno, osim u okviru ovih alternativnih i repetitivnih alternativnih komande. Ako je jedan od ovih uslova izpunjena, bilo koji ulozi se odloh u taj blok izvršavanji, dakle onda nam se ovde sad nalazi odje, dakle krećemo da izvršavam. Ali pod uslovom da su oba izpunjena uslova ili više njih, dakle koliko gode ih imamo, nije deterministički određeno koji će da se izvršavam od tih objevo. Dakle šta je našta mislimo tu, dakle ako su izpunjene objevo može deterministički, može nedeterministički u bilo koji da se uđe. U principu, dakle ne bi trebalo da imate ovako nešto, ne znam ako je a već od nula onda imate ovde nešto uprutnom, da onda kažete ok, recimo, ajde, tru ili šta god, usuprutnom da ne možete ni da ne mati nikakak vga reta, ako hoćete i duve gude izpunjeno, onda da ve su uve polozi u toj neki deo, pa naprim. Pravite meskove kronikšne perlje, onda mora ovde da se stavi tru i ovako nešto. Dakle ako je a već od nula
 može bilo koje dova dva da se reši. A u suprknom, ako a nije već od nola, pa uvek imate ovo koje je tako. Neće da bude ako a već od nola izvršavaj ovo u suprknom, izvršaj ovo drugo. Dakle ako hoćete i imate to suprkno, onda morate eksplicitno da napišete uslov za to. Dakle ako hoćete i imate pašto ili ili izvašavanje, onda eksplicitno moraju da se napiša ovak uslovi. Dakle ne može da se stavi samo ok. A već od nola i nešto, a onda u suprknom izvrši drugo. Dakle nema toga, nego mora eksplicitno da se kaže, zato što može da utiče na to da se ono što je uvek ispunjeno, da ne bude to kao Els grana, dakle nije Els, nema Els, nego ima beskunočno info koji se istoramanom proverala. Ima. Imamo ovde, ono što smo pomenali, dakle ako imamo niz nečega. Dakle vrlo često ćemo ovaku, ajde ovakav guard vidjeti u sledačnjih situacijama, pa si ja vraćimo, to bi me kod. Naprimer, imamo sad i jedno po 1 do n r. Ajde. I... Ajde, ajde. Ne biš ono. Dakle, ovo, znaoči da imamo n procesa, reder, da imamo ajde. Niz od n procesa, i oni su takve, reder od 1, reder od 2. Ima. Ars. I sad, dakle, ako mi čekamo u nekom trenutku da nam dođe poruka od čitalca, ali nam je sve jedno koji čitalac šalje tu poruku. Dakle, naprimer, imamo neko koordinatora, koji nam govorio o tome da treba da se, kaj će da određuje kad ko može da pristupan, dakle kad ko može da čita i repiše, onda recimo takav nekakav koordinator bi mogo odima sledeću alternativnu, to je stodio verovatno repatitivnu komandu, gdje kažemo dobro, i od 1 do n, reder, i recimo da on ama kaže start. Dakle, oje kata je neki signal. Dakle, od uslo on da imamo čita od koji koći da nešto piš, da nešto čita, onda recimo tu, nema kažemo, cnr, gdje idem, cnr plus 1 ili ajde ovdje možemo, sve možemo samo 1, koji. I da recimo to budem. Da to budem to, da koje ovde hoćemo, nemo još nešto, oni stajemo još neke narepte, ali dakle, ovo u suštinim je samo skraćeni zapis, da kažemo, reder od 1, par 3, pa, da ja ću da kopiram, dakle, da on to, a imamo reder to onda, pa, reder 3. Dakle, ako svih radje isku stvar, ako je šta bi radila ova alternativna komanda, pa bilo koji o ti čitalaca da je poslao zahtim začitanjem, ili takvih više njih da je poslao zahtim začitanjem, dakle, neki od njih, je dobio to da imamo se pročita poruka, i onda, dakle, uveća vam obroji čitalac. Ovde, dakle, smo samo skraćili ove zapisy, kažemo, dobar od kogu da stigne, onda šalimo. E, sad, ajde, redcimo, ovde, o što ima ovoj simismo, ako nešto desi, redcimo da vi morate da javite tim čitocima da oni sad da im je, osim toga, dakle, što Sony odblokirali zbog toga što im je primljena poruka, da možda je to im i javimo ok, ili da ne bude samo začoni so zatražili čitanje, vi ste to registrovali, onda im te k poste kažete da mogu da nastave, onda možemo i da iskoristimo to i, i da kažemo, ok, taj i koji je poslao poruku, njavimo kažemo, ok, tu, red na primer. Dakle, ako bi smo to ovde pisali pojedinačno, dakle, to bi bilo ovako nekako da, ovde, red, red jedan, ok, tu red, pa onda ovde, red, red pa ok, tu red i tako dalje, dakle, da, sad ne, ne mogu sve. A, ajte mi od, vidar od, dakle, može da si koristi ta promenljiva koji smo od iskoristili, pričemo, volite računo da ako već negdje imate i kao neku drugu promenljivu da onda ovde ne uzmete i negu, uzmete, ne znam, kaj ili jere, liš stogota, dakle, samo da se ne koristi ista promenljiva u dve različite stvari kao što, naravno, isto radili, imate neki forpetljem u običnom programiranima. Postala je još repetitivna alternativna komenda, kado da često je ove iterativna, često je ove samo repetitivna komenda i ima jedna i jedina razlika, to je ova zvezdica na početku. Dakle, ako ovdje imam zvezdicu, to znači da se sve ovo ponavlja opet do god nijedan više uslu ne može da bude zadovoljen. A sad, ako ovdje, dakle, koćemo konstantnom da primemo poruke, onda ovde samo stavimo zvezdicu i kažemo, ok, ovo se dešava sve dok ne postoji nikakvo šanse da jedan čitalac nam pošeli poruku i onda, dakle, može da se završiova repetitivna komanda. Razlika je jedinog zvezdica da se ovo ponavlja u nedogled. Ili recimo išto ovde ovo je da se jednom prođe ako ja već od nola izvrši se našto, ako je manji jednog od nola izvrši se našto drugo, ali ako imam repetitivnu komandu u nedogled izvrši se jednom pa to, dakle, i ovo će dakle ići u nedogled, zbog toga što, a ili je već od nola ili je manji jednog od nola, nema trećek. Dakle, ovde, ako se možda menja vrednost a u ovim ovde blokovima, onda, dakle, možda se izvršala jedno ili drugo, ali dakle, ovo onda ide u nedogled. I onda je samo još na brzinu, pošlo smo već bili po menu, i kako bi ste možda mogli da napravite nekakvu vile tru petlju, pa kažete ok, repetitivno, našto se ponavlja tru i, dakle, ove poglišno. Agradica, dakle, ovde, dakle, ovo se ponavlja, uslovi je ispunjen, takoče, i, dakle, ove ovde blok će da se ponavlja u nedogled. Šta godo ovde mi radili, dakle, da li smo ovdje imali neki uvizien, repetitivne komande, da li su ovdje bilili panje prijemu, šta gode, dakle, ovo se uvek vrti i izvršava, dakle, nema načina da se izveđe iz ove repetitivne komande, dakle, nema break, nema continue, nema ništa, dakle, ovo se uvek ovako izvršava. Esate. Re, simmo, još jedna svar prejmo što pređemo na zadatek, prvo jedan uvodni, pa ćemo onda da radimo malo konkretnije. Jeste sledeći, ako ovde prejmo, na primar, sad, Reader 2 je poslao poruku i mi smo sad ovde izvešava nosi i njemu šalimo poruku prekne smo synchrono komunikacije, dakle, mi smo ovde blokirani svedom.
 dok on neprimitu poru. U medju vremenu, ako su stigli, recimo, drugih čitalacam ovih signali, to je s tove poruke, znamo da su tu, ali neće se isto vremeno izvršavati recimo H. Dakle, mi smo ovde čekamo da pošalimo poruku čitavcu 2, ali neće se isto vremeno reći, e pa dobro, ovde sad imamo jovo poruku, ajde, šali i nja. Dakle, u onom bloku u kome ste trenutno, jedino se onda, kažem, izvršava. A malo tu problematipno, onda ako to sad može samo ovaj jedan da se izvršava, ovvi svi uslovi isto vremeno da se proverali. Pa može, dakle, ovo može da budu, ne znam, kao nekakva mapa, sad sam zaborimela, kako to ide, kako se zove onaj element. Sadite na orto ili naradi se na nekom orto, ali u glavnom, dakle, imate neki od uslova, on je ispunjeno pa sad koji od tih nekako će da su doberali, dakle, jednom kada se uđe u neki blok, onda se, dakle, samo taj blok izvršava i njišta vanjek. Dakle, kada se ovde, dakle, pošalje poruka readeru 2, onda, dakle, se ovde završava ova iteracija i pošto ovdje imamo zezdicu, onda, dakle, idemo ponovom i ponovom proveravam u gardove i sad znamo, necimo da je ova isto bio ispunjen pa i ovaj, ali, odobra nismo da su ulozi ova i onda se, dakle, izvršava taj blok i tako. U nedogled pod uslovom da smo, da nam je, recimo, ovako nekakva, nekakva repetitivno koment. I sad, nećemo prvo se semoho, nego ćemo prvo prosledivanje teksta, pošto je jednostavno i malo da se, kažemo, poznamo sa syntaxom, onda ćemo doredimo i semoho, pošto je jednostavno, onda, da se prvimo pauzu ili ako nećete pauzu, onda, da stavimo odmah i talje, pa onda idemo na malo, nećemo pošto kompikuvalni zazac, ali sa više uspom na uflike. Dakle, šta je ovdje za ma zazatak? Trveva da napišemo program za proces x, koji prosleduje znaki dobijenje od procesa u west, procesu ist. Pa, jednostavniji zadatak. Zašto padakle? Ok, ajde, ovdje, mi ćemo da prodpostavimo da imamo taj neki proces west koji on radi našto svoje, šta goto bilo, imamo proces ist, radi našto svoje, šta goto bilo, nema razljike da li pišete procese velikim svojima, malim svojima, da li su metode malim velikim svojima, ako gotoćali te. I imamo naš proces x koji ima neku metodu method na primer koji on izvršava. Dakle, to nam je paralelno komanda, a onda ni taj method treba da implementiraj. Pa, dakle, šta treba da nam, tam je to da radi? O, treba da prijima karakter po karakteru. Da o tako samo da veratim. Znaki dobijeni od west ka ist. Dakle, to što ni dobijemo od west, da to bilo, treba da prosledimo ist. Vrlo jednostavna komanda. E, sada, ostoji problem šta je c, dakle, c nismo definisali, dakle, moraju da se definišu promenjive, e, sada, videte, ćete ovdje kroz prezentaciju da recimo, to ovako pišemo, dakle, c, pa dva točka karakter, to kao, recimo, što je u paskalu bilo, posnije pomiliti to ali, ne? Madem, ok, i da napišete samo čarce i da završimo stim. E, sada, ova metoda nije da se jednom ovo izvrši i da to bude to, nego, dakle, konstantno treba da šaljemo karakteri, tako da ovdje stavimo samo da je to repatitivni blok, dakle, konstantno, kada god primemo nešto od c, šaljemo, kad god primemo nešto 200 šaljemo ka c i to je to. Dakle, kažem, isto to samo malo, malo dobrači. Pa, modifikacija, preenflavnom grješenjem, tako da svaki dve susrednih zvezdvice zamenimo sa klačicom. U suštiniju, možda ste primjetili negde da u nekim jazicima imate mogućnost da zvezdica zvezdica bude kao stepenovanje, pa, eto, kao, hoćemo da ne bude programski kod, nego da bude neko što što može da se razume, imer, i da, kao, zamenimo to stepenovanjo. I, ok, ovdje, dakle, smatri di da poslini znakni zvezdice to jest, da smatramo da, ako imamo zvezdicima, možda, sigurno, bar nešto poslo toga da znamo da ne budi ok, dali je ovo jedna zvezdica, da znamo da smo završili, ne, tako da, samog buktoga, smatri di da, da, poslini. Dakle, ovo je slično, da je, da ja ću opatola. Ove ovdje malo drugačije da formatiram. Dakle, opetim, ono taj neki čarci, i, sada, ja odvest i dalje primam taj karakter, e, sad, dali ja ist treba podrozumevano da šaljem tu vrednost ili ne? To jest, kako da znam, dali mogu samo da proslodim ili ne? Dakle, ako ide dve zvezdice, onda znam da ne šaljem dve zvezdice, nego šaljem, ono, pačcu, zastepenom. A bilo što što nije zvezdice, to sigurno mogu da pošlenim. Dakle, to sigurno ne moram da meni. Dakle, da odimamo, ono, alternativnu komandu, na to se mi napravilo ovaj blok, i dobro, dakle, opet možete da koristite, ovo kao različito, možete, ovako, da koristite različito, sve jedna. U svakom slučaju bilo što što nije zvezdica, može odmog da se šalje. Dakle, kažemo, ist šali to c, šta go to bilo c. U supratnom, šta ako c, jaste zvezdice. Da, dali šaljem, ono, pačcu ili ne, zavisio toga šta sledeće dolaz. Dakle, kada se pročita zvezdica, mi nemo potpuno informacije. Tako da, u svakom slučaju imamo još jedan blok za izvršavanje, a šta nam to, šta nam se pudešao. Pa, pročitamo još jedan karakter iz West. I na osnovu njega onda poslo odlučimo šta ćemo da radimo. Ovde je ok da koristimo isti čar c, buh toga što, ovde sigurno znamo da, pre toga što je došlo, jaste bilo zvezdice, dakle nije bilo, tali se plaklapa sa nečim. Tako da ovde je ok da bude, da se recikljera isto promenljiva. U supratnom, možda biš da oda trebala kažemo čar x naprima. Koji treba onda da se čitaj, onda da šaljemu jedno ili drugo. Onda ovde opetimo na kraju sličnu alternativnu komandu, pa ako je c različito od zvezdice, onda pa treba da pošaljimo zapravo onda i ovu predhodnu zvezdicu, tako je treba da se šalje isti, da da prekoristimo direktno karakter, a onda posle toga šaljemo i ove karakter c, tako da što goto bilo. U supratnom, i ovde opet reakljemo, dakle ne možemo da kažemo supratnom, nego kažemo supratnom ako nje c, jednaka, jednoko zvezdici, onda ist šaljemo ove karakter c. I to je to, dakle ovo ponavljamo mnogo, mnogo put. Esat, šta se da? Da, još jednicu skrenu,
 da u gardu ovde recimo ne možete imati slanji poruke, nego da to mora da bude poseban blog. I čim imate više ovde nekih naradbi, bolje je da stavite u blog da je klasuda gde biste pisali viti često za grado, inače pišite i u CSP-u ovu ublostu, da se sasigurno su znašta pripada koje se kvenci izvešali. Tani ovdje ima nešto što bih teh nam zkremili ostavno. Pa teh nam tebe. U metali pitanje, pa smo to vih nam se otrvalo, stava si, aba smo na bavzu u zvome. 귀がクice за проектorn but i 반 τον zveкаo, t Busenpayers koristeći CSP. E, sada, ako je mi ne znamo kako će neko da koristim. Aće koja sada pozivaj, ne znamo koji su nam procesio igri, ali o našto sigurno znamo, ja ste da imamo taj nekim. Nemo ko... Ilično smo sigurni da on ima to neko repatitivno komando i šta ima samo for sigurno, pa sigurno ima ono broječko u promenje. A, pa, tu ono nije repatitivno. Zvok toga što imamo int s, o, tehniczki mogli ovo. A, isto remelo ili šta gode taj počut na vrijednost. A onda teki imamo repatitivno komando u kojem nešto radimo. Pa šta može da se desi, pa možemo neko od naša ksemo for da traži. Sjedno može da traži wait, tako pravimo ne samo, frušto smo radili na početku kosa. Dakle, nebitno proces A, koji god, dakle, može da nam traži wait i imamo od procesa P, likoi god ili komeg god, tako i pardon, isto signal. E, sad. Šta radimo u kom slučaju i kako ćemo da blokiramo one procese koji zovu wait, a da ne mogu da... Dakle, znate sami ako pozovete wait na sema foru u kojem je broječka promenljiva. Ulo ono treba da se blokiram. Pa kako ćemo to ovde dovoljati. I dalje treban pod nekim uslovom da primamo ovu poruku za signal. I onda kada neko pozove signal da se automac je od blokira ili da se primi, to jestli da se odblokiravan je koji je pozovu wait. Pospidamo ovo u kom firmsa i odličim. U moj sexi s težku, na c arrestedan트, u trenulse tu stražimo o pas agriculturalne sje�무 Okay, stavite trebalo da se desi kada se pozove weight. Dakle ako imam s koja je već od nule, onda ću samo da smanim s. U suprutnom, taj koja je pozove weight treba da se zablokira dok s ne postane već od nula. Signal kada se pozove, pa on treba da već je s ako ne bila nikog blokiranog. Ako bila neku blokiranog, onda treba da go blokira. Ovdje, dakle, mi samo pružamo weight i signal. Nemamo tu sad, a nakon što uzmamo weight, da kažemo, kaj znamo da je taj proces blokiranog, onda ka neko ide signal da pralazimo recimo kroz nijed blokiranih i da biremo koji ćemo da probudimo. Čim ovde primimo mi poruku weight, oneko je poslao weight, on će da nastavi dalje zbog synchroni komunikaciji. Dakle, kako ćemo da sprečemo da se ovde neko nastavi dalje i kako ćemo da ga blokiramo prilikom poziva weight, pa tako što možda, ako nije isponjen uslov, nećemo ni da mu primimo tu poruku. To jest, ako je s već je od nola, onda može. Ako je s jedno ko nola ili manjem, vecimo, onda dakle kažemo, ok, ovo što zove weight, ono se blokira. Pa ako nije isponjen ovaj ovde uslov, onda se neće primati nijava poruka. Dakle, idemo redom. To je možda ono što nisam, baš skrenula pažnjena, kada smo pričali o gardevima. Dakle, prvo se proverava bulovizraz, ako nije on isponjen, onda se prelazi na prijem poruk je usuprhnom. Ako nije isponjen bulovizraz, nemamo veza što je stigla poruka. Dakle, prvo mora bulovizraz, pa onda prijem. Dakle, ako je s nije već od nola, ne primamo weight i impulsitno time blokiramo ono koji je pi weight pozvalo. Usuprknom, ako je s već od nola, to ne što smo reklji, s je samo s minus, jednoko, s minus 1 ili s minus minus 5. I to je weight. S signal, signal je samo s plus 1. Što smo ti mi uradili? Ako je recimo, je zbilno nola. Dakle, oni koji su vali weight, blokirali su se i neko pozove signal. Pa tim signal uvećemo s na 1 i da repatirim na komanda, s je već od nola, s je 1. I onda neko od onih koji traži weight može da prođe i opet ćemo da vratimo s na nolo i postali, neće nastaviti dati. Iskoristili smo ovdje pomoć CSPA, dakle, implicitno se blokiraju procesi koji ima se neprimni poruka, tako koji šalju našto, a to nije primjeno. I tako smo napravili da ovdje, ako nije ispunjenu služ za 7, neprimno poruku weight i taj proces se automatki blokira, čekajući da mu se poruka. A, mi. Mi. A, pa tijta naprojimo makr 5 minuta pauzu ako slavljate se tim. Pa da onda recimo, koje os 5 minuta nastavimo danje sa zidacima. Pa. To je dobro, taj nastavimo danje, dakle. Sledać je zadata koji nebrojano puta, uhove i pominjeli. Pa i on je u CSP-u možda malo jednostavniji nego što je u nekim drugim, u nekim drugim jazicima. A to je naravno, prodišto, konziroma. Pa, nemamo tu sad ništa da pričamo mnogo o tome šta je zadata. Prodišta, u Zilver već možemo odmog da krenemo u rešavanju tog zadatka. Pa, šta mislite šta bi bilo rešenju? Pa, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne, ne
 i par stvari ato da ne pomerim prenevo što krenemo u diskusi udalju. To što koće pomene mi je sledeć. Mi znamo da je produsir konzumer problemi, imamo neki buffer ogranično kapaciteta u koji mogu da se smještaju po datci. I ti po datci nebitno je kok su tipa. Znamo da imamo produsir, znamo da imamo konzumer. Produsir treba da ubaci podatki u buffer, konzumer treba te podatki da čita. Postavljene se pitalje da je dobro da imamo samo produsir i konzumer kao procese ili je neobchodno da imamo i neki dodatni proces. To treba da se razmisliti. Dalje je moguće da kažemo ok. Ako imamo produsera sama da on tuvate podatke a ako imamo jednog, to potencijalno možda čak bi ima moglo. Ako samo postoji jedan produser da on bude taj koji će da čuva ove podatke. Vrlo često nije samo jedan produser, nego imamo više. Čak idemo samo jednog produsera, postavlja se i sledeće pitanje. Kada treba da primi podatak, zahhtim za čitanje, a kada treba da ubaci konkretan podatak u buffer. On može sam da pravi, ali dok on pravi, neko drugi može da traži da čita. Kako ćemo da napriamo tu razliku, kada on može da čita, bože kada on treba da ubacuje, kada treba da šalje podatke koje su tražene. Tako da potencijalno možda bi moglo, ali imamo tu dosta svarje koje bi onda isto tako trebalo rešiti. E sad, često nije samo jedan produser, nego imamo više. I onda postavlja se pitanje po dobro. Ako imamo više, da li može jedan produser da čuva sve njih? I kako ćemo dozornimo koji je to produser koji čuva podatke? I opet isto se postavlja pitanje. Kada će onda zna kada treba da čita podataka, kada treba da podataka, kada treba da ubaci podatak. Tako da je tu potrebno jedan proces, da je tu potrebno i još jedan proces, koji će da bude na neki način koordinator. Mi najčešći zovemo proces koordinatora. Koji će da bude zadožen za to, kada se ubac... da bude zadožen za to da moj neko kaže e, mi treba podatak, tai, ili napravio sam podatak, evo ti ubac. Dakle, u suštini, ovdje nam treba jedan proces, koji će da bude tehnički, tai buffer. I dakle, koji će da čuva napravljene podatki, koji će da bude tai, koji će da distribuira te napravljene podatke učestnicima ovom nekom sistemu. Tako da, ovdje imamo taj dodatni proces buffer i onda buffer je koordinatora. I onda se postavlja, dakle, sad pitanje, treba da napravimo komunikaciju, kako će prodjusti i kožumeri u njemu da se obračaju. I nakon što se obrate, da li će odnog dobil podatke ili možda neće odnog dobil podatke i kako treba, dakle, taj buffer da funkcioniše, da bi to sve radialo kako treba. Pa sad, dakle, ono što znamo, sigurno, jestli da imamo proces buffer, ili proces koordinatora, samo treba da smislimo, kako će to sve da funkcioniše. Najčešće, dakle, kad imamo takve procesu koordinatora, oni samo primaju zachteve ili odmah šalju odgovor, ili kažem, ok, primljenje tvoj zachteve, ali nekad kasnije ćeš dobiti odgovor. To je na neki način slično kao ovu sada što smo imali kocemafora. Imali smo, dakle, samofor koji je pod, da kažemo, uslovno, primala one wait zachteve i dakle, dakle, te kada stvar naprijeme poruku, onda znam, ok, to je primljeno i sad što govor, da se je traženo, to je gotovo već primom, samo primom poruke. Nekde je to sasvim, ok, na primer, recimo, prodiju se bi verovatno mogao da radi na sličan način, jer on njemo je bitno da je on poslo podatak i da je neko taj podatak primio, gde će on biti smestan kontra nutku, na koji poziciji to njega absolutno ne zanjima, dakle njemu nije potrebno nikakva povratne informacije da tako kažemo i onda taj del bi eventunom mogo da funkcioniš i kao, ne, wait što smo imali, dakle, mogo da primim podatak samo ako ima mesta u bafferu, a ako njemu mesta u bafferu, pa ništa, onda neću da primim taj zahter za ubacivanjem, tako da to je onda to. U supratnom slučaju, to je su slučaju consumera, imamo možda malo drugačije situacije. O konzumeru on traži podatak. Ne sad, ne možemo, ne može on da ima samo primim podatak. Zašto, dakle, on treba doda bi o podatak, dakle on treba da primi neko informaciju, ali ne može on da bude samo, dakle, da s njemu šalje poruka, jer kako mi znam, kako će taj koordinator da znade njemu ta poruka potreba nam. To jest. Koordinator treba prvo da primi zahhtev za dohvatanjem poruki i tu opet možemo da fražemo dobra, ako je baffer prazan, onda nećemo da prihvatamo te zahhtev za uzimanjem iz baffera, već čekamo da prodjuša rubace neki podatak, a u slučaju, dakle, da imam podataka, ja ću da primim tvoj zahhtev i odmah ću da ti vratim resultat. Tako da tu, kažem, postoji mala razlika i u većinii zadatak je, dakle, bi treba da zaključite kada nešto može, kada ne, dakle, nije ima smisla od konsumera, on stavno da samo da prima poruku od ovog naša baffera, zato što, kako će, može, i pri tom kako će baffere da odloči, opet, dali treba da čeka da primim prodjuseri ili samo da šali tu neku poruku nekom od konsumera, pak oprimi primi. Dakle, nemože on zapravo, isto, tako, dakle, što je, što može još da bude provno, ako konsumer samo prima poruku. Da, ja sam blokiran dok neku tu poruku ne pročita, dakle, dokod konsumer, dakle, neprimi poruku, mismo onda je u slanju, i rekli smo, slanje nije, ne može da budu u gardu, nego smo, dakle, u nekom bloku, gde samo šaljemo tu poruku i dakle, tu smo sve dok neku od njih neprimi, a u međovremenu, možda imamo dosta mesta u bafferu i da dosta producera čeka da ubaci elementu u svoj baffer, na svoj baffer, nego čeka da ubaci elementu u baffer i dakle, ovdje onda imamo, opac, sa neke strane, tjednog, za malo, zbog toga što produceri mogu da ubace, a ne ubacuju, a ovdje imamo, dakle, konsumeri koji treba da pročitaju, ali ne čitaju. Mora da se vodi računa o tome da stvari teku, ako mogu da teku. A onda, kako treba da nam izgleda zadatak, neću malo drugačiji da go uredim nego ovdje što je nam, ovo je na zlatvima, i racimo, ispisat ćemo i kako radi producer i konsumer. Baff, dakle, što imamo, nakle imamo, ajde ovako, i od 1 do, i od i, pa oni su to produce, pa onda imamo, recimo, jot od 1 do m,
 consumer od j, rade consumer i takve reakli smo imali taj koordinator a ne znam jer ga ćemo je zvati od ccb od, recimo metopu Dobro, dakle, sto nam radi producer? Ope, ne zanimo nas koliko dugo i šta radi, ale dakle producer ubacuje neka bude int item i jednako tri tačke, kako god možemo da kažemo da tu imamo poziv i ovde u nutar metoda možete imati pozive drugih metoda to je imao jednom od zadatak koji sledi ali, dakle, ovo make item je neka metoda koji se ne napravio i nas ne zanimo šta će ono da radi, ali, dakle, imamo to ka make item i onda ovom našem buffer u b šalimo pa, ajde, neka bude samo item pa, ako treba da ga ubacimo u neku u neki reper, u neku imanovanu torku urodit ćemo to, ali neka bude, ako ajde, neka bude za sada samo i, rekli smo da bi to bilo to, dakle, on ubacuje kada se primi ta poruka, on je završio, pravi novi elementi i ne zanimo ga ništa drugo zi on opet, dakle, on radi našto tu u petlji i kažemo ovako, dobro, on isto ima neka ka win item ali njega treba da pročitamo ali, rekli smo, on treba da obavesti buffera da želi da primi poruku dakle, ovdje mi, recimo, šalimo da je neki signal get da hoćemo da dohajimo poruku i onda recimo primamo taj item i rekli smo, dakle dok smo ovako stavili da ono što se šalje treba da bude ta integer, da bi ovo moglo da bude primijeno, usuprotno, malo košalimo bilo što drugo onda ćemo imati delik i dolazimo ovogo našeg koordinatora da je ovako će sada on isto ima ovu repetitivnu komandu evo to, ono, dakle, možemo pre toga da kažemo, ovako technički ono da bude jedan da vidimo, što ne mi potrebno od od podatak dakle, namo sigurno treba jedan buffer od nekoliko elementa, dakle, našto fiksna sada treba samo da vidimo kako ćemo da definišemo da je to niz, pa recimo ovako kažemo od item što nam je lakše zbog ovog modova ostataka i slično da kažemo da ovo ima od 1 do od 0 do idb minus 1 elementa i u suštini ovom smo reakli ovaj niz od elementa ne moramo, možemo ne moramo da stavimo da imicirizacija na nepovrednost, ovaj to možete su urediti kroz repetitivnu komandu dakle, treba nam koliko imamo elementa, to je treba nam nešto gdje smiještamo elemente ja znate kako sam ponunila, dakle imamo write index, read index, to jest gdje treba dopisam, gdje treba da čitam lakše od hjeditel i recimo imamo ish size verovakno može i samo sa read index, write index, ali lakše je, recimo sa veli činom i ajde, ovako ćemo odmočimo da stavimo da su sve te vrednosti na početku lakše, i dakle, onda ovdje imamo posloje repetitivnu komandu u kojem zapravo primemo ili podatak ili primemo ovaj signjom ja sad šta je ovde potencijalno možda malo problemčići dakle, ovde, kad primemo ovaj signjom, dobro to primemo signjom, dakle svoj smo je akli možemo ovako da kažemo od 1 do kako smo je akli m imamo consumera jo koji nam šalju zahtev za get i apravo već znamo da možemo da primemo u svom se za get pod uslovom da je sajz već od 0, usuprotno nemašta da se dohljava i dakle, tu imamo doponićemo posle usuprotno dakle, ajde, ovde, ako je sajz manje joj, manje od b onda imamo od produsera, pa sad koji god da je tih produsera imamo dohotanje element i dakle, ovde, ovde, imamo ajde, koji smo rakli da treba negde da sačuamo dakle, treba da imamo ovdje i 1 ajde oje ne biti u šta ovo je ok možda bi lepše bilo da ovde imamo da ipak imamo kao put nekako imenovo torku koji ime samo 1 element čisto da ne biti u bilo nekakve zaponje dakle, ovde sad tražimo element to je sad ne tražemo dakle, pšalje nam se nekako torka i to se sad tu poklapa i dakle, ovo jajte mo da ovde će da bude upisanu ovoj jajtem i šta radi onda poslo ovde koji Žimer što je što se deshava sami element mi što se deshava solid, pa to je put item, get item, što smo pričali što smo nekoli dakle, u buffer od stavimo get read index ali sad poslo je to u ovom bloku to je nismo pročitali već ovom stolu da se malazi dakle imamo ovaj item koji je read ovo koji pročitamo read index uvećemo i size imamo jednostko drugog ali bezem dakle, size smanimo i onda onda mogli smo jedno da pošaljemo ovom našem c od j, dakle, ta je koji je tražio element šaljemo mu, ajte opet možemo da se stanjimo ovako koćete već, ako koćemo sve jedno u sušti ovde mogli smo mi i odmah da pošaljemo recima mogla je ovako bez ovo gajte dakle, kažemo odmah buffer od r i to je neki integer i njega, možemo direkto da pošaljemo dakle možemo odmah da mu pošaljemo vrednost a onda poslami sredimo što imamo sa našem bufferom i ovve valeno što više i manje koji da imamo i manje se bujimo u kogog item tapu da može da se se reši i to da se objevamo da smo mogli ovdje možemo zastajemo put buffer od write index može da ne bi smo ovde kada dobijemo element rekli da na buffer od write index upisujemo taj item koji je stigo i to može da se skrati, ali ajde ovdje ćemo onda ovako da ga ovdje nam palim i podim i dvije, dvije, dvije dvije, dvije
 OK, ovdje je. Tla to bez pud snap so stavlji dit. accessory. Prima malo, isto nakon ako smo rekti malo druga, če je zovemo ove signale, ali takve, i ovde odmog smo upisali u bafferno određeno mesto i to smo odmah upisivali s ovom matematikom, varvacite na reču da je dobro određeno, ali takve ovde je recimo fiksirano, da nije mn i b, nego da imamo otakčeno 10 alamenta, 5 prvi usare i 6 konziferijani, tako na što. E, dobro. Pre nego što počinamo ovaj faktorijel, ja bih vam savjetovala da probate sami da rešite readers writer stalom pa u nekom trenutku, verovatno svoje reće medelje možemo, zavisi tog ako nam bude ostalo u vej i vremena, ili ćemo ga raditi i zajedno ili ćemo ubaciti neko rešenje patencijelno, readers writer problema, ili u prezentaciju, ili samo kao ovaj file, znači da vidite kako to može da se uredi, a pričom dakle i kod readers writers predpostavite da je to neapodan neka koordinator, da ne mogu oni medžu sebno da se dogovori koje, koje narjedu i kako treba sad obratiti se svim pisima da se proveri da oni pišu, oni su sretisanje, tako da je tako to definitivno ne može nikako da bude, da oni medžu sebno samo se dogovori, ali ono što išto treba da povedete računa, jestli za ne napravite readers preferer, readers preferer trešenje, tako da, ali recimo ono što bi eventunom moglo da se možda da se uredi, jeste kao se nešto slično što sradi kod onih sandočića, da recimo aktivni monitorima i čak i bez njih, da u trenutku kada vam dođe zahtje koji ne može biti obslužen zbog toga što mi se ušprnili uslužiti, napr. pisac ne može da počnu da piša zbog toga što ima aktivnih ili čitalaca ili pisac neki drugi, i da onda odmah tu u tom bloku vi sačekate da on i završe, da biste onda to pisac koja vam je tražio da piše, odmah postili da radi, dakle da na neki način napravite kao fifon, da pričamo to fifon i kada ne može da bude baš pravo fifo-fifo zbog toga što reklismo svi oni ako isto vremeno šadno zahtje na ne determinističke načince jedan od njih biti obsluži. Ok, esat, imamo ove zadatec sa factorial u gdje koćemo rekurzivno da izračunamo factoriala rekurzivnom metodom do odrađenim granice, to jest ako imamo neko n koje je manje ili jedna ko od broja učestnika koji ovdje imamo, onda možemo da izračunamo. Zat kako je ideja da se odradi ove zadatec, pa ideja, dakle, korisnik nam pošalje neki broj n za koji on želite izračuno factorial i mi onda kažemo dobro, dakle napravimo ove lanaće, kažemo dobro, šta n factorial, pa n factorial je n-1 factorial puta n. Dakle, ne moram ja sada množen sve te brojeve, mogu da pošaljem neko da mi izračuno ono factorial za jedan manje, što je i radija refuzija i onda taj rezultat koji dobijem, pomnožem sa n koje sam dobila i vratim korisnikom. U suštini svaki od ovih učestnika u lancu funkcioniše na isti način, kao, ponošto vam pravosa priča kad ima tem neka ka prsten ili filterskom režu ili nešto sličan, dakle, svaki od učestnika se ponoša na isti način, sem ovdje u ovom sluču evento ono ovog prvog, zbog toga što on dobija od korisnika, a ne od nekogodom svojih, nekogodom svojih kolega. Dakle, svaki od ovih ovde dalje čorova, dakle, dobija neku vrednost 10 i sad u slučaju da je ta vrednost 10 došla do 0. Nolo faktu je, možeće čak i da se stavi korakranija, ako je ta vrednost 1, onda kažemo 1 fakturija ljede 1 i da tu onda kažemo, ki je ti dalje neće što je punoš, nemo šta šta dalje da šaljem nižemo lancu nego učodno da vratim tu jedinico da se propaja gireka ka korisniku da kredno se noža ovdje vrepesti. Dakle, da, da, da pređemo ovde, pritom, a ovdje vidite ovdje nismo pravilim posebno metode, nego smo hodno u ovom paralovnoj komandini napisali ova šta se tešava, dakle, od predhodnog lancu dobijem neku vrednost 1, ako je ta vrednost 0 ili 1. S omovom je vakso poradjen izgledo ga više koriste se 0 u slučavima. Dakle, ako je 0, onda vratimo rezultat 1 u subratnom, kažeteš dobro, one i sledeće lancu trabalim izrečuna za vrednost 1-1, kada dobijem, onda, dakle, rezultat koji on srečuna, ja sačuamo neku svoju lokalnu promenji vom r, dakle, taj rezultat i onda, onom koji je meni slavu 1-1, pa ja mu vratim, paralovom koji mi poslo 1, vratim 1 puta rezultat koji je izrečunat u lancu. Ako da tako propagiramo. Malim pitanom možda, u našto što smo da sad radili. Ima ovaj zadatak sa skupovima, koji ne ratimo već više eventuano pro komentarišamo samo šta se tu dešava. Dakle, treba da prestavimo skupo navješelj 100 celih brojeva kao proces s, koji prihvata dva tipa instrukcija od pozivajćeg procesa x, dakle, ubacivanje u skup ili provera, dali neki broj pripadat o skupu, gdje, dakle, neko pošalje hez broj, dakle, da signlizira proveru, a onda mi njemu vratimo b koje je troj ili false, uzavisno se toga, dali postoji ili ne. I u počerkoj skupraza. I dobro, veram da biste umeli sami da, ovo rešite, dakle, imam sadrža i skupaj je neki niz od stojar menata i, dakle, šta može da si desipa, može da tričemo ovaj intergrirutni trebalist, udobu dobio da imat. Ali, dakle, mogu da nam stignu dva tipa poluka, hez ili insert. I to je u alternativnoj komandiji. Nebitno je šta ste ime kad ste ime prvo, to stiša. I ona u čemu je možda taka, s ovim zadatkom je da iskoristimo ovde i jednu metodu search, koja će da nam u suštini pretraži skup za nas. Dakle, i u bocivanju u skup i provera dalj element tipa da skupu, dakle, zato što, kao što znamo, ako element već postoji u skupu, onda nećemo ponovu da ga ubacujemo. I, evo nam je ovde ta pretraga, koja je fali od jedna ukljeste zagreda. Dakle, krjenemo od i jednog u nula, evo je for petlje napisa nam u csp. Dogod je i manje od size. U nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u nula, u
 pa sajzije ili koliko godimo malo elementa. Ako je element na pozici i različit od onoga koji tražemo pričemo, ovdje bi trebalo verovatno da imaju neki argument n, ali, ajde. Dakle, ako je element različiti, onda i se uvećeva. Dakle, ovo je jedan uslov za ovo repetitivnu komandu, ovdje ne znamo što je tačka za arinu, ću me da izmenimo. Dakle, i je manje od nola i manjec i element na toj pozici nije n, onda se pomeramo. U slučaju da ne omoviše elementa ili da smo našli taj, ovdje ću se prekino ti ta repetitivna opravdu. U slučaju da smo samo tražili element, dakle, imamo i na nekoj pozici i a koji je to i manje od sajz, to znači da je element pronadjen negda linizu i u suštini rezultat hoga poredjena vraćemo kao rezultat ovog upita, da li je nadjen element ili nije. U suprotnom, ako nije bilo elementa, ovdje smo prekinovi zbog toga što je i bilo jednoko sajz, to je false, dakle, onda završava se zbog tog razloga ovo repatitivno komande i ovdje će to false biti naća. E sad, slično stvar je i za ubocivanje. Ako je s tim što ovdje u zavišnju sve toga dalje je, ima ni od sajz ili nen, a što radimo nije samo da imamo ovaj rezultat. Dakle, ako je nadjen element, pa onda je u skupu, ne radimo ništa samo preskačemo, tako imamo i ovdje skip, dakle da se ne radimo ništa. U suprotnom, ako smo ubacili element, to jest, ako element nismo našli i ima mesta u skupu, tako i to nam je u slu, onda samo na kraj niza dodamo ta element, uvećemo u elementu skupu i to da. To je u kratku tog, da je čisto da vidite da mogu i da se koriste metode u metodama, dakle da mogu da se prave pozivi metodani u unutar, u unutar csp, dakle da ne morate isti ko da pišete više kupa. Esad onda ovdje imam u suštini kao da se, da se pravi iterator za ovaj skup, to jest da se pozove scan i do god imala menat, da se zovem Next u trenutku kada više nema menata, ovdje da se znao da je u kraj skinirani. I u suštini, samo sekundanom, pali neko Next, da to je ako neku pozove scan, kažemo dobro, svaljem Next Next elemente. Kada više nema menata, kažemo, man left i to je to. Dakle mišta komplikovanu. Pričem ovdje smo opetis koristili da odmah ubacimo element u ovaj dignal. To je to. O nemoj još v skup gde sad da imamo da se skup zapravo nalazi u nekim procesima, dakle da svaki proces sadraži po nekim element ovog skupa i da onda na taj način on bude realizovan. Pa malo se onda razlikuje situacija. Dakle, sad ne prolozimo mikroz niz, nego šalimo zahtjeve ka sledećem elementu i onda takve provervamo. Pričemo, dakle, da bi bilo efikastnije skup je sortiran, tako da možemo i ranije možda da završimo pretrogu. Dakle, ne moramo da šalimo u nedogled zahtjeve, nego takvo o nam trenutku kada znamo da smo došli do elementa koji je već. A ni ne znam koja strana je sortiran, ali dakle, znamo da onda tad mozemo da tekinemo rat. Dobro, i to ne bi smo produžavali, nogočasno ćemo ovo možanje matrece da ostavimo na sledeći čas. I prugači u verzi ovih filozofa koji ćemo pričati u odnosu, dakle, na ovu što ste mislim, u prvju put videli možda već i na opretimim sistemima. Dakle, da imamo nekakal ticket koji prijima, možu, dakle, samo četiri pute da se šaljem, ticket, to jest 1-1 kogodima u sledozofa. I da, dakle, na taj način izbarnova dedlog, dakle, tu onda je i taj run izigrava proces kao semofor, naracimo, i fork izigrava kao proces kao semofor. A, dakle, drugo rešenje bi bilo da ne budu i fork procesi, i run procesi, i filozofi procesi koji svi medjesomno komuniciraju već. Dakle, da ne budu ovo kao distribuirano rešenje. Mislim da ste pričali o tome na opretimim časima kad su bili oni sandučici. Dakle, da sve to budu kao neki procesi učesnici, nego da imamo kao centralizovanu vereziju, nešto slično ovim prodjuse koživomar problemu koji smo ispričali i redistr, redistr, svoj sami vjag da probate, duredite sami. Dakle, da imamo neki proces koji način je filozofi samo da šalju zahtive, nešto ide kao, možda, kao kojdu monitora što radja. Dakle, vi kažete, ja koću da počnu da jadem, nekomem kaže može, i onda vi jadete, i na kraju kažete ja završio, i da je každa dobro ti se završio da vidimo da može neko sledeći, ili tako, zapravo ne treba da vidi da može neko sledeći, nego samo će da promeni stanje tako da on neko sledeći može da jede. I dakle, ostaje i ovo izračunovanje integralu, u suštini, po ostajnom beg of tasks, pa, evo mnije se da ću imati dovoljno vremena sve to da ispričamo. Sve da će najbelje. To bi je onda bilo to, bala na pažni, pa se tvojemo i vidimo. Ako imate pitanje, tada je trenutak. Znači, ovo je. Dojdje nje. Dojdje nje, uživajte.
