 ako ne želite tako nešto, a onda imate neko drugačije rješenje. Znači to mogu da bude prsten, a možda bude zvezda, možda bude neki graf. No, vež, bomo bi trebalo da ste već radili. Odrđivanje, onosno slanje poruka kroz neku brežu. Ta breža može biti jednostavna ili malo složenija, gde vi možda znate u napretu o pologiju čitava breža, a možda znate samo spisa kvaših suseda. Jer to može znatno-znatno da promeni kompleksnost rešavanja odgovarajućeg problema. Da li znate čitav problem, čitav doseg problema ili znate kako izgleda samo taj vaš lokalni čvortu? Ukoliko znate kompletnu topologiju breže i to svaki čvort zna, onda može da se napravio neka optimizacija kod algoritmo transporta poruka. Ukoliko znate samo lokalno taj deo tu kod vas, onda ćete možda poslati veći broj poruka nego što je to optimalno. I sad je pitanji, a šta je bolje? Ukoliko je breža statična i koliko je to uopšta vamo potrebna. Ako šalite jednu poruku i uvek leom susidu baš vas briga. Ali ako broj poruka treba da se pošalje, da bi se nešto odredilo i nešto rešilo, bude kvadratni ili na treći. U odnosu na broj čorovam reže, a to može malo da bude previše. Možda onda se desi da se mreža zaguši, da ima toliko transporta, da to uopšta nije dobro rešenje. Tako da vodite računa, kad rešala te ovaj synchronizacijone probleme, kako izgleda topologija breže? Koliko će broj poruka, koji se transportuje u tim slučajima biti? Tako da ću mi ovdje, veratul, ako svakog od ovih problema, razmatrati i koliko poruka ćemo da pošaljemo, prosladimo izmidljove čorova i koja veličina tih poruka. Jedno je da pošaljete malu porugu, veliki broj, malih poruka, a drugo je da pošaljete relativno mali broj, velikih poruka. Šta se više isplati? Zavisi kako je to mali broj i zavisi kako je ta poruka velika i kako je to sveša rasporedženo tokom vremena? Dali se sveša je isto vremeno ili je to neprekibno rasporedženo tokom vremeno? Znači, isto i od toga zavisi brzina rada čitavog sistema, jer se desi ako te poruke, tih poruka ima previše, da se potpuno zaguši rad našem reža. Mreža kao fizički resurs, a nećemoći da isporuči toliko brzdo, toliki broj poruka, kako mi možemo nek'h generišimo. Ok. Kako izgleda centralizovanu rješenje, kut koga određujemo minimalnu i maksimalnu vrednost? Centralizovanu rješenje je pod okužom jednostavno. Proces P0 je koordinator. Proces P0 će odrediti minimalnu i maksimalnu vrednost. Svi ostali procesi. Svaki od ovih procesa od drugih treba da pošalje poruku sa svojom vrednošću, tom centralizovanom, to je proces P0, i onda svaki od njih treba da sačeka odgovor od procesa P0. Proces P0 će odrediti šta je minimalna vrednost i šta je maksimalna vrednost. Dobro, koliko poruka je svaki proces poslava? Kad pravite, ovako, kad rešela ti bilo koji problem, treba da sberete koliko ima poslatih porutka i koliko ima primljenih poruka. Ako je suma ta dva različita, nešto definitivno nevalja. Iste poslali premalo poruka, pa može doći do dedloka, ili ste poslali prevište poruka, pa imate džubre u sistemu koje može prilikom naredne neke komunikacije da napravi neku nedozvodjenu situaciju. Kada rešavate zadatke, treba da proverite. Dali je sve ono što je napravljeno od poruka i poslato? Znači, dali imate ukuplno prijem o nuliko poruka koliko imate islanje? Ako nema, nešto definitivno nevalja. Ili će ti imati dedlok ili neko nekonsistentno stanje sistema? Tako da to je jedan od najjednostavnih način za proveru. Mislim, ako je to ispunjeno, ne znači, dalje je da program radi. Ali ako to nije ispunjeno, program definitivno ne radi, radi nešto, to nije ono što treba da se odradi. Dobro, što smo sada reke, koliko ima poruka koji svaki od ovih treba da da pošalje, svaki od čvorova treba da pošalje po jednu poruku. Od ovih 1 do n minus 1 treba da pošalje. A koliko čvor nula treba da pošalje poruka, pa on treba da pošalje svakom susidu jednu poruku. To je, ovo je bilo, n minus 1 puta po jedna poruka, a ovde imamo jedan šalje, a n minus 1 poruku. Dva neki promenjali, u sluštini sada ćemo brojiti samo u kupno poruke. Poštovo, da sam poslo jedan byte, ja sam poslo dva byte, je krajnje nebitno kad nešto šaljete, jer imate komunikacijone troškove koje će na to jož da nakacze za glavlja raznorasta. Šta smo rekli, šta nam je potrebno mi smo ovo razrešili? Svaki proces ima pojedan komunikacijoni kanal. Šta sam reklao sada? Svaki proces ima pojedan komunikacijoni kanal. Jer to mora tako da bude realizovano, pa ne mora. Či vidite ćete i neke zadatke, gde su neka rešenja postala znatno jednostavnija, a u koliko procesi mogu da imaju više od jedno komunikacijunu kanal. Znači, postoji to kao mogućnost da postoji više od jedno komunikacijuna kanala, samo što to onda nije definitivno aktivni monitor, a dalje neko od ovih preostalih rešenja pa to ćemo videti. Ož da jeste, možda nije. Kako izgleda kod? Či kod? A ovdje imamo dva procesa koji treba da komuniciraju, koristići asinkronu komunikaciju. Postojićemo, iste ove probleme. Probati da analiziramo sa drugog aspekta, a to je, a šta ako postoji synchrona komunikacija? Ja se bilo šta menja u našem sistemu ako postoji synchrona komunikacija. To je komunikacija. Ja čekam da ona i drugi primi poruku. Synchrona komunikacija ili kako bi ovde moglo se nazove randevu. Randevu sa dva učestnika. Dobro, šta radi ta proces P0? Proces P0, na početku, odradi lokalni minimum i maksimum. To će biti jednako to je našem promenjivo i ve koji imamo. I treba da se postavi, da se još krjera jedna promenjiva koja kaže šta smo dobeli. Šta sad meši treba da radimo? Sa treba da primimo, a od svakog našeg suseda po jednu poroku. Šta se sad rekao? Treba od svakog našeg suseda. Što je isto u obovde st konkretnu stučuju kao i od svih našeg suseda. Sada nekoma možete kajša. Čekaj, koja je razlika? Od svakog i od svih. Ako od svakog pojedinačno treba da dobijem, onda bi verovatno ja očekivo da mi poruku od prvog suseda, da mi poruku od drugog suseda, da mi poruku od trećeg suseda. A tu mi je bitno verovatno i u pokom rednostku sam ja dobijem te poruke. A ako treba od svih da primim? Majok, ja treba u kom na kojem 10 suseda, treba primim 10 poruku. Ovšte neću da razmatram, a pokom rednostku da ću ja dobijeti te poruke od novih okolnih procesa. Tako da dosta često ovo mošete da iskoristite kao nešto što ubrzava izvršavanje vaših aplikacija. Dali ćete da pošadite poruku svakom ili svima? Šta znači svakom? Svakom znači svakom ima svoje poštiskosan učin, svoju ima svoj komunikacijoni kanal u kojoj to mogu odubaciti. I sad je to možda pitanje. A ja svakom ima pojedan komunikacijoni kanal. Nemora da bude. Moš se desiti da svaki proces ima sa svaki procesom komunikacijoni kanal. U tom slučaju bi smo imali jednu matricu komunikacijoni kanala. Znači, bi bilo bi puno te komunikacijoni kanala. Svaki čvor bi imao, svaki od tih n čvorova bi imao u suštini n-1, tih kanala kroz koji je i da komunikacija. Ali ovde za sada to nema, baš nasbriga od koga dobijemo poruku. U on konkretnom slučaju želimo da kažemo, Request, znači, Recev, u to ponima jedno komunikacijoni kanala koji se zove Velius, kažem daj vrednost, i onda odredimo tu trenutno lokalni minimom. On je lokalni globalni, kako dolaze, taj minimom će postati globalni minimom, odnosno taj maximom će postati globalni maksimum. Odredjimo, odredjimo, odredjimo. Kada smo sve to dobilili, šta je onda potrebno dodaćimo, potrebno je svakom susedu, odnosno svakom čvoru dodaćimo da pošljamo poruku. Šta sam rekao? Šta znači ovo svakom? Treba dodaćimo od jednog do drugi, kažem, Evo ti prvi susede poruka, drugi susede, Evo ti poruka, treci, Evo ti poruka, četvrti.