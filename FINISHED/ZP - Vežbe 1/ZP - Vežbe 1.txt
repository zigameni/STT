 Ok, gledam da sam uključila s njima. Kam što rekku da tletilja ovo predmeta je da se upoznamo generalno sa konceptima zaštite podataka i to ćemo raditi prosto kožnekoliko različitih aspekata. Jedan aspek će nam biti proste razumevanje osnova kriptografije i to je ono što ćemo raditi u opšto prvom delu kursa, zatim neke sigurnosne protokole, također ćemo se upozniti sa rizicima u mrežnom okruženju i generalno sa svim njivojima na kojima mere zaštite treba da budu uvedene i to ćemo raditi na nekom opštem njivolu, tako da praktično imate neko znanje u svim ovim segmentima i da kasnije u koliko vas to više zanima, možete odnosno da znate kako da su upoznate preciznije sa nečim konkreterijem. Također, pričećemo i o pojmovima detekcije, sprečavanja i neutralisanja narušavanja sigurnosti, znači kada detektuemo što je to što prekstavlja potenciolnu opasnost za neki je naš sistem. Što su dica samo programa predmeta, kako što vidite, odnosno ne vidite, zato što u koliko pro i plus ušla to ove kursa, ali ja ćemo mreći, detle malo smo modifikovali sami prezentacije i također smo malo modifikovali i sadržaj kursa, dakle nešto što se tiče i samog redosta da stvari kako ih pričemo, nešto i time što smo u neke teme promenili, odnosno neke teme ubacili, tako da mi ćemo mom redovno kakle kačeti materijale, kako ih pričemo na časovima i generalno dakle zbog toga ću vam samo ovde ugruboreći kako funkcionišlo, odnosno kako će izgledati program ovoj predmeta, a naravno precizniju podelu ćemo vidjeti kako obrađujemo, koju oblasti pojedinočno. Nakončetno se bavimo simetračnim algoritmom štifrovanja. Nakončetno ćemo raditi štifrovanja pomoću javnog ključa da klasimetračne algoritme i hešfunkcija. Nakon toga obrađujemo aplikacije za bezbernost u računarskim rešama i kao poslednju neku veću oblast pričemo o nekim opštim modelima zaštite računarskih sistema. I zada, ono što vas verovatno najviše zanima na samom početku je kako ćete zapravo moći da položite ovaj ispit, odnosno koje su proposicije za samo polaganje. Dakle, negde se ta ocena deli na neki praktični deo i ta praktični deo se ovde odljuda kroz laboratorijske vežbe. Laboratorijske vežbe nosi 15% ocena i mi ćemo se potruditi da ove godine oddržimo te laboratorijske vežbe koliko godi je to moguće normalno u ovim ustovima koji trenutno poslojem. I laboratorijske vežbe odnosno pojeni zapravo koji su osvojeni na njima važe samo jednu školsku godin. To znači da ukuliko ste slušali predmet i predhodne godine i dakle, pojeni se poništavaju, te zbog toga ove godine ponovom morate polagati laboratorijske vežbe ako želite ovih 15% ocena. Dakle, tipo, jedni važe cele školskog godina. Osam toga imamo i deo, dakle, ostatak ocena su dobijao kroz neki pismenji ispit, deo se odnosi na coloquium, dakle, gradivo koje je bukvoćeno kroz neki prvi deo, dakle, taj coloquium-ski deo i ono nosi 40% ocena. Međutom, pojeni sa coloquiuma važe isključivu prvom ispitnom roku. Dakle, za ovaj semestr to je junski ispitni rok i u tom nekom smislu, dakle, moguće je i nadoknada coloquiuma i to će biti takođe omogućeno u junskom ispitnom roku. Dakle, tip 40% ocena. Ostatak se połože kroz ispit, te tako praktično u prvom ispitnom roku možete ispit polagati parcijalno. Što znači, možete, ako ste zadovoljni pojenima sa coloquiuma, polagati i samodel gradivo koji se odnosi na prostog gradivo koje ide nakon toh koloquiuma, dakle, poslednje oblasti u ovo semestru, odnosno u to, u ovom kursu i tada, taj ispit nosi 50% ocena. Međutim, ukoliko ne završite, dakle, sve u prvom ispitnom roku, nadalje se ispit možno isključivu polagati integralno, dakle, koloquium više ne važi, kao što je piše, i u tom slučaju ocena, odno, u oceni praktičnove ispitni deo učestvoje, kao 85%. Kao što možete primetiti, u junskom roku postoji neki mali bonus, pa je to zbog toga, da taho kažem, mi vas motivišemo da radite više dokom samog semestra i da iskoristite ovaj bonus koji imete u prvom ispitnom roku, jer je, dakle, lakše se dolazi do boljih ocena. Što se tiče formiranja same ocene, kao što vidite, dakle, ocena se formira na jednico, tako da studanti koji imaju 91 pojen ili više dobi ocenu 10, oni koji imaju 81, a manje od 91 ocenu 9 i tako dalje, dakle, 51 pojen je potrebno da bi se položio ovaj ispit. Što se tiče literature za samu pripremu, ispita, dakle, dolazi, naravno u obozir, sve ono što pričemo na predavanjima i vežboma i kao što rekok na samom sajtupredmete, dakle, nalazi će se svih materiali koji su obrađivani na predavanjima i vežboma. Osim toga, mi radimo, dakle, ovaj kurs je koncipirat, ili bar njegov jedan del je koncipirat na knjizi Kryptografija Network Security i u tom smislu, dakle, ukoliko vam je nešto nije dovoljno jasno, niste pitali ili prosto želite da se uputite u neke detali koje mi ovde nam brađavimo, naravno, ovaj možete to pogledati u ovom knjisi. Predmetni sajt, dakle, nalazi se na onom sajtu RTA i katedre i tu ćete praktično imati, kao što sam reklo, postavljene materiale, imate neke predhodne rokove kada bude došlo vreme da se provežba i uz zadaci za kolok, za kolok bilne odnosno ispite. Što se tiče sanih obaveštenja, dakle, obaveštenja šadimo i pute mailing lista i na teamsu, tako da objevezno pratite, dakle, mailing liste, pratite teams, ukoliko do sada to nisto učinili, prijavite se na kanal i, dakle, na taj način se prosto distribuiraju sva obaveštenja. Što se tiče nekih pitanja koja možete imati, dakle, vezano za samo časove ili za propositije i rishtagod, naravno, možete se obratiti bilo komod nastavnika, uvek je najbolje da pitate nešto nastavnike koji su, dakle, držali to ogradilu, znači, ukoliko se radi u predavanjem da se obratite profesorima, dok ukliko se radi u nečemu sa vežbi, obratite se sa nama, ali, u principu, nema nikog problema, dakle, ukoliko potrebno neke dodati na informacije. Dobro. To je to što se tiče, dakle, nekih okštih pogleda na ovaj kurs i, dakle, pitanja organizacija. Dali možete imate neko pitanje, vi sad za mene, vezano za ovo što sam do sada ispričala? Nemate. Dakle, sve jasno. Ok. U principu, kada postavnjete pitanje, neto jedno malo nakvomena, jednostavnije da se uključite u program i da tako postavite pitanje, nego da pišete na četu, zato što možete ja neću vidati istog tog momenta, tako da je jednostavnije, eto, ako imete bilo, u koje pitanje, dakle, u toku samih časa slobodno suključite u program i postavite pitanje. Dobro. Sada ću ja podeliti prezentaciju za prvu, prvi čas, prvu našu temu. E. Tu je prezentacija. I kao što vidite, danes počinjemo sa nekom temom, koji je nije bar na prvi podlet, dakle, striksno vezana za samu zaštitu podataka, već je nekako više matematička. Tema se zove uvodu teoriju brojeva i konačna polja. Izbog toga, dakle, danes i čas verovatno neće trajati, kao što traju dafena, dafena, časove. Ali zašto nam je značeno da radimo ovo pre svegan? Zato što, dakle, kao što sam rekla, ovaj kurs krećemo sa temom koje su vezane za kriptografiju. U operu ti kriptografskih temom, i ćemo se babiti nekim algoritvima, koji se odnose na zaštitu same poruke, neke koje se šalje. Dakle, tipično se radi o zaštiti baš samih podataka primjenom nekog od algoritama za šifrovanje same poruke, a ne protokola ili kanala kojima se ta poruka šaja. Dakle, otona ćemo nešto kasnije u dokog ur sa pričati, takođe. Što stiče, dakle, samih kriptografskih tema. Svi algoritmi kriptografski se u manjuj ili veće meni zasniva i upravo novi nekim matematičkim modelima i sadržen neke matematičke segmente kojima ćemo suprvo babiti danas. I sad tema kao tema, dakle, dvora, većenski deo, ovo ga, naravno, vide ćete kasnije kada pređemo na same algoritme, ali većenski deo, ovo ga nije nešto što ćemo vas mi pitati direktno, međutim je definitivno nešto što će biti uključeno u praktično svaku od narodnih temo u oblastnih kriptografije koje se budemo babiti. E sada, dakle, naravno, neke od ovih tema su u vama već poznat. Izbog toga se mi nećemo dugo zadržavati prakšno tijelom već je to biti prosto neki pocetnik tog, što ste vi naravno kroz vaše rani obrazovanje naučili vezano recimo za pojem deljevosti, euklidovalgorita, modula...
 na ritmetika, dakle Ga je to nešto sa čimeste već sasvim sigurno upoznati. I nakon toga ćemo videti primjenu svega ovoga kroz recimo Mila Rabinov algoritm koji je dakle bar za većinu vas sigurno nešto novo a opet je nešto ćemo dakle obovozno koristiti u algoritmima kojima ćemo se baviti u oblasti kriptografije. I ja ću vam dakle prosto i predi u što pređemo na te konkretne kriptografske algoritme napomenuti zašto su nam praktično značeni zašto su nam značeno ove oblasti kojima danas preičemo. A opet ću provati da to bude nekako dovoljno ukratko tako da vam ne bude dosadno ali da bude sveste. Naravno da nam je ovo zaista bitno, dakle odnosno da je bitno dobar u nekoj meri se pocitimo ovi stvari da znamo zapravo kasnije kako to da upotrebil. Naravno pošto će se ovo ticeti, dakle mnogih lekcija koje ćemo raditi nešto kasnije kada budevo prosto prosili i kroz samve te algoritme mi ćemo obnoviti stvari baš ono liku koliko nam one budu potrebne. Tako da u tom nekom smislu, dakle ova konkretna danasnja tema koja nam je uvodna tema za ovaj kurs neće biti, dakle tema barvečinski ideo njenu sad neko pitanje da vas neko pitanje na testu kako funkcioniš reuklidov algoritm, već će biti potrebno da vi prosto razumete zašto je to značeno i kako se koristi u konkretnim algoritima kojima se budemo obavili kasnije u toku samog kursa. Ok, dakle kako provozimo kroz neki sedmend koji nam je značeno za algoritm, ja ću naravno na pomenuti zbog čega, kako se koristi, zašto baš koristimo ovakve neke algoritme, a naravno kret ćemo od jednostavnijih pojmova kako bi nam kasnije, dakle neke teorema i obješnjenja koja ćemo vidati, zapravo imali neki značen, znamo jo tako kako su došli, pa se prosto potoćemo ovih nekih delova. E sad naravno, dakle vi znate šta znači deljevoj s brojeva i u koliko kažemo da neki broj B deli neki broj A, to znači da prosto postoji neki čimilac, cel čimilac, tako koji pomožen ovim brojom B da je upravo tu vrednost A. To znači da praktično pri vlikom ovog delenja nema neku gostatka i kada pogledamo, dakle, ovdje imamo par primera nekih brojeva koji su deljivi, znači kažemo recimo broj 13 deli broj 180, 2 broj minus 5 deli 30, 17 deli 0 i tako dalje. I ovdje naravno su nam poznata i svojstva, koje ovde važa, dakle da u koliko A deli 1, A mora biti 1 ili minus 1, da u koliko A deli B i B deli A, onda je A jedna ko B ili 1 homo nisu B, da svako B koje nije 0 deli 0, i da važe svojstva da u koliko A deli B i B deli C, onda naravno i A deli C, A u koliko B deli neko G i B deli neko H, onda takođa ako to G pomnožimo sa nekim celim brojem i H pomnožimo takođe nekim celim brojem, njihov zbirje takođe deljiv sa brojem B. Dakle, ovo su neka upšte na svojstvo, koje su nam naravno poznata go sada, ovo je neki čisto njihov pregled, kako bi smo dakle kasnije mogli to negde da iskoristimo. Mi naravno znamo kako možemo da predstavimo neki pozitivan, ne negativan broj, cel broj A, ako da podalimo sa nekim pozitivnim brojem. N dakle znamo da u nekom opštom slučaju oni mogu biti deljivi, a to nemora da znači, tako da ćemo ovo A predstaviti kao neki činjela i plus neki ostatak. Dakle, ovo je primjer kako možemo predstaviti neki broj upravo u takvom obliku. Dakle, ja svojno mi, dakle su ova dva broja deljiva, ostatak će naravno biti jednak nulij, a u supratnom dakle, taj ostatak će biti neki pozitivan cel broj, koji je svakako manji od ovog nja. Dakle, inače, u supratnom bi ove ovde u prosto bio veći. Zašta nam je ovo značaja? Pa zato što sledeće, dakle, stvar u kojoj pričamo je pojem najvećeg zajedničkog delioca neka dva broja, i to je, dakle, jasno, najveći mogući broj koji deli oba broja, je otakno, najveći cel broj koji deli oba broja. Na primjer, za brojave 175, to je jasno broj 25. Ukoliko neka dva broja, praktično, nemaju, dakle, veći ove zajednički delila so djeden, dakle, jedanim je najveći zajednički delila, to onda možemo da kažemo da su ta dva broja uzajemno prosta. I sad zašta o nama ovo u opšte od značaja? Pa u nastaku ćemo mi pričati o nekim različitim kriptografskim algoritmima. I sada prenego što pričemo na sami detalje tih algoritama, ja ovako nekako plastično i na nekom opštem njivou mogu da vam kažem, da se ti algoritmi, naravno, jasno, međe su mnohu potpunosti razlikuju, i nače ne bi smo imali taj broj algoritama koji imamo, međutim da su oni deli nekako u grupe po nekom ostavnom načinu funkcionista. Te ćemo mi schodno tato na ovom kursu proći kroz neki skup algoritama koji se nazivaju blokovski algoritmi i koji se neki drugi skup algoritama koji se nazivaju streamovski algoritmi, odosno algoritmi koji rade nad streamom podatak. Bez obsira, dakle, što to znači, kako ti algoritmi konkretno funkcionišu, u ovom trnutku ja ću da kažem da, ono što je jasno iz samog imena, da blokovski algoritmi rade procesiranje nad nekom većom količinom podatak. Te zbog toga, dakle, samo poruka koja se kryptuje, koja se šifruje, otaku i šalje dalje, se vjeli na neke veće blokove podatak. To naravno sve prekstavlja sam del algoritma, dakle nije nešto što je uniformno, za sve, dakle, koja je valičina bloka, koliko podatak nami pospravljamo, već, u tim jasno, dakle, ono što u ovom trnutku treba da znate, da se deli na neki blok podataka, neka veća količina podataka. Z druge strane, ovaj druga grupa algoritama, koja je radi nad streamom nekim podataka, rade zapravo nad manjom količinom podataka, nekada je to bit po bit koji stiže ili neki manji čang podataka, ali u svakom slučaju, dakle, suštenski funkcionišu drugačije. E sad, zašto sam nama u ovom trnutku bitno, kada koristimo, kada govorimo upravo ovim pojmovima, pa zbog toga, što, skodno, pomen na koje, okoličini podataka i kako funkcionišu ovi algoritmi, oni mogu imeti kompleksni ustruktur ili jednostavni ustruktur. I mi ćemo u toku kursa pričati o nekoliko algoritama do detalja, pa ćete prosto vidjeti, dakle, koji su njihovih gradivni elementi, kako izgledaju ti algoritmi. Međete, možete, karakteristično, dakle, ukoliko imaju neku kompleksni ustruktur, što, glavnom, imaju blokovski algoritmi, sigurnost algoritma se dosta zastanjiva i na upravo toj strukturi kojih algoritama. Dok u slučaju ovih srimovskih algoritama, algoritam sam po sebi je najčešći izuzetno jednostavan, a, dakle, glavna, zapravo stavka, s koja obezbeđuje sigurnost, je kako se zapravo biraju neki elementi samog algoritma. Međuti, za sve, dakle, algoritme svakako, dakle, izbor nekih gradivnih elementa je obično veoma značajan i zbog toga često, dakle, su nam potrebni, recimo, neki prosti brojavi ili su nam potrebna neka dva uzajemno prosta broja i savim tim ne bi bitno da znamo, da li su neka dva broja uzajemno prosta ili miso. E, zbog toga, dakle, pričemo upravo ovim segmentima, zato što u takom nekom kontakstu, ako, recimo, imate neka dva mala broja, vićete jasno, prvo, jednostavno moći da dođete do togo je, da li su oni uzajemno prosti ili miso, ali najčešće ne želite da to budu neki baš jednostavni brojevi, zato što u tom slučaju vaš algoritm je sigurno nesigur, nesigura ne o tako, i najčešće želite da to budu neki kompleksni brojevi, do kojih je težel doći razvečitim napadima, recimo, brute force napadima. Samim tim, dakle, nije baš toliko jednostavno odrediti, da li su neka dva broja uzajemno prosta i onda nam prosto potreba neki algoritm, koji će na efika sam je način, da nam odredi tako vešto i da samim tim nekompliku je sam algoritm, i da to prosto računski bude izbodljivo. E, kao jedno desikasnih algoritama za prnalaženje najvećih zajedničkog deljeca, dakle, koristimo euklidovo algoritm, verovatno, stati kako kursionešte euklidovo algoritm, ali ćemo mi sad na brzaka čisto da prođemo u krosto. Dakle, za određivanje najvećih zajedničkog deljeca za neka dva broja A i B, važe pravilo, odnosno subina, koje se i koristio saome euklidovo algoritmom, a to je da je najvećih zajednički deljeca neka dva broja A i B, praktično jednog najvećih zajedničkog deljeca u koji postoji između brojeva B i ostatka predeljenju ili tako brojeva A i B. I to potreče iz onih pravila koja važe za samu deljevojst koja smo pomenuli i malo pre. I samim tim, onda sa ovim algoritom nekako prikazuje repursivno, kao što možete vidati ovdje, terminiramo ga u onom trenutku, kada ove drugi broj bude jednak noli. I u tom slučaju vraćemo A i to je zato što smo reklji, da svako A zapravo koja nije nola, je al tako deli neku nolu, te u tom slučaju dađe nevamo kud sa ovim algoritmom, izbog toga kažemo najvećih zajednički deljeca i ovdje sigurno A, zato što on deli i sebe, a deli i nul. U suprotnom, uko li ko nismo došli do lista i tako do kraja razređivanja ovog algoritma,
 Oslojmo moge ponovu rekurzivno upravo oslanjeviti se na ovu osobino, tako što želimo da pronućemo najveći zajednečki delilad za neka dva manja broja. I sad zapravo videli smo kako funkcioniše ova osobina. U mestu sajih brojava A i B, mi koristimo broj B i ostata predeljanju broja A i broja B. I tako ćemo terminirati naravno s ovim algoritm u nekom konečnom broju koraka i ovaj algoritm se pokazuje kao prilično efikasan za ove primje. A kako ćemo da pogledamo na nekom primjeru, kako to funkcioniše, znači recimo možemo vidjeti na primjeru neka dva broja 710 i 310, za kojoj odmah možemo da vidimo da nisu uzajemno prosti, jasno, međutim ne znamo je otaku koji je njihov najveći zajednički delilad. Da bi smo to saznali, dakle, primenjujemo je uklidov algoritm nad ova dva broja. I videli smo, dakle, kada terminiramo, ako je ove broj posto nulo, pošto to nije slučaj, pozvaćemo je otaku ponovog isti algoritm za 310 i ostatak predeljenju ova dva broja. Kako ćemo da saznamo koji je ostatak predeljenju ova dva broja, podelićemo i vidjet ćemo je otaku. I videli smo primonom, opštom oblik, koja je znamo da 710 možemo da predstavimo kao neki činilad z puta ovo 310 plus neki ostatak. I upravo, dakle, taj ostatak prosledžujemo dalje. Ove algoritm nastavljamo ovako reposivno sve dok ne terminiramo u nekom trenutku, što znači da u sledeću iteraciji pozivamo ponovog GCD, prosledžujemo manji od ova broja otako, način, njega prosledžemo i ostatak predeljenju ova dva broja. I to je kao što vidimo sada ovdje 40. Nakon toga je otako pozivamo sledeće iteracije, sve do ovog momenta, prosto kada odavde pozivamo naravno iteraciju, to će nam biti GCD od 10 i ostatak predeljenju 40 i 10. Pošto oni su deljivi otako, označi, ostatak je nula i tada ćemo moći da terminiramo i da vratimo zapravo veći parametr koji smo prosedeljili, a to je upravo broj 10. I na osmom u toga znamo da je najveći zajednječki delila s ova dva broja upravo 10. Ok, dakle, jedna od privena sam navela zašto smo, recimo, koristili ove algoritmo, možemo biti dostav pogodan u nekim algoritmima i nekim zapravo i segmentimo algoritmo, koje ćemo kasnije videti, a gde je upravo, recimo, potrebno da vidimo, da li su neka dva broja uzajemno proste. A što se tiče, pojemu modularne ritmetike, sa tim ste takođe naravno upućeni. Dakle, imamo neki operator modulo gde prosto kažemo, da, ukoliko, recimo, kažemo a mod n, dakle, rezultat je neki ostatak pri deljenju broja a brojem n. I ako kažemo zapravo da neka dva broja su konkurentna po modulo n, to će zapravo značiti da oni daju isti ostatak pri deljenju sa brojem n. To se zapisuje ovako, su ove neke tri crtice, ali, dakle, označava da ova dva broja daju isti ostatak po pri deljenju sa brojem n. Primjer, za to su recimo brojevi 134, koji pri deljenju, dakle, sa 11, daju isti ostatak i to je ostatak 1. Dobro, ono što važi, dakle, iz ovakog jednog pravila, je naravno da razlika ova dva broja i upravo deljiva samim brojem n. Takođe da, ukoliko važi da je jako konkurent po svebe, onda naravno i b je konkurentno sa a, zbog čo prosto pravila, tako što ovo znači, dakle, ako a ima isti ostatak kao i b, onda jasno i b ima isti ostatak kao ova. A takođe, ako a ima isti ostatak kao b, a b ima isti ostatak kao neko c, onda je jasno da takođe i a i c su medjusom na konkurenti. Na primer, kad biste sad ovo ovdje, primer dodali i broj 45, recimo, on je takođe da je ostatak jedan predeljnju sve danes, tako da je konkurentno sa ova dva broja. Ova će nam biti od značaja zbog toga, što praktično, kad se primenio je zapravo aritmetika po nekom modulo i pričemo operacijama sebiranja, množenja, oduzimanja koje mogu biti segmenti po jedinačnijih algoritama, dakle, njihovi rezultac je uvek vraće takođe u obseg ovog modula. Jajste, košto se radi o ostacima predeljenju sa nekim brojem n, zapravo rezultat koji se može dobiti pri takom deljnju su svi brojevi od n-jeta, dakle, to su celog brojda i vrednosti od n-jeta. Samim tim, kad recimo, primeniojte neko operaciju sabiranja i treba da vratite u odgovareći obseg, opet po modulo od n i vratićete u obseg, ista vrednost se dobija i ako ste svaki pojedinačnih sabira prvo vratili u obseg ostataka od n-jeta, pa teako onda, dakle, primenili operaciju i ponovno odradili modularno ritmetiko. Ovo način to može imeti, dakle, svoje značenje, odnosno posledice u algoritmima, dakle, gde imete, na primver, jako dosta izračunavanja, što jeste su ština koji veći na ovih algoritama, na primver, mnogom noženje ili tako nečega, i onda, naravno, praktično pojednost avlgoritem time što ga vratite u odgovareći obseg, a ne povećavate te brojve i tako onda na kraju ili tako primenijete modularnu aritmetiku. Evo ga jedan primver, dakle, deljenje, odnosno, deljenje se brojemo 8, odnosno modulo po 8, za operacije, sobiranja i množenja, kao što vidite, dakle, svaki od ovih operana, da, je upravo u tom obsegu od 0 do 8 minus 1, odnosno 7, i rezultat, dakle, ću ovih biti vraćen u sam obseg, ista stvarije izamnoženje, naprim. 2 plus 4 is 6, ili, recimo, ajde, 2 plus 7, 9, po modulo od 8, rezultat je 1. Veće tabelice od ovoga nam ne trebaju svakako, zato što bilo koji veći operand, dakle, svakako, izlazi iz obsega ostataka, pakada su uvradi primeni modular na aritmetika nad njim, on se svakako vraće u isti obseg, pa bi prosto takvi podaci bili jasno redu dancki. Okej, ovaj prvi uvodni ideo smo, dakle, prošli. Sleće teme su nam formalova teorema, koje će nam opet služiti i sklučivo da bi smo videli šta je ojlerova teorema, a ojlerova teorema će nam služiti za neki konkretan segment algoritmo, o čemu će pričati kada dođemo do toga. Šta nam je, takođe, dakle, čeststvo od snačaja, a to je da umimo da razlužimo neki broj na proste faktore. To znači da odredimo, dakle, da ga svedamo na proste činjoce, na proste brojave i da vidimo je, tako, dakle, za kojim stepenom se zapravo ti prosti faktori javljaju u samom broju. Šta o to znače? Pa recimo, na primerima, brojava 91, dakle, 91.7 x 13, pa vam je to 7 x 13 x 13, ali recimo, broj 3600, i je, dakle, u sve bi imamo proste faktore 2, 3 i 5, međutim, dvojka se nalazi četiri puta, trojka se nalazi dva puta i petica takođe dva puta, i tako se ove broj prosto može ovako razložiti na proste faktore. Zbog toga nam je često za ovaj algoritme dobro da znamu, ili tako šta su, nače, prosti brojevi, često imamo i neke tablice koje će da nam predefinisano kažu zapravo o koji prosti brojevi posloje, jer nam je to o snačaja, naravno, da bi smo mogli da utvrtimo da li smo dobro razložili ovom, međutim, nešto kasne ću vam je malo više pričati o značanju ovih tablica, zašto i gde ih koristimo, gde ih ne koristimo i koji je razlog za tako nešto. Sava formal ovate vrema kaže da ako imamo neki prosti broj t i imamo neki pozitivnice o broje a koji nije dađi sa p, dakle, u zemno prost, tada vaši da, a kada steplnujemo sa p-1, dobijemo da ostatak 1 po, kada delimo zapravo sa p, znači, congrantno sa 1 po modulu od p. Ova formalova teorema, dakle, će nama služiti i slučivu u formi da bi smo mogli da nekako razumemo ojlarovu teoremu koji na dalje koristimo, a ojlarovu teorema se zasteva na kojemu ojlarove f funkcije. I, dakle, konkretno ojlarovu f funkciju ćemo koristiti kada budemo radili r sa algoritmem za šiprovanju, što ću biti već kroz nekoliko časova, dakle ćemo mogu svega guviti jedan segment koji ćemo i tada pominjeti pa ćemo se pocetiti. Sve u svemu, dakle, o čemu se tu raće? Videli smo, dakle, da u ojritmetici po modulu od n potponi skupostataka vam daje neki skup brojva cijelih, koji su iz opsega od nula do n-1, dakle, dajvom sve brojeva iz opsega od nula do n-1. Naprimer, za broj 10, to će biti dakle svi brojevi od nula do 9. Međutim, ono što nas zanima je nešto što se zove redukovanju skupostataka. To znači da počevši od ovog potponog skupostataka, treba eliminisati neke brojeve i tako doći do tog neku redukovanog skupa koji možemo iskoristiti dalje za nešto. Taj redukovanju skupostataka, odnosno broje elementata u tom redukovanju skupu ćemo upravo nazivati ojlerom fu funkcijem, dakle, vrednost koju ima taj broj elementata u redukovanju skupu, predstavlja ojlerom u fu funkciju. Sad, kako mi uočite dobijemo redukovanju skupostataka? Pa položemo od ovog potponog skupostataka.
 skupostat. Dakle, u ovom slučaju, od brojeva u obsegu od nola do devt. I iz dogo skupa treba da eliminišamo sve one brojeve koji nisu uzajemno prosti sa brojem n. U ovom konkretnom slučaju mi ćemo eliminisati nulu, eliminisat ćemo dvojku, četvorku, peticu, šesticu i osmicu, zato što nisu uzajemno prosti sa brojem 10. Kada to uradimo u redukljivom skupu, nam ostaju brojevi 1, 3, 7 i devt. Dakle, njiho ukupe brojevi 4. I samim tim će upravo vrednost ojlerove 5 funkcije biti tačet vorka. En sad, kao što reku, vrednost ojlerove 5 funkcije, dakle, ima svoju konkretnom primjenu u nekom i nekim zapravo algoritmima, mi ćemo i vidati dafleto na primjeru RSA algoritma. Mi ću viditi, dakle, možete vi postaviti sad pitanje, dakle, kako ćemo mi izračunavati zato ojlerove 5 funkcije. Zato što ja smaku želimu da je primjenimo na dovolj nekim malim brojem, nam sigurno nije problem, je otakvo da formiramo potpunisku postata, kada nakon toga uklonimo one brojeve, koji nisu uzajemo prosti sa n i da dobijemo redukljivom nisku postata. Mi ću viditi, ako ukliko tu imamo neki veći broj, onda, na�emno, to je sve računski zahtevno. I mi u principu, u glavnom, ne želimo da to radimo na takam način. On što je dostopogodno, je što za ove algoritme, mi koristimo neke namenske vrednosti i na osnovu tih vrednosti se recimo ova ojlerove 5 funkcija izračunava jednostavnije, nego što je to slučaj u ovom nekom opštom slučaju, kao što je u pitanju za broj desit. Recimo, kada se radi o prostim brojavima, ojlerove 5 funkcija ima uprvo vrednost, dakla ako je neke p prost broj, ima vrednost p minus 1. Zašto je to tako? Pa kada formiramo potpunij skupostate, kad to su vrednosti od 0 do, je otakl, taj broj minus 1. Pošto se radi o prostom broju p. On zapravo neće biti uzajemno prost sa samo jednom vrednošću, a to je 0. I kada njula iliminišemo sve drugi vrednosti koji ostaju, otakl su naravno uzajemno proste sa ovim brojem, pošto je on sam po sebi prost. Izbog toga će ojlerove 5 funkcija uprvo imeti vrednost p minus 1. Te sam, tim u takom nekom slučaju, nije opšta ne moramo da vradimo cel ovaj postupak, već u odjedan mi znamo koje je zapravo to vrednost. Sa druge strane, tako će postoji još neka zapravo jednostama situacija, koja će namo biti jako odkoristi, a to je situacija kada recimo želimo doodredimo ojlerove 5 funkciju za neki broj, koji je zapravo proizvoda dva proste broje. Znači za neko 1 koje je jednako 5 puta k, gde su 5 i k prosti brojevi. U tom slučaju, takle, se ojlerove 5 funkcija računa kao proizvod ojlerove 5 funkcija za svaki od tih pojedinačnih prostih faktora. Što znači, ojlerove 5 funkcija za broj t će biti u 5-1, ojlerove 5 funkcija za broj kuće biti k-1, te tako ojlerove 5 funkcija njihovo proizvoda će upravo biti proizvod ove dve vrednost. Recimo, napr. u broje 21, taklo, se razloži na proste faktore 3 i 7 i ojlerove 5 funkcija za troj koje je 2, za 7 su je 6, kada ponožimo ovo 2, dobijemo 200. I to je zapravo vrednost ojlerove 5 funkcija za 21. Tako da, kao što vidite za neke od ove situacije, vrlično jednostavno možemo dobiti ovo vrednost i kao tako ćemo upravo i koristiti u samim algoritmima. Kao modifikacija, odnosno, ono što zapravo ćemo vidati u nekom osvadaćih primjera, ojlerove teorema se naslanja na ono formavu i kaže da za sve ove sve na proste brojeve a i n, važi da je a koje se steppenuje sada sa vrednošću ojlerove 5 funkcije za neko n, kogurentno sa 1 po modulu od n. I tu informaciju ćemo koristiti u okviru Miler Rabinovog algoritma. Miler Rabinovog algoritm čemu nam sluši? E. Nakla, ovo je nešto što je verovatno novo, ako ne za sve vas, onda možda za većinu često se koristi u kriptografskim algoritmima. Razmog za to je što, kao što sam rečla, dakle na samom pučetku, posebno kada se radi u nekim jednostavnim algoritmima, dakle algoritmima, okod kojih prosto sama logika funkcionisanja toga algoritma nije naračito kompleksna, tako da možemo da kažemo da i sami segmenti algoritma na neke načinu bezbeđuju sigurnost šifrovanja same poruke. Tu je, dakle od naračitog značaja da upravo imamo odgovarijuće segmente, odnosno, podatke koje koristimo za šifrovanje, a koji su sigure. Najčešće je u pitanju sam ključ, recimo, znači od najvećeg značaja nam je da ključ kojem radimo šifrovanje bude na neki način sigurno izvran, ako naravno u svakom slučaju, ali pogotovo u onim situacijama kada sam algoritm po sebi nije ništa posebno kompleksna. Takođo, o mnogim algoritmom recimo, ukliko su oni nešto jednostavni, i zastivaju se na izboru nekih početnih vrednosti, i onda na osnovu tih početnih vrednosti se grade, dakle dalje neke vrednosti koje se koristu samo algoritm. Tada nam isto od značaja da to budu neke stvarno sigurne vrednosti. E, cesta je dakle potrebno da to budu neki prosti brojev, i zada ako su nam potrebni veliki prosti brojev, pitamo se kako ćemo da dođemo do tih velikih prosti brojeva. Naravno jedno od mogućih načina je da imamo neku tabelu zaupravu tih nekih predefinisenih, punakled vrednosti, i da onda kažemo, e pa mi sad, pitamo zapravo iz te tabele vrednosti, i samo dok le dohvatamo te podatke, za njih sigurno znamo da su prosti, jer smo ih njih i upisali, ili je neku upisao u to neku tabelu vrednosti, ali dakle sigurno znamo da su brojevi prosti i veliki su i super. Međutim, dakle činu u napred neki poznete podatke, dakle samim tim, ti podacie su nešto što može da probaju, al tako i neku drugi, ko bi recimo probao da na neki neadekvate način dokvati našu poruku, te je u glavnom, jako bitno za sve ove kriptografske algoritme, da mi zapravo na neki slučaj način izaberemo te brojeve. Inoče, nije posebno u tešku izabriti o slučaj način brojeve ili tako, videli ste i na algoritmima, kada smo pominjali generatori slučanih, odnosno pseudo slučanih vrednosti, inoče, dakle, ti generatori sada vidite, ako ne vidite, sada videte, nekad kastnije u toho kursa su jako, jako značani upravo u ove svrhe. Dakle, ukoliko je potrebno, zato bude neka zaista slučaj na vrednost, koja će nam osigurati da naš algoritm bude zapravo siguran i da naša poruka, ne možete tako da je neko pročita, ako ne bih smel da je pročita, i ako uspe da dođe do nje. Dakle, jasno, na osmom u toga vidimo, da nam je bitno da na siguran način možemo zaista da dođemo za nekoje slučaj na vrednosti. Međutima, koja potrebno, da to bude prost broj. Onda sada trebi možemo da postajemo bitnije, pa ako mislim, izgenerišemo neki veliki broj, ako mi znamo, da li je on prost, kojoj opšto, evočno, će ta broj bude prost. Znači, mi moramo imeti neki mehanizm da bi smo od neku broja, koji smo izgenerisali na dobar način upotrebom nekih od onih doberih, al tako generatora pseudostlučenih ili slučenih vrednosti, zapravo otkrali, da li je broj prosti lini. E, to me nam služi Miler Abinov algoritm. Jasno je da to je izuzetno zahtavan problem, uopšta nije lak. I on što naravno, takođe, želite da urodite, je da ne napravite, da taj problem bude nešto što je računski, jako zahtav. Zamisljete da vi sad krenete pa da za svaki izgenerisani broj ispitujete o potstkonosti, da li se on može razložiti na neke činioci. Pa onda potrebno otvriti, da li ti činioci šta ste dobili, da li je to prosto, nije prosto. Dakle, takođe, ono što ne želimo da urodimo, je da za svaki takovi izgenerisan algoritm trošimo broj izvenite, trošimo mnogo vremena otvrđući da li je broj prost. Tako da nam je potreba neki efika sa na način, da bi smo rekli broj je prost. I da bi smo ga izkoristili u samim algoritm. Ok. U tu svrku imamo Miler Rabinov algoritm. Miler Rabinov algoritm koristi nekoliko bitnih svojstava. I čas smo ćemo proći kroz ta svojstva, da ćemo vidjeti nekogretnom primoru, ako vam čak i ne bude jasno ovako, bit će vam jasno na osnovu samih primera. Dakle, prvo svojstva koja je koristi, je da kaže kako mi možemo prestaviti neki broj, za koji su mnjemo da je prost. Jasno ovako je broj veliki, a su mnjemo da je prosto, on sigurno nije paran, ili o tako im, če bi smo znali da nije prost. Što znači, da ga sigurno možemo prestaviti upravo ovak. Znači, n, za koji su mnjemo da je prosto, minus 1 je neko 2 na k putaku, ili da kažemo, dakle, to je sigurno za 1 veći ili manjikak god, broj od neku broja koji je paran. Sad staj paran broj, to je ovo sa desna strane, opet rastavimo jo tako, videli smo kako izločimo one proste činiose, tako da prvo izvucimo ovaj del koji je paran i kažemo to je na 2 na neku maksimalno k, koliko može biti, i nakon togo sigurno znamo da ov koja nam ostane kao činiloc, i vstak, posto neki ne paran pozitivan ce obrojal, dakle, ovo ne može biti parno, jer da je parno, bi smo i tu dvojku uključili u ovaj prvi del, i ka bi smo povećali za barem 1.
 Dakle, znači bez da svaki neparan pozitivan cel broj možemo predstaviti upravo ovako. Ok, takođe važi da ukuliko imamo neka dva broja gde je p neki prost broj i a je neki pozitivan cel broj koji je manji od p, tada važi da ako dakle a² po modulo p jednako jedan, jedino u slučaju da je a po modulo p jednako jedan ili da je jednako minus 1. Inoče, pošto znate, kako važi dakle pravilo za modularno ritmetiku ako je a mod p jednako minus 1, onda je zapravo jedna koji p minus 1, od ako po modulo od p. Dobro, imajteću vidu ova neka dva osnovna pravila, vidimo kako funkcionišu i znalamo zapravo kako funkcionišu, onda zapravo hoćemo da formulišemo kako izgleda Mila Rabinov-Volgori. Odećemo videti dakle kroz neke uslovene, nakon toga ćemo videti kroz neke pse u djog pod, a kao treću varianta ćemo videti primari, ta ćemo biti sigurno jasno. Ukoliko predstavimo dakle neki broj, za koji se sad pita mojelom prosti ili nije, ali polazimo od predpostavke da jeste, naprišljamo ga dakle u ovom osnovnom obliku, dakle to je neki veći broj koji je neparan i pozitivan cel broj, tega zbog toga možemo napisati u obliku p-1 jednako je neko 2 na k puta k. I zabraćemo neko a, dakle to nam je sad ovo ovde drugo pravima, i zabraćemo neko a koji će biti cel broj u obsegu od 1 doove ovde vrednosti i tada dakle mora biti ispunjene neki od ova dva uslova. Pravi uslov nam kaši da ako taj izabrani broj stepenueno sa ovim ovde brojem k, dobit ćemo po modulo od p-1. I ako je taj uslov ispunja mi kažemo dobro, znači to sigurno važi, znači broje prostijal. Ako ne, znači prosto važi ovo ili orog, ovaj ovdje del se odnosi na. Dakle sve brojeve koji se mogu izgenerizati, vidite da ovdje ima neko jot. I to jot se kreće od nula do k-1, dakle nešto od toga praktično će biti zadovaljeno. A na q ili a na 2q ili a na 4q ili tako dalje maksimalno do a na 2kq po modulo p da je ostatak p-1 ili minus 1, to je u pravo ovdje del samog pravima. Dakle obovezno je ispunjen jedan od ova dva uslova u koliko i ovaj broj p prost. Kako to je izgleda, dakle na nekom konkretnom primjero, ovdje je samo, dakle, rečima ispričano isto ono što sam ja malo pre rekla kroz ona dva uslova. Dakle formiramo ovakav neki skup, odnosno neku listu elementata. I ili je a na q po modulo od n, odnosno, ti po modulo tog broja n malo prebil p, kongrentom sa 1 ili je bilo koji ova element kongrentom sa n minus 1, jel tako. U suštini, ako dakle broj prost, onda sigurno važi ovo pravilo, dakle sigurno važi nešto dologa, u supratnom tonu je mora da znači. Može se desiti da, naravno, imate zadovoljene neki od ovih uslova, ali da sam broj nije prost. To je ono što stoji ovde, dakle, implikacija ne važi u drugu stran. To što nešto zadovoljava ovoj uslov, ne mora da znači nužno da je broj prost, ali ako je broj prost, sigurno važi ovi uslov. Mila Rabinov-Valgoritan međutim zastniva se baš na to je predpostavciš. Tako što će proveriti ove uslove, ovo se zastniva na predpostavci da je broj prost. Izbog toga, ovaj algoritm zapravo ne garantuje sasvim sigurno da je broj prost, već, on kaže da je broj možda prost. Znači, on ne garantuje da je broj prost, ali sigurno garantuje da neki broj nije prost, ako je rezultat algoritma nije prost. E, ovo ovde je prikazano nekako u pseu dokodu, ispano što smo videli malo prema, čisto zbog bolje razumljivosti, dakle, ako li ko testiramo neki broj Mila Rabinov-Valgoritmo, prvga predstavimo u ovom ovde oblipu, nakon toga izaberemo neki slučaj broj a u rasponu od 1 do ove vrednosti i kada stepenujemo a sa ovim ovde ku modulo od tog broja dobijemo 1, mi ćemo odblog da vratimo da je broj možda prost. Ako to nije slučaj, mi ćemo naravno da provamo se svim onim vrednostima koje dobijemo u toj listi, znači, a na q, r na dva, q, r na četri, q i tako dalje, dakle, maksimula do dva na k, q i ako po modulo od m dobijemo n minus 1, za neki mi ćemo da kažemo dobro broj je možda prost. U suprodnom, raćemo da broj nije prost. I ovaj algoritmo i u šijetnom prikazan je na nekoliko primera, gde recimo na primoru za sam broj 29, dakle, kako bi smo predstavili ove broje, kao, ja tako, 29, znači, n minus 1, je u ovom slučaju tako 4 puta 7, tako da je to 2 na kvadrat puta 7. Proizvoljno izaberamo a u nekom obsegu, dakle, mi biramo ovu vrednost a. Kad smo izaberali to a, prva svar koju probamo je tako je ono a na q, što znači uzmemo 10, stepernu vamo s ovim 7, po modulo 29 treba da vam da je i 1. To očegledno nije jedan, znači, s prvom u ovog pokušaja nismo i dalje dobili da je broj možda prost. Probamo sa minus 1, vidimo takođe da nije i onda probamo one sledeće elemente iz liste, što znači 10 na 2 puta 7. Dalje nevamo je otakom, 10 na 2 puta 7, po modulo 29 dobijemo da je 28, što je upravo 1 minus 1 i iz toga zatjučamo da je ovej broj možda prost, te će algoritam vratiti pozitivan iskod. Sa druge strane, je ovoga jedan primer za broj 221, kde rezultat upravo zavisji od vrednosti samog broja a. I naprimera, ako pogledate kada predstavite ove broj 221 u ovom očetnom obliku, on izgleda ovakom i proizboljno izoberamo a racimo kao 21. 21 steplinamo s onim q, što je 55, dobijemo 200 tonom ne odkovoram, međutim kada steplinamo se 2 puta 55, dobijemo da je to upravo 1 minus 1 i na osnovu toga smo zatjučili da je broj možda prost. Međutim da smo isebrali neko drugo, a mogli smo i da ne dobijemo upravo ovakav iskod. I to vidimo, ako recimo izoberamo a i 1 po 5, vidimo da u svim ovi imiteracijama mi zapravo nećemo dobiti pozitivan iskod i na taj način bi smo detektowali da broj nije prost. Pitanje, šta sam da tu dešao? Pošto, ovo a je zapravo naš izbr. Mi onda praktično, naravno, možemo napraviti i više izbora da bi smo videli, odnosno da bi smo videli, da li po nekom iskodu dobijemo ovaj možda prost broj što je dobar iskodu našem stocaju, gde naravno nikada praktično nećemo ispitivati svako, a to bi bilo račlonski neizvodljivo, posebno kada imate, dakle, izuzetno velike elemente, sigurno, dakle, nećete isprobavati za sve moguće vredosti, već je da prost uzeti skup nekih nasumično izbrati vrednosti, i ako dobijete da je broj možda prost, vi ćete to prost u svojiti kao da je pozitivan iskod, ako za sve takve vrednosti dobijete da nije prost, onda naravno uzet ćete i ponavno ćete izgenericati broj i tražiti sve dokom ovaj algoritm nedapozitivan iskod. Sam rezultat algoritma, kao što vidite, nije naračito, odnosno nije previše pozda, dakle, algoritmam ne kaže, je broj, je ovde sigurno prost. Algoritmam kaže broj je možda prost, ili dakle nije prost. Vidite da je to slučaj, dakle, upravo zbog toga što su ove algoritm bazira na onoj suprotnoj strani, odnosno suprotnoj implicacija, dakle, rekli smo da ako je broj prost, sigurno važe oni uslovi, međutim, u koliko, dakle, su zadovoljeni uslovi, ne mora da znači da je broj prost, pošto ovaj algoritm, dakle, upravo, kreće od provere tih uslova, onda ja smo dom ne može da garantuje da je sam broj prost, međutim, često nam je ovo dovolj. Zato što, dakle, ono što mi želimo je da je prost o da izberemo neke brojeve, kod kojih, dakle, ćemo sa kolikom godi sigurno što većom moguće dobiti, da je neka vrednost prostaka, ako, dakle, bi smo ne mogućili neke napadi i faktorizacijama i neki specifični napadi na samu vrednosti, zbog toga bolje da vrednost bude proste, međutim, ovaj algoritm nam se pokazuje, kao u nekoj praksi dovoljno pouzdan za neku praktičnu upotrebu. Stvari, u tome što kada biste, naravno, želili da u potpunosti garantujete da ćete dobiti prost broj, u tom slučaju, dakle, bi ste morali mnogo-mnogo više izračunavanja da radite, a to nije praktično izvodljiv. Pošto su ovakve algoritmi, dakle, koriste prostu praksi kao segmenti algoritama koji služuje za kriptovanja, gledno, šifrovani poruke, onda je jasno, takođe, jedan imperativ da to bude, dakle, da algoritamo bezbeđuje sigurnost, a sa druge strane da algoritam takođe, naravno, ne unosi tu prosto težinu u samo izračunavanje, već da om mogućeva istovremeno i efikasnost. OK. Ja imam ovdje jedno pitanje za vas. Ako vi nevete slučajno neko pitanje za mene, vezano za predkodne teme koje smo obradili. Dobro, zaključiću da ne, ako imate u bilo ovkom trenutku, dakle,
 da me prekiniti i postavite. Ja imam jednu pitanice, pošto smo već probili termin prvog časa, međutim, stavim, stvijemo s teguna nećemo držati do kraja drugi čas. Dalipam viš odgovera da ja sad nastavim do kraja ove lekcije, nemamo još mnogo slajdova ili bi ste radije da napravimo neku pausu, pa da onda prostu drugi čas bude kraći. Meni je sve jedno. Dobro, čet. Bez paus. Može, ok, tako je i lakše. Slobodno, dakle, kad odgoverate, uključite se slobodno i recite, dakle što vam odgovera, tako jednostavnije, tako da nemojte da se, da se ustešate. Ok, nemoj možete mnogo, dakle da sad smo se zalufali, pa jacu da završimo do kraja. Slednji će temat, su nam prosti korani i diskretni algoritmi. I, dakle, ovo konkretno pod oblast je nešto što se, recimo, često koristi u kripsografiji sa javnim ključavima, gde recimo je, takođe, diskrih jelman razmena ključova, koji ćemo vidjeti konkretno, dakle kako funkcioniš ovoj algoritm, vrlo sporo. I recimo, da je sa algoritm koji se koristi za neku digitalno podpisivanje, što ćemo takođe vidjeti u okveru ovog pursa. Tako da nam je bitno da razumemo, dakle, u čemu zapravo leži sigurnost ovih algoritama, a to razumevamo upravo, kroz ove koncepte kojima se danas bale. Ok. Ako osmatramo neki izras, ako je se steplinove sa nekim brojem m i koje daje, dakle, ostatak, jedan predeljnju sa brojem n, dakle, pričemo, su a i n uzajemno prosti brojevi. Na ustnu, ojlerove teoreme znamo da postoji bare jedno m, za koje ovo vaš. I ako sećete, dakle, ojlerove teoreme, isto smo ovo imeli samo što smo steplinovali a na ojlerovu phi funkciju. Dakle, phi od e. U tom slučaju, dakle, znamo da ovo sikurno vaši za bare jedno m i to u slučaju da je vrednost tem upravo vrednost ojlerove phi funkcije od m. Međutim, u opštom slučaju, naravno, moguće naći i neki manji broj koji će zadovoljavati upravo ove uslov, što način, pronaći neku manje m, za koje će važiti od, dakle, upravo ovdje pravil. Hajde da vidimo, dakle, kako to funkcioniš. Naprimer, za broj sedam i broj je tako a7, na tako koje steplinovamo, i neki cel broj n19, za osnovu ovom, po kojoj radimo opšte modularnu aritmetiku, kako bi se ab izgledalo to steplinovanje, dakle. Pritom, ojlerove phi funkcije u ovom slučaju, da lebi vam, pošto, 19 je tako i prost broj, tako da bi vrednost ojlerove phi funkciju u ovom slučaju, bilo 19-1, o samost. Što nam kažem, da dakle, u slučaju, da steplinovamo 7, sa u samost, sigurno ćemo dobiti 1, kao statak prideljenju sa brojem 9. Međutim, pitanje, da li možemo dobiti i manje? I kada krenemo, da steplinovamo mi sada ovako pešločki, iterativno, vidimo, 7 na prvi, da jedanom statak prideljenju je o tako 7. 7 na kvadara da jedanom statak je 11, 7 na treći da jedanom statak je 1. Znači, već smo u 3 koraka došli do ove ovdej jedinice. Ono što je poznato, da u ovom slučaju, dakle, nakon što se dođemo do te jedinice, nadalje se da je tiklus neki poneve, što znači da nakon ove trojke kao eksponent, mi možemo očekivati ponelo 7, 11, 1. Nakon toga, opet, 7, 11, 1. I tako, ako pobijedate, naravno, ono momenta kada dođemo do 7 na 18, vrednosti uprvo biti 1. Tako da smo videli da i za neku manje m, što je ovdje slučaju, zarecimo, trojko pa za šesticu, pa za 9 i tako dalje, mi ćemo doći do tokođe ovdje ovde važenje, če ovu će tokođe da nam vašim. Ako to pogledamo, ovako, nekako tabelarno prikažemo je o tako, šta smo zapravo ovdje vidimo? Znači, imamo neko a, koji steprnomamo vrednostima od 1 do ojlerove cifunkcija, do vrednosti ojlerove cifunkcija za neku vrednost koji smo izabrali kao osnovu za ovu modularnu ritmetiku. Pošto smo izabrali 19, dakle, seprnomamo od 1 do 18. Vrednosti koje ovdje uzimamo su takođe i al tako do 18, zbog toga što ćemo rezultat uve prati u obsedja, tako košto radimo po modulu. Ok, hajde da vidimo, dakle, ovo ovdje nam sad predstavlja zapravo isto ovo što smo malo preizrčunauli, samo ovo je bilo na primjeru sednica, da ćemo da vidimo za sve vrednosti koji se javljali u tom obsegu. I oko pogledate, recimo, evo je sednica i upravo sedam na prvi, da je ostatak sedom, sedam na kvadrat 11, a sedam na 3 i 1. Nakon doga se ponevlja ove ciklu suprvo kao što sam i ret. I sada kao što vidite, taj skup vrednosti koji dobljemo je dosta različit. Evo recimo, ova jedinica ima samo jednu vrednost. Recimo, sednica ima tri vrednosti. Dokostojite kođe i neke brojevi, dakle ne za neko a, koji će prosto ove skup brojeva davati, dakle biti potpun, odnosno davati sve moguće ostatke po modulu od 19. To je ono što možeš da vidite, dakle od 1 do 18, ove su praktično sve vrednosti. Šta nam to zapravo znači? Ono što smo mi primjetili od tako već, znači, sve se završavaju ove ciklusi sa jedinicom. Ono što, dakle, nisam napomenula, ali ove pojedinačne dužine sekvenci su delioci broja ojlerove fit funkcije. Što znači, recimo, ovo da imate 1, ovo da imate 18, ovde ćete imati 9, ovde će biti 3 i tako dalje. Evo ovde 2. A, neke sekvence su i dužina 18. I to su upravo one sekvence koja su nama najviše od značaja. Takav broj koji upravo generiše, znači, svako takvo a, koji generiše ove potpunisku postataka naziva se prostim korenom za taj broj. Znači, u ovom konkretnom slučaju za broj 9. A to znači, oči može se definisati nekako na dva načina. Dakle, može se definisati upravo tako što ćete reći, da je minimalna vrednost onog m, kojim se stepleno je to a, a da je jedanje o tako kada se koji ostata pridejenju. Dakle, minimalno m koji odgovorat tome je upravo ojlerova fifukcija. Dakle, to je slučaj za te vrednosti ili ga možete definisati tako što ćete reći, da ću upravo skupostataka koji se na taj način dobija pridejenju, biti potpunisku postataka za taj broj. Dakle, sve ove vrednosti koje upravo zadovoljavaju te uslove predstavljaju prost koren za specificirani broj. U ovom slučaju to je broj 9. Dakle, dvojka je prost koren, 10k i tako daje. Ovo nam je označaja, zato što recimo, ako nekih algoritmo po budifi helmana za neku vrednost se recimo traži prost koren. Tako da je bitno da znamo šta znači vrednost prost ovo. Šta znači zapravo pojemu prost korena i takođe da znamo da odredimo prost koren za neki broj ili prost obar da ispitamo dali je neki broj prost koren. Ok, definisali smo šta je prost koren. Ostalo mi je još da prediskutamo, vezano za ovom imamo posledaš par temica, ali kratkih, vezano za ovo ostalo mi je još da prediskutamo pojem eksponentizacija i diskretnih logaritama. Dakle, eksponentizacija zato šta je eksponentizacija, dakle, to je steppenovanje je nešto što tipično dakle se koristi u masiju ovih algoritama gde prosto je algoritama koji su dosta računski, znači, basiraju se na nekom računanju, dosta su zahtevni računski. I onda u principu zapravo se zasneva sigurno stih algoritama na informaciji da je eksponentizaciju relativno jednostavno uraditi. Sa druge strane tekože postoji algoritmi koji se koriste za esikasno eksponentizaciju, te osim što ćemo dobiti neku vredno, dakle, mi ćemo je dobiti i na brz način, a opet ako znamo da je inverzant problem, tome, problem logaritmovanja, odnosno određivanja diskretnih logaritama po nekom modulo, znamo da je to izuzetno zahteman problem izbog toga upravo, odnosno u tome upravo leži sigurno stah algoritama koji se basiraju na eksponentizaciji. To nam je bitno da znamo, dakle, zato što ćemo kasniju dobu kursa, kao što rekli bileti neke algoritme koji su jako jednostavno i nekako po svojj strukturi basiraju su pravo na ome, mogu je fika radit, dakle, primjerom tih nekih prosto dodatnih algoritama za samo eksponentizaciju, a prosto ako pogledamo da je inverzni problem izuzetno zahteman, težak, nekde čak i nema rešenje, onda jasno, dakle, da to predstavlja i kao segment upravo sigurnost samog algoritma, spok toga nam je bitno da razumujemo prosto to kao problem. Ok, imamo još jedna, kratki posatig na nešto što ste vi radili na prvoj godini u okviru matematika 1 12, sad sigurno da li je bilo matematika 1, činimo se i to su pojmovi grupe prste na i polja, mi ćemo vrlo u kratku protrčati kroz same pojmovi, čisto da se posetite toga, ono što će nam biti na kraje značno je pojam polja, odnosno nekog specificnoho polja da ćemo kastije koristiti zapravo aritmetiku u okviru tog polja, usklopu jednog od algoritama koja ćemo vrlo uskororaditi, to je i subgrit. Dakle, grupa G se definište kao skup nekih elementa nad kojima je definisana nekabinarna operacija no
 Moženja, taj ga da vidim. Aha, ok, dobra. Neka abinerna operacija moženja, za koje uvaže dakle zatvorenost, asocijativnost, dakle znamo što znače pojmovi zatvorenosti u asocijativnosti, zatvornost znači da prosto ako primenite operaciju nad elementima koji su elementi skupa ili tako, takođe će i rezultat biti u okviru nekogstku asocijativnost, dakle znači da recimo ako prvo grupišete neka dva elementa, pa nakon toga primenica operaciju sa trećim, to je identično kao da ste grupisanje radili na drugačin način, imate ovde i primer. Osim doda takođe postojanje jediničnog elementa što znači postoji neki element, takav da kada se pomnoži sa bilo kojim elementom ili tako iz same grupe, praktično se dobija identična vrednost u tom samom elementu, a postoji i nešto što se zove inverzni element, što znači da kada se element grupe pomnoži tim svojim inverznim elementom, dobije suupravo jedinična vrednost. Grupa može biti konačna u koliko, dakle u koliko je narao konačno bro elementa i tada upravo taj bro elementa predstavlja i red same grupe. Dodatno, dakle, u koliko za operaciju važi i pravilog komunicativnosti, tada grupu nazivamo i Abelovom grup. Dobro, dakle, to su neki opšti prostopojvovi. Dodatno, dakle, nad grupom u koliko definišamo još neku operaciju, operaciju sa biranja i nožanja, dakle, ovdje, ovdje, onda, dakle, pričamo o prstenu, gde, dakle, za jednu operaciju, operaciju sa biranja, dakle, važi sva pravila Abelove grupe, to smo videli malo prešla znači, a dodatno, ako važi zatvorenost, asocijativnost i distributivnost nad operacijom nožanja, kažemo joj, dakle, da je u pitanju prsten i prsten takođe može biti i komutativni prsten, ako, nad operacijom nožanja, važi i pravilo komutativnosti. Dobro, to sve namo, dakle, čisto neki uvode dođemo do pojima polja, zato što dakle, ta polja igraju neku ključnu ulogu, odnosno, kao što rekok, videćemo, vrlo, uskoro, na primeru, aj sa algoritma, dakle, kako zapravo figurišu neka specijalna polja u savom algoritma. Ta polja specijalna se nazivaju galoa polja i ona se nekako ovako beležavaju, dakle, u notaciji, gde, dakle, najčešći upotrebi su neka specificna galoa polja, recimo, za ostavu od neku prostog broja ili, dakle, od nekog stepena dvojke. I to je ono što ćemo mi koristiti u konkretnim zadacima, kada budemo radili aj sa algoritm, dakle, ovu neku specificnu vrstu polja, pa ćemo tu prosto primenivati neku aritmetiku u galoa polja. Dakle, koristimo polinomijelnu aritmetiku i ovo takođe znate, do sada trebalo bi da znate, dakle, dakle, dakle, u definišamo neke funkcije, recimo, f o dix kao x na treći plus x na kvadrat plus dva i imamo neku funkciju g o dix kao recimo x na kvadrat minus x plus jedan. Saberemo te dve funkcije, naravno, sabiramu, kako sabiramu praktično dve funkcije, tako što sabiramu odgovareće članove zapravo polinoma prema njihovom eksponentu. Tako da ovde x na treći nema svog para u gx funkciji, tako da ćemo samo prepisati x na kvadratima, tako da ćemo to sabrati i tako dalje, dakle, saberemo dva polinoma. U suštini, ono što možemo raditi je da svedemo taj izbir na ovakov jedan, dakle, normalan zbir, da tako kažemo, da ćemo samo sabrati kojeficiente koji su stajali u sama članove polinoma, a tako će, dakle, možemo to uraditi i po nekom modulu, recimo, po modulu od dva ili tako dalje, tako da zapravo ne možemo ovde imati baš bilo u poli u vrednost, nego ono koje daje prosto ostata kprideljenju sa nekim brojem, uz avisnosti o to, kako smo definisali samo galo a polje. Takođe, ovdje se može primijivati, dakle, euklidovalgoritam, nekim odizikovanim euklidovalgoritam, koji koristi polinome, funkcioniše na vrlo stečan način i ovde nećemo se, naravno, baviti detaljima samog euklidovalgoritma, zato što smo ga već radili, jedino što se, dakle, ovdje ne koriste samim projevi, već se koriste polinomi kao članove. I kao što rekok, dakle, ono što će nagobiti od najvećeg značaje je da zapravo imamo, radimo zapravo neku modularnu aritmetiku sa polinovima, u galo a polju za neku specificnu osnovu, što će, dakle, na našim zadacima, biti neki stepen broja dva. I, evo, možemo vidjeti jedan primer toga, dakle, imamo neku tabelu, gdje možemo vidjeti primer nekih funkcija koja su predstavjene na malo drugačiji način. To je upravo, ono što sam rekla, dakle, kako možemo zapravo da predstavimo rezultat, odnosno i neku pojedinočnom funkciju. Ovoj polinom je on aritmetika po nekom ne svođimom polinomom, x na treći plus x plus jedan, i svaka, zapravo, svaki taj polinom se može negagopredstaviti kao u nekom binarnom ekvivalentu. To znači da recimo, ovaj ovdje vrednost 0, 0, 0, ima svoje ekvivalent polinomu koji je zapravo 0 puta x na kvadrat, plus 0 puta x, plus 0 puta jedan. Ovaj ovdje 0, 0, jedan ima recimo svoje ekvivalent u 0 puta x na kvadrat, plus 0 puta x, plus jedan, dakle, ovdje ovdje zapravo svaka vrednost bitavom predstavlja vrednost pojedinočnih kojeficijenata koje stoje u sčlanove samu polinome. I najveći stepan je upravo određen, o nim što je najveći stepan ove nespodljive, ognespodljive polinome, zato što ovdje ponovno radimo ostatak po modulu, te samim tim jasno, dakle, ne možemo dostiši taj najveći stepan koji se nalazi u savom polinomu po čijem modulu radimo ogo aritmetiko. Zbog toga idemo maksimalno do x na kvadrat. I kao što vidite, dakle, ovako predstavljamo sve vrednosti. Ovdje vidite da su kojeficijenti isključivo 0 ili 1 i to je upravo ona ideja koji sam bilo malo prena pomjenila, da se beremo neka dva polinome, možemo recimo košto smo imali tamo primar da dobijemo da nam je x na kvadrat plus x na kvadrat, je otako jednako 2x na kvadrat, međutim, ako radimo u osnovi koje je stepena neke dvojke, onda jasno, dakle, sve predstavljamo u binarnoj formi, te će nam x na kvadrat plus x na kvadrat ovde zapravo davati 0. Zato što prosto 2 po modulu, je otako će biti 0, ne ovo prosto dvojku koja može da stoji kao kojeficijent uz neki član polinome. E, kako funkcioniše dakle ovda aritmetika? Zasobiranje prilično, jednostavno, dakle, sberemo odgovarajuću vrstu, odgovarajuću kolonu i dakle dobijemo ostatak praktično predeljenju s ovim ote polinomom. Svaki kojeficijent može biti ili jedinica ili nola, tamo gdje je kojeficijent 1, prosto ćete vidati to u polinomu i alkavkom. Recimo, jedinicu, kada sabiramo sa 1 i 1 nole, dakle, to je ekvivalentno sbiranju 1 sa x na kvadrat plus x i zbog toga ćemo kao rezultat dobiti x na kvadrat plus x plus 1, što je ekvivalentno vrednosti 1, 1, 1. Ako dobijete nekde dvojku, kao što smo videli malo preo slučaju x na kvadrat plus x na kvadrat, dakle, to će prosto biti nola kojeficijent ispred i u tom, dakle, smislu, onda imate nolo, dakle, jedino može biti nola ili jedinica. Kada budemo radili aje s algoritom, videte ćemo konkretno i na primerima, dakle, kako koristimo tu informaciju. Takođe, imate išlji jednu tabelu koja je ispava samo za operaciju umnoženja, gde je ponovod, dakle, kada pomnožimo neki mod ovih i otak polinoma sa nekim drugim polinomom, dakle, i dobijemo ovdog presu koji ostatek, s odkovarejćim ovim nespozivim polinomom za počije modulu, ovo što radimo ovu ovde aritmetiku. Recimo, dakle, ovdog imate x na kvadrat plus 1, puta x, dakle, da će nam x na treći plus x, podelimo sa ovim i dobijemo ostatak ovdje. Naravno, ako dobije to statak minus 1, to će se prvaciti odako na jedinicu, pošto važi modularna aritmetik. Dobro, što se tiče dakle ovih nekih uvodnih oblasti koje ćemo koristiti dalje u savim algoritmima, sanim smo završili. U principu smo završili se svojom ovom podlogom na neki način koje će nam trebati, dakle, da već od sljedećih časa prelazimo na konkretne algoritme, kriptografije na početku, kao što sam veći rekla, pošto nam je to neka prva, krupnija oblast koja se bavimo u okviru ovog kursa. Dalje imate možda neko pitanje, vezano za danas njičas ili se setili možda neko pitanja vezano za same propozicije predmeta?
 Ako ne, ako ne, kako sam sreklam, materiali će biti uskoro postavljeni na sajt predmeta i u tom slučaju smo se danesnjom časom završili. Pracite obavezno na teamsu i mailing listu, javi ćemo informacije o kojoj održavanja časa sledeće nedelje, dakle, vi ćemo poslaćemo ovom termin koji će biti fiksan za u buduće, ali sad na početku, dakle dok se nam ustalimo sa samim grupama na časovima, ove nedelje smo ovako održali časove, svakako pracite, dakle, grupa na teamsu, emailing listu i dobitite informacije o održavanju stadećih časa. Ok, ako nema nikakvih pitanja, onda je toto što se tiče danesnjeg časa i ja osve pozdravljam, pa se vidimo.
