 Vi možda možete da napravite da to funkcioniše tako što će svako izračunavati Dobiti sve, pa izračunavati ili ne. E, sada Ako imate Luzli, Kapo to sporo, neko drugi možda koristi internet, ne možete onda da nemati više struke veze između delu, a pa imate ogromna kašnjina Čisto da pocetim U konkunkurentnog programiranja, pristupamo deljenim promenjivama. Deljenim promenjivi su tukod nas u memori. Njima se revativno brzo pristupim. Ako distribuirano sistema podace nisu tu, oni su tamo negde, daleko. Tako da imamo i komunikacijone troškoj. Sada treba se prisitite mreže neke koje ste slušali. Ima pakjet, neko zaglavlje. I sad ako vi smo mi dovlačili, byte po byte. To je 1 byte podatka, 100 byte tova zaglavlja. Ubilismo performancja odmah našeg sistema. Znači ne, ne smjute ni tako da programirate. E, pa onda su neki napravili biblioteki koje su neko se napravili. Ne čekaju, ne, 1 byte vi upišete da pa se natiće da otrčite. To nego 1 byte, 2 byte pa to kada se nakupi 1 kilobajt ili tako nešto ili 10 kilobajta pošao je na drugu stranu. E, ako ne znate da vam biblioteka to tako radi, a odcite da pravite synchronizaciju. Mošte napravite mali problem. Jedna od stvari koji će se pojaviti na verovatno na laboratorijski vežbom. Vjedećemo i šta ako mi ne znamo kako možda nekada biblioteka radi upozadili. Na laboratorijski vežbom. Ali u suštini načitavamo ovom ovde predmetu. Vi često, mošete naučiti nejisi problema koji radi, koje iz programmskog koda koje lepo napisam koji radi, nego iz onog koji ne radi, koji ima neku grešku. Zmog toga. A, su je na ovom predmetu dosta često na vežbom, varem, primenje taktika na laboratorijski vežboma, namernog pravnjenja grešaka. I da bi ste se upoznali sa efektima koji te greške mogu da proizvedu i načinima za odklanjenje takvih grešaka. Mošete pogledati snimki od nekolikoj kodine koji sam ja pravio za laboratorijske vežbe. Gde sam u četir laboratorijske vežbe namernog pravio greški. Neki sam odklanju na prvoj laboratorijske vežbe odmah, neki su nam se prostirane do četvrte laboratorijske vežbe. Znači, neki greške ovde mogu da budu toliko duboko postavljene, da mi vopšte nećemo primetiti njihovo postojanje, neko vreme, vopšte, nikakvih efekata nema. A, zato što je to možda radilo sa malim kašljenjima na jednom računaru. Mislim, neko legenice primenjuju sličnu taktiku za laboratorijske vežbe. Šta nam je ovde dato? Datija sistem s distribuiranom memorijom. Vidite, nema memorije na vrha. To znači, mi moramo softverski dobezvedimo, da se podaci razmenjuju izmiju ovih računara. Kako god znamo i umemo, i to će onda spadati u naše distribuiranom programiranje. Ovde sad imate malo opise za Titli Cappold i for Luzli Cappold. Malih dimenzije ovog naše grafa, mala fizička rastojanja. Znači neka nam je bitno i da fizičko rastojanje bude malo. To se sećem, neke firme koji su radila optimizaciju poslovanja Berze. Njime je bilo bitno da njima fizički serveri budu mnogo blizu Berze, da bi mogli što predo odrde poslu. Da ima što moguće manji broj hopova da su odrdi nešto jer njema. Njima bilo bitno da pre konkurencije, nekoliko milisekundi pre konkurencije, kupe ili prodaju odgovarajuće projislvate. Onosno te, berzancki projislvate kako da se nazivaju. Tako da je to bitno i kako izgoda graf i gde se nalazi svi ti resursi, ako želite da radite veliku optimizači. Ono imamo ove naše Luzve couple breže koje jako mogu da imaju veliki brzine, to mogu da budu 100 GB ili gigabita i dosekundi. To ne znači da oni imaju malo kašnji, oni imaju veliki protok, ali se može desiti da oni imaju veliko kašnji. Možda se desiti da imaju kašnji je 10 milisekundi, 50, 100 milisekundi, mogu u celu sekundu da imaju kašnji. Da imaju kašnji, da će da imaju da imaju kašnji. Dobićete ogromnom protok posle, ali veliko kašnji je inicijavno. Isto tako, ove bežnične breže mogu da budu od malih brzina do ogromnih brzina, isto tako 100 GB dosekundi možete da izvucete iz takvih breža. Internet je jedna velika breža koja ljudi koriste za krtskanje raznoraznih brojeva, korišćenje računara koji su distribuirano, da mi se obavile raznorazne bankavske ili nebankarske transakcije. Krtskanje brojeva je trenutno jedan od većih zagadživača okoline na ovom ovde svetu, zato što su ljudi ozirili da prave digitalne novce. I taj digitalni novac je u suštiri jedna distribuirana glavna knjiga, gdje se na osnovu konsenzusa zaključuje kaj je odrađena nekad neka transakcija koja je prvi odradio k transakciju, izavisnosti od toga dobiti neku nagradu ili neće dobiti nikakvu nagradu. Za taj posao koji se rati. Znači to je jedna distribuirana aplikacija od koju treba da vodite računa i o tome da bude full tolerant. Mi se ovom pregledu nećemo babiti, umanjenom o setljivostju na odkaze. Mi ćemo ovde na predavanjima veš vam podrazumevati, ako mi posao povrk u stigne na drugu stranu. To nije tako uvek. Znači to kad neko posao povrku ne znači da će povrka biti isporučeno. Kod konkurentnog programirenja ako to što smo postali, se ne vidi na drugom kraju, znači Hardernam je crko. Crko nam je računa, nema šta tu da so povravljamo. Kod distribuiranog programirenja, možda naša čunra sa silnove funkcioniše. I ovo drugi računas kojima mi komuniciramo, možda ima sa silnove funkcioniše. Ali između ta dva računara, možda se nađe Gomila neki kablova. Možda se desi da se neko spotakne u mrežni kablo i da sočno isključi mrežni kablo. To što jedna računa radi i drugi računa radi i možda svičevi na koji su oni nakračini, možda lepo rade, to ne znači da se neko u medjovremino nije spotako na neki mrežni kablo i da je tamo negde kozna, gde u tom celom našem sistemu prekinuta vezan između to dva kraja. Tako da programirenje u distribuiranom systemu i sreba da bude tako, da bude malo odpornije na odkaze i za laboratorijski veš bo odnosno za projkat koji budete radili, ako budete radili, a biće rečeno što treba raditi ako pojedini delovi vašeg računarsku systemu prestanu sa rado. A šta se desi? Naprim. vi je kupujete kartu i ugasite vaš računar na kome ste kupovali kartu. Dali server koji prodaje kartu treba da nastavi sa radom? Potreba server treba da so poravi od toga. U mišta da so poravi? Normalno da je korisnik i kad ugasi svoj računar na kome preko koji je kupovali karte kad završi skupovino kart. Znači tu server treba da se... da ima odpornost na tako nešto. Isto tako pod serveri koji treba da vode neku računicu. Jo njih treba da so poravi kada se desi tako nešto. Dobro. Bežiš, sem reži isto. Mogu nešto da... daju. Što se performansi tiče? E, postoji sad jedan hybrid izmjudji ova dva rešenja. A to sam spominjalo tokom ovog časa. To je nešto što se zove distribuirana deljena memoria. A ovdaj će nama hardware i software morati da funkcionišu, da bi programmer steka utisak da pristupa deljenim podacima. To nisu stvarno deljeni podacim. To su podaci koji su prividno deljeni, uposadeni. Če se naći razmena poruka između takvih naših sistema. Ali što se programmera tiče, programmer će imati utisak da pristupa jednoj distribuiranoj promenjivi. Kako će se to napraviti? Ne znam. Ali ćemo postoji videti da možete iznamo kako će se to napraviti. Kad budemo došli do programmskog jezika java, vi ćemo videti nešto što se naziva Remote Method Devocation, RAM i. I ko to koncepta RAM i ja, vi ćemo videti da tu postoje proksij objekti, gde mi lokalno u svariji nepristupamo lokalnom objektu, nego lokalno pristupimo proksij objektu, koji stvarno treba da dovuče podata kako tu nije lokalno i da synchronizuje sve te keševe, da bi taj naš sistem mogo da funkcioniše. Ali ovde u smistu software-skoj keša. Šta na datom računaru treba da se nađe podataka, ne hardware-skoj keša, gde su podaci već sami po sebi napravljeni za synchronizaciju. A ovde je bitno, da postoje kopije i da postoje protokolik, koji treba da obezbede konsistenciju, jer ako dosta njih čitan, primimimim, imate distribuiran u bazu podataka. Što ćete verotno nekada i koristiti. A ako imate puno čitanja, nema veza, ja mogu kopiju tog podatka da stajem sad na 10 računara, na 10 neta. Problem nastane, šta se desije ako treba da se upiše podata, kako da se invalidire. A naprimer, portalizavesti,