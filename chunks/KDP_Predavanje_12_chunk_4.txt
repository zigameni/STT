 u program s ljezik TSP, nego postoji delovi koji smo mi razmatali kada smo na početku krenuli da posmotramo kustentno programiranje. Ali nam one u ovom trenutku nisu od toliko velikog značaja, jer ovdje nam je ipak pokus na istribujerenoma programiranju, odnosno u nevim svarima koji smo imali kasnije, to je slanje i prijem porukje. Sada je svoj izvršava na jednom raconaru, li je nariša raconara, je u svoj ovo stvarno komunikacijeni kanali, pa ovako napravljene i kanali su konkurentni. Če ovo se u slisnih ponoša kao aplikacija koja se izvršava u nitima na jednom raconaru, ali koristi razminu poruka. Ne koristimo deljene promeljive za synchronizačiju, se nalaze ovoj delojima sa barijerom, s senforima, skolima možda se radi, ali to nećemo koristiti. Programski jezik u go u tom, svojom ovlikom, jezik koji jezik, možete programirati u njemu, sašli vlijepom radi. I namenjenje zakazim masivne paralelne obrade, ako vam treba stvarno o ovoj gromant brojni, tikaže treba milijeduniti velika. Prvo jednostavno go i kažete što to treba da se izvršava. Ne imamo, nekog klasu, nešto pušta. Ne, kažete, u ovoj funkciju mi izvrši u paraleli i izvrši u funkciju u paraleli. I to je sve to se našeg dela koje se odnosi... Dalimete možda nekih pitanja koje se odnosi na ovo što smo do sada radili? Ne, je... A, onda završamo sa jezikom. Sada krećemo, A, da vidimo još B, različite stvari koje postoje u distribuiranom programiranju. Različite načina rada koje nam umoguđavaju, kada je u distribuiranom. Jedna način rada je remote procedural call, procedural call drugi je rendezvous. A, mi bi trebalo smo se sustrivali sa jednim i sa drugim načinom rada do sada. Ovo je bi trebalo se se sustrivali, kada ste prolazili kroz progromu s jezik javom. Jer, ovo što se ove zove udanjen poziv metodu, odnosno, prosiženo call, nije ništo drugo, nego remote method and location, sa kojim ste su se postoji u programu. Ovo ovde je samo malo teorisko razmatranje koje postoji u pozibni. Da vidite štatu se postoji, jako izgleda komunikacija, a rendezvous, sada smo se već vse vsevima očas u progromu. Kada smo razmatrali barijere za komunikaciju i uci proces. Sada samo hoćemo da vidimo kako je to formalizovan o nekom jezika. Vidite ćemo jezik jedan na kraju koji se zove jada, koje može da nam mogući da vidimo kako to sve izgleda. Če ta je programski jezik, a da je dosta moćen, a što se konkurentno distribuirano u progromiranje tiče, ali nije baš toliko mnogo u potrebi za toga, mi ne razmatramo toliko mnogo, a ovo je ovdje pregled. Kako izgleda ova naša razmena poroka? U kishtini ova naša razmena poroka bilo kod drpac, bilo kod rendezvousa se zastanjila na principima kljent-serveru. Kljent traži nešto od servera, server nešto odradi, server dati nekako od kašnog kljentu. Distribuirano je progromiranje, nema delji elektromeljivih, svak komunikacija mora da ide kroz razmenu poroka. A kako je to sada sve napravljeno kljent kada uput izahiti, a on će dobiti zaseba na reply-kanal? To znači da ćemo imati vosmervu komunikaciju, u štini kljent može nešto došalje serveru, server će kroz taj u štini obje kada moći da vraća nešto nazad na onog koristučnog stranu. Vrlo snično, ono me što smo imali kod programu stod jazika javak, da smo imali priključniti, odnosno, nej soključka, kako smo ga zvali tada, da smo mogli iz tog paketa da izvočimo ulazni, tog podataka i izlazni, tog podataka da znamo šta šaljemo i šta primamo. Prani. Dobro kljent server, kod urni direkt će razmese pasinga, je razljena sa dve eksticne razmene. I vidićemo vrlo dva metoda, dva načina rada, remote procedure, alcohol, rpc, ili udovjen pozit procedurio i drugi randevo. Znači vi ću imati ovo je 8. bidirektione kanale i znamo da imamo kljent, server, architektur. Imaćemo send koja prače sa vrl. Send, one i što šalje mora da pošalje poruku. A server mora da primi poruku. Če mi ćemo ovde imati, a one simetrični način komunikacije, ono je upareni način komunikacije, da ako jedna strana nešto šalje, druga strana mora da prima poruku, da bi to moglo da se upare. Klient šalje poruku, server prima poruku. Klient kaže send, server će raditi receive. Poruke i one će raditi make-up. U sada počnu da vidimo samo kako izgleda implementacija o dve različnosti. Imaćemo svar koju razmatramo je rpca. A rpca odgovara o nome što smo imali kod ramaja. Imamo kljencki računar, koji treba da pozove server'ski stranu. Klient'ski računar kaže call, ne mora da kaže call, način niste niste mali različi to pozivanje. Odete nad nekim objektom, odnosno na nekom metodu i pozovete. Koji se korisnik atiče, korisnik pojima neba. Dali se to izvršava kod nas na računaru ili se izvršava nekde u Kini? Oko korisnik je došao i pozove neku metodu, neku fungciju, neku proceduru da se odradi neki posao. Gde se to izvršava korisnik pojima nema? Pokolo identično stvar onoj koji smo imali kod ramaja. Mi dobijemo neki objekt. Mi pozovemo metodu togo objekta. U sustini nismo dobili pravi objekt, ali mi to ne znam, to nam je neko sakre. Mi smo dobili objekt koji ima potpis neki, taj potpis odgovara nekom interesku. To je i ovde stvar. Dobili smo neku metodu, snamo kako izgleda njen potis i mi kažemo ton tu, ajde odradi posao za nas. I u sustini nemo prestave. Ovo ovde je realizovano kao proks. Či to tu je realizovano kao proks i objekt. Sve smo proci metoda, a gde ona ne radi ništa, ona samo treba da prepakuju ove argumente, da im ubaci u komunikacijon i kanal i da pošalje onu poroku u serveske strane. Čemu smućuje ovo sad RPC i Randevu? Služi da olakša način programirenja programer. I da programer može lakše da se snadži u tome što se trenutno zvršava. Da programer zna šta je napravljena. Odnosno da programera baš briga, kako je to napravljena. Kako se radi razmena poroka. Ako se sečete, a kada smo razmatravili rma i u programeskom jeziku java. Tu i njegde nismo videli neke sokete, neke prikličnice, nekomrežnu komunikaciju. Mogli smo da vidimo, ako smo hteli dugu je da čakamo, mogli smo sve to da vidimo. Ali običnom korisnik to nikad neće viditi. A običnom korisnik dobije potpiseno doda i što se korisnik aticu. To je moji objeka. G se on alazi baš na briga. Ispo to vam je isa servisima. Ja zovem neki seris. Baš me briga je taj seris objekat moji ili tuđ objekat koji se nalazi nekdo drugi. Ovo ove je slična stvar. Štini i rendezvous, i rapac, tu identične stvari, što se poziva na klijentcu i strani tiček. Nenavidi razliku, a dalje je, a ovo ovde napravljeno kao rapac ili rendezvous. Klijent je pozvo, kaže, call, operation i prosledio argumenta. A kako je to realizovano na serijskoj strani je nešto što sad razlikuje, rapac, odnosno rendezvous. Na serijskoj strani kako ovo ovde izgleda? Negde smo morali da definišemo interpis. Ovo ovde je, ispini, ispono što smo imeli koje radi ramaja, moramo da kažemo koje, pozive mi prihvatamo. I tu navedeno listo šta mi sve prihvatamo od poziva. Aha, dobro. A na nekom mesta ćemo mi morati da imamo opisu te jedne operacije koji možemo da prikratimo. Proces i onda, kažemo, operacija i ti neši argumenti imamo momenta. Aha, znači šta se bi ja sa doda rekao? Ovo proces i ispini označili, da kad nam stigni zaakta. Ovo je naš serviski resulnat. A po nekom našem rapacau Ovo se po...