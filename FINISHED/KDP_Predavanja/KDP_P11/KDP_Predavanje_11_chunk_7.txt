 I vidite ćemo program svijezic. I odnosno, nije nije nije nije nije program svijezic, tu je biblioteka za pro... ...je... Postoji ta biblioteka za više razvečniki program svijezika i možete ćemo stići danas da prođemo i program svijezika. Ali imate nekih pitanja? Ako nemate pitanja, pao za... ...sakrana. ... ... ... ... ... ... ... ... ... ... ... ... Dobar dan! Dobro došli na predavanje na predmetu konkurentno i distribuirano programiranje. Tema ovog današnjeg časa je biblioteka koja se zove Linda. Biblioteka koja treba da nam omogući lako distribuirano programiranje. Hoćemo da vidimo šta to sve lama biblioteka Linda pruža. Kako to se može da se koristili? To synchrona komunikacija, to asynchrona komunikacija. I al su to deljene promenji vele to nisu deljene promenji. Jer to ihde postoji li to nikde ne postoji? To što sad da budemo tjeli da radimo. Biblioteka Linda Postoji i one napravjene za više različitih programskih jazika. O ovde biblioteka se može koristiti u tom svojom osnovnu mobliku. Ali se može koristiti u jedno malo drugače mobliku. U suštini ne moramo da koristimo biblioteku. Možemo da koristimo bazu podataka. Objekat koja to može da bude relacijona i nerelacijona baza podataka u kojoj ćemo da čuvamo podatke. A to može da bude distribuirana baza podataka u kojoj se čuvaju ovde podaci. Vi ćemo raditi vrlo jednostavne upite nad timi podacima. Dohvata ćemo ih. Možemo da radimo neku selekciju ptih podataka po nekoj vrednosti. Moći ćemo da ih dovučemo ili da ih pročitamo. Znači vidite, vrlo jednostavan način rada. A ovde uopšte ne ulazimo u mehanizam. Kako je to napravljeno u pozadini? Šta je to? Neko morao da odradi da bi ovo moglo da funkcioniš. Ne, taj dej uopšte nećemo razmatrati. Ovde samo polazimo o toga da ovo radi. Kako radi ne znamo. Neko je napravio i to radi. I mi ćemo to koristiti u našim rešenjima. Ovo može da se napravi na više različitih načina. Može da se napravi kao u programom s kom jeziku java, tako što ću imati klijen server arhitekturu. Stim što to može da bude malo složenija arhitektura. Možemo prvo da proveravamo lokalni cash. Pa ako nešto postoji u lokalnom cashu dovućemo podatak iz lokalno casha. Ako ne postoji u lokalnom cashu, nije to cash memoria nego naš cash gdje mi čuvamo naše podatke. Onda idemo i pristupamo ostalim serverima da pitamo i je ili imate nešto ovako. I hajde da vidimo. Kako ovo ovde sve izgleda. Naš programski modelu CSP, odnosno biblioteka CSP treba da pruši generalizaciju deljenih promenljivih i asihrone razmene porok. Hocimo nekako da objedinimo nešto što liči na deljeni promenljivih nisu deljeni promenljivih, nevamo deljenih promenljivih. Ovo je distribuirano programiranje. Ali želimo da naprimo nešto što će u suštini upozadini koristiti asihronu komunikaciju. Aha, znači, mi hoćemo da naprimo jedan sloj iznad onoga što smo do sada radili, tako da programeru olakšavamo programiranje. Jeste. A, nači, mi ćemo ovo odraditi još nekoliko, još jednom, na areni nedelje, kada budemo razmatrali nešto što se naziva rpac. Tada ćemo viditi da je to u suštini što ste već vidili u javi da postoji, da je to rma i mehanizam, da je to mehanizam koji funkcioniše i da je to lepo, da je to mehanizam koji je sakriven od koristnika. Da koristnik ne mora da otvara sokete da radi neko komunikaciju u suštini, to je sve sada što vi možete da dobijete kroz raznorazne servise. Možete rma i da posmatrate kao jedan servis. Što ti to jeste servis, zato ću morati da podignemo servis u kojem ćete to sve biti hostovano, da bi to se moglo da funkcioniše. I da je jedan od servis, znači sada kuzmete posmatrate servisnu architekturu, to je samo jedan o motač oko svega toga. I linda predstavlja jedan o motač okone naše asihronne komunikacije koji smo napravili. Ovo treba da olaksha programeru programiranje, tako što da je pristup do nekih šest funkcija. Nešto su funkcije, nešto su procedure. Pošto u programu skomijeziku C, postoje razlika funkcije i procedura, u objektnim jezicima bi to bilo metode za pristup tim torkama, tim našim objektima koji se nalaze u prostoru torki. Taj prostor torki se na englaskom jeziku nazivio tapplespace. Mi tu nastavljamo te naše torke koje mošemo da pretražujemo i koje mošemo da dohvatamo ili da čitamo istog našom prostoru torki i koje mošemo nešto da pristup i sujemo. Tapplespace predstavlja jednu veliku deljenu asocijativnu memoria. Tako se ponaša, znači nije to asocijativna memoria ako se sad vi sećete ovog ako ste slušali arhitektur i organizaciju u rečunara 1. Nije to nam je veze s tim. Ovo ovde čisto ofter. Znači mi damo nešto, ovaj treba da naći taj objekt u tom zajedničkom prostoru. Znači mi kao da naprijemo neki jednostavan upit, kažem daj mi redove koji imaju 1. polje jednog kojoj 2. polje jednog kojoj 3. polje jednog kojoj to je vrednosti. To su torke. I koji ćemo da nađemo te zajedničke torke koje postoje u tom prostoru i da ih dovučemo, da ih pročitamo. Tamo ko nask svaka torka ima oznake na sebi. U sušteni koja je dužina, koji je tip svakog polja, koja je vrednost u svakom polju. I to ću mi koristiti. Da bi mogli da naprijemo komunikaciju. Oćemo da naprijemo kažem vrlo jednostavnu komunikaciju. I mi želimo u taj prostor torki nešto da opisujemo i od atle možemo da da čitamo nešto. U medjubreminu, ako se naš proces završi to što smo mi upisali, ostaje zapamćeno u tom prostoru torke. Paam ti se u tom nečemu, to moš da kažem da posmatrate kao bazu povrdu. Kao distribuiranu bazu podataka koja ima razno razne kopije na nekim mestima, ali koja ne mora da bude kompletno smestvena na jednom računaru. Ovo ovde će biti klijen server architektura, ali ne mora da bude centralizovanu rešenju. Ne mora da postoji jedan server na koji će sve ovde da bude hostovanom. U taj del, kako je hostovanu i kako je distribuirano, kako je uopšte neulazima, nezanima nas. Biblioteka će se nekako povezati, neko ko konfiguriši biblioteku će se to odraditi nas to nezanima. Uopšte odaci su nam dostupni. Kako? Ajde da vidim. Šest metoda. Prva metoda je out. Ološno se kao send, neblokirajuće. Preba da ubaci zapis u taj deljeni objekt. U to nebo koja je nadkriljuje sve ovde naše proces. Oni vide svi taj deljeni prostor. Mogu da mu pristupem, mogu da upišu nešto i mogu nešto da pretražuju po tome. Tako što će pozvatiti odgovarajuću funkciju. I metoda out. Ja ubacujem torku. Koja ima 1, 2, 3, 4, 5 polja. Prvo polje je int, ima vrednost 6. Drugo polje je string, ima vrednost Next ID. Treće polje je booljen, ima vrednost false. Četvrto polje je tipa šta još možda bude. Neki rekor, neki zapis. Peto polje je tipa double, ima vrednost 2,15. To je jedna sad torka koja ima veći broj polja. Možete ima jednu polja ako želite, nije zabrađenju, ne može nula, mora da ima nešto. Moramo nešto da ubacimo i to nešto mora da ima određen broj argumenta tih polja i mora za svaku polja da ima tip i vrednost. To je ono što se ubacuje u taj prostor torki. Metoda in. Metoda koja treba da dovuče jedan takav objekat iz prostora torki koji zadovoljava šablom koji smo mi dali. Mi ćemo da kažemo koje tipove želimo da tražimo i koje vrednosti po jedinih tih treba želimo da tražimo. Ima će 5 argument