 U ovom prezentaciji ćemo se baviti na prvom času sistemom koji se zove Kerberos, to je sistem koji služi za autentikaciju koristnika i za umogućavanje pristupa koristicima različitim servicima. Ono što interesantno to je da je ovo sistem koji u potpunosti zastnova na simetričnoj kriptcii, na krem na koristinju algoritama poput des ili as. I ako se sečete, ako se sečete kako će izbedali autentikaciji mehanizmi, odnosno mehanizmi za razmjenu ključeva, a nešto od toga smo radili na prethodom času, neka vrsta izvedena iz toga iz onog lidem Šederovo protokolat će biti upravo u Kerberosu. To može da bude iznadženje i može neko da postavi pitanje, kako to radimo kada autentikacija sa asimetričnjem algoritmima je nekako prirodnija i nekako može bolje da se nekako sami asimetrične algoritmi odgovaraju, to je namjeni da se vrši prover identiteta i u krajnji u linii videli smo kako se to radi kada se koristi TLS protokol, odnosno kada se koristi web-sigurnost. Na kraju postoji tu jednostvar da ako hoćete zaista stvar na autentikaciju neku koristnika, taj koristnik mora da se ne neki način predstavi ono neko proverava njegov identitet. Dakle mora da dođe nekako da potvrdi svoj identitet rovatno nekim dokumentom ili da se lično pojavi, a samo ta činjenica da se nekoliko lično pojavi, znači da on može u tom triunku da dobije određeno vrste digitanih rednicijala koji smo potrebno izalogu. I sato može da bude ili neki digitani certifikat ili može da bude nešto što ćemo biti potrebno za autentikaciju simetričnih učinima. Dakle nije autentikacija simetričnih učinima, odnosno simetričnih algoritmima ekkripsije nešto što je da kažem više zastarelo, nego autentikacija korišnima asimetričnih algoritama. Prosto kada se malo bodi razmisli, možete osvatiti da i korišnjem i jednog i drugog mehanizma može da se dođe do gotovog identične uslubi, odnosno do toga da možete zajesti da proverite neči identitet. Zašto radimo Kerberos? Brugra stvar koji bi neko mogu da pita kada pogleda kada je Kerberos osmišljen, odverzija četri Kerberos, o koji ću ja najviši danas priču, ti je osmišljen na negde 88. godine, i verzija 5, Kerberos, o koji ćemo pomenuti na kraju i vidjeti u čemu su razdike, je osmišljen na negde sredinu 90. godine, nekod mogu da kažem pa što učimo to tako nešto staro, to zaista za informacijne tehnologije, nešto što je tada osmišljeno, deluje kao nešto što je daleko prevaziđeno, međutim Kerberos tako kakav je, odnosno, sistem zastavana Kerberos, danas Microsoft'ovo glogovanja kada se koriste okruženja u lokonim, računetkim režama, kada se koristi logovanje na domain, ne znam da li ste nekada to probali, dakle, to je delo video servera, i samim tim značaj Kerberos je tim je veći zato što što to okruženje posebno u poslovnim sistemima koje se dobro često sreću. E sad poved Kerberos, pomenućemo malo na kraju, ako stignemo danas radiose ako nejavnog darovatno sledeći nevedje, a jedan del koji smo videli, tiče se autentikacija koristnika, autentikacija koristnika zastavana na XPS-te certificatima, to smo obradili. E sad kao što rejko, Kerberos je nešto što je od Windows da 2.000 default metod za autentikaciju Windows opruženju, ne je naravno u situaciji kada se vi logovajte na svoj računar, kada nema potrebe da se koristi Kerberos system, zato što nije potrebno da se prenosi neke informacije između autentikacijunog servera i ne morate dimete poseba na autentikacijunog server da bi se proverila vaša lozinka kada imunosite ta staturom. To je u onim okruženjima kada postoji lokalna mreža u koju postoja Windows mašine i kada postoji tako zvani domain controller u kome svi koristnici imaju neke svoje analoge i na koji se svi loguju i koji kasnije mogućeva korišnji različitih servica. E upravo to, ta čiđinice da taj sistem mogućeva korišnji više različitih servica, odnosno funkcionalnostu povesi želi da kada korisnik jednomu nese svoje kredenciale, dakle kada se jednom ulubuje na sistem, da može da ima pristup različitim servicima da ne mora za svaki taj servic, da ima posebne kredenciale, da ne mora za svaki taj servic da posebno unosi te kredenciale da bi mu pristupio i ono što se nalazi u pozadini Kerberus. Vidište, Kerberus je verovatno najsloženija razmena koji će moh raditi na on kursu. Ima še sporuka, ali tih še sporuka imaju zaista puno elemenata i treba će nam malo vremena celo čas ovaj dobijostim, šta se to sve dešava. Zašto je on tako kompleksan? On je kompleksan da bi se napravio ilo okuženje koje koristniku trebu da učini da njemu bude jednostavno korišnje. Znači, ono što koristnik naravno ne vidi, on pojma nema, da se u pozadini dešava bilo krachma Kerberus razmena kada unosi svoje kredenciale i kada želi da pristupi nekom sistemu. Jedino što vidi to je trenuta kada unosi svoje koristničko ime i lozniku, kastnije sva ona magija pristupa razičitim servicima se dešava pomoću to Kerberus systemu. Dakle, da bi koristniku bilo jednostavno, onda je moralo da bude ono što i u pozadini kompliko, ono da je datli sledi složenost Kerberus systemu. E sad šta je tu postoje nekoliko razloga i nekoliko ciljeva koji su postavljeni pred Kerberus? Naravno Kerberus treba da omogući autentikaciju u kojoj postoji siguran prenos podataka, tako da neko ne može da vidi kredenciale kada se oni prenosi izmađu autentikacijunog servera i klienskoj roču Nara. Zatim, ono što se takođe podrazumeva, to je da je sistem za autentikaciju pouzdan i ono što u tim Windows okruženima vrlo često postoji, to je da postoje domenkontroller i da postoji backup domenkontroller, pak koji jedan odkaže Trubis je da preozme njegu o funkciju, tako da ako odkaže ta centralna tačka, to smo više puta pro komentari sa gdje toko mogu kursa, da kada god imate jedan element u nekom sistemu koji mi svi moraju da se obrati, takav element je single point failure odnosno na tačka koja ako odkaže se o sistem pada. Znači Kerberus je osmiošnit tako da omogući da postoje najmanje dva tako entiteta, pa da jedan može da preozme funkcionalnost odrulu. I treći zakteve je naravno da sistem budi transparentan, što znači da korisnik zaista ne vidi ništa osim trinutka kada je unio svoje kredenciale i sistem treba da bude skala bilan, a što znači skala bilan, skala bilan znači da jednostavno rasti. Što će reći da ako imate na primer u nekom trinutku malo firmu koja ima deset zaposlednjih i u takve firmi postoje treći četri servera koji se koriste. Na primer koristi se mail server, koristi se file server da se idrže svoje file-ove, koristi se printer kao deljenim režni printer kao print server. I ne znam šta bi još mogu da bude, dakle ima relativno mali broj servicija koji se koriste i želimo da omogućimo da svi zaposledni mogu da pristupiti servicima nakon što je njihovi identitet proveren logovanjem na tu Windows mnežu. Ono što treba da omogući i Kerber stoje da kad se doda neki novih server, da on bude jednostavno doda ki da koristik nemora ništa da uradi, a da može da ima pristupton servisu. I sa druge strane ako se firma proširi pa se pojavi još 20 novih zaposlednjih i svi oni dobio svoje računare da opet se to radi samo jednostavno im dodavanjem doda do novih koristika, a da oni imaju pristup svi servicima i da mogu da koriste niste način kao i starih koristici. Dakle, to su neki zaktivi koji su postavljim i per Kerberos, kao što reko, dosta davno se o tome razmišljalo. Sam Kerberos ima stavljim projekat na MIT-u i prva verziya koji ćemo mi razmatrati, to je verzija 4, koja, nakon dosťa ilustrativno pokazuje sve ideje i sve o našto stoji za samu Kerberosu. Inače, kao što ćete videti, ja sam vas pocitio na pretodno pridavanju u tome kako funkcioniše NIDAM-SHADEROV protocol za razmenu ključeva odnosno za autentikaciju, pa smo onda videli i one neka unapređenja NIDAM-SHADEROVe razmene koja ima tu neki problem sa replay i napadom. Tako da vidićemo, sad krenućemo postupno kroz priču o Kerberosu. I sad, dono što osje neće desiti, to je da ja vam sad odmah pokažem kako je izgleda Kerberos autentikacija, ako je što rekli, ima 6 poruka. Nego ćemo ići postupno, kako su i ljudi koji su razvijeli Kerberos, uvodili to i objašnjavali drugima, dakle, kroz nekoliko ostavnih koncepata ćemo da vidimo, zašto je to umoralo da bude tako složeno, odnosno zašto Kerberos mora da ima tako složene poruki koje se razmeni. Ovdje posmatramo jedu vrstu autentikacije koja je veoma slična nidam šederove autentikacije, odnosno zapravo mogli bi smo čak i da kažemo da je identična. Postoje 3 entiteta, postoji entitet koji se zove client, postoji entitet koji se zove authenticacijuni server i postoji neki server odnosno service v. Ono što želimo da o mogućemo, to je da...
 Na ovom klientu klient je kljenski računar, za njim sedi nekako želi da pristupi ovom ovdje servisu V, service V, možete recimo da svatite da je to file server, način neki serveru koji ima puno diskova i na tim disku ima se čuvaju s ipodaci koji su potrebni za tu firmu. I sad kad pogljate kako izgleda, kako izgleda, evo tri koraka, to zapravo, jesu tri koraka, nidam šrederole razmene, je malo, naravno, modifikovanja, ali sušninski tu nema neke razvike, znači prva poruka je poruka koja se klient javlja autentikacivom serveru i u toj poruci klient kaže, ja sam C, ovo je moja lozinka i ja hoću da koritim server V. Dakle, to je bilo velo svično ono me što smo videli kod nidam šedera, da je su istina komunicirali A i B, pa je A rekao, ja sam A, ja hoću da komuniciram sa B, a onda je autentikacivni serveru što trebalo da mu dostavi sve ono što je potrebno, da bi im mogli do nimađi su da komuniciraju. Ovde, naravno, ovo je hipoteticka šema, ovo niko nije predložio, niti ovo i kada korišćeno za autentikaciju iz prostog razloga što je ovo ovde prva poruka i medan besmisljeni deo, a to je da se ova lozinka PC šalje, klientova lozinka, šalje u clear tekstu između klienta i autentikacivnih servera i posle otlušanog ovolikog dela kura, sam mislim da vam i jasno da ovo niko prizrava i pamiti danas ne bi uradio. Ali ovo je više koncepto, onda vam pokažeš, šta je potrebno da se desi, odnosno, ono što je potrebno da klient uradi, to je da pošalje svoj username, svoj password i da kaže, ja hoću da komuniciram sa servisom V. Nakon toga, ako je autentikacijni server zadovoljen datim kredencijalima, on će vratiti poruku 2 i to je poruka u kojoj se nalazi tiket. Taj konceptiketa, to smo već pro komentari se na na predkodnom predavanju, ako se sjetite kod lidom šederove razmene, tiket se nije zval tiket istina, nego to je bio na ideo poruke, koji je šifrovan ključem koji su razumeli autentikacijni server i B. E upravo tako i ovde taj tiket je nešto što, da tako kaže, mogu da razumeju samo autentikacijni server i B. Znači autentikacijni server zna za ključ KV i ovaj naravno server, odnosno server sve, takođe zna za ključ KV. A kljent ne zna taj ključ, prema tome kljent ne može da pročita ovaj tiket. A što je u tiketu? Tiketu stoji identifikator kljenta, dakle to je Pera Perić koji hoće da koristi server sve. Pera Perić se nalazi na to i to je IP adresi i Pera Perić hoće da komunicizda sa servisom V i što se tiče autentikacijnog servera, tu je sve u redu, dakle on se da tako kažemo slaže za tim da ovaj kljent koristi server. Kad li dobio tako nešto, kljent šalje poruku 3 prema serveru i upravo ovaj sled poruka isti kao Kod NIDAM Shederovog protocol, ono što se Kod NIDAM Shederovog protocolo kasnije dešava, to su poruka 4 i poruka 5. Ako se sečete, to su one dve poruke sa nekim nonsem i funkcijom od nonsa. Ali naravno to ovde sada nije nibitno niti toga ima, zato što samo pokušava da vam objesti logiku kako je nastavio cijel Kerberosystem. Uokviru te treće poruke, dakle kljent kaže, ja sam taj kljent, evo ti tiket koji mi je da autentikacijni server, znači evo ti uloznica koja kaže da ja mogu da koristim tvoje itime, ova razmina završa. Ono što smo videli naravno to je da ovde postoji problem sa 1. porukom, koji je onako vrišteći očigledan, a to je da se lozinka šadio kljent tekst, to se svakako nedešavanje u jednom danes produkcionan sistemu, ovo to možete urediti samo neko koje to trnaja materi, ne znaš co raditi. Ovde postoji drugi problem, a to je problem, ovaj treći poruke koja je podložno replay napadu i to smo isto komentarisali kod, nidem šederoje razmina i upravo zbog toga ste i videli nakon toga ona dva, predloženo poboljšanja, Denning poboljšanja, kojim su uvedeni time stampovi, ili poboljšanje koj po tu nizukrenulo redoslet slanja poruka kod autentikacije. Što može napadaš da urodi? Napadaš ovde ima jedno ogranicenje kojimo malo kvariji sreću kod replay napada, a to je da je u tiketu se nalazi IP adresa kljentac. Dakle, dokli god je kljent C na svom radnom estu, napadaš ne može ništo dobrodi. M.g. nijedan kljent ne radi non-stop i tako 7 dana u nedelji 24 sato, dakle to nijedan čovjek ne radi. Ono što može da se, što se dešava, to je da će taj kljent u nekom trenutku, naprimer, ugasi i računara, možete ga ne ugasi, ali prosto se digne i odrečunara. E tu onda nastupa napadač M koji može da se pojevi se svojim računaram. Ono što ono mora da urodi, to je da svom računaru da IP adresu kljenta, naravno i da ima snimljen ovaj tiket koji je posled i da onda ponavljenjem poruke 3, on dobije pristup serveru. Sad koliko je to teško ili lako za napadača, pa mislim, na podači su ljudi koji oblično znaju što radi u tom IT okruženju, znaju i kako funkcijanišu i mreže i različiti servisit, tako da možemo da pretpostavimo da je to nešto što može da se izvede, dakle da može da postavi IP adresu ili da prosto ovdje donmesta da je uboden računar ovo koristnika C a koji je pitanju Žičanom reže i da se on uključi u taj port. Dakle, ova šema ima taj problema, to je replay napad na ovu razminu, ovdje ima još jedan problem, a taj problem je sad nižao što sam obri sa ovom sniku, sam da ima možda mogu da je vrati, ne mogu. A to je slijedeća stvar, ova šema je tako napravljena, način ono njihova napravljena u duhu Kerberosa, a reko sam da je u duhu Kerberosa da koristnik jednom unese, na primer kada dođe ujutru na posao da unese user name pasor i da kasnije dok li go radi, može da pristupa svim servicijom. Ova šema nije tako, zašto? Zato što ako ovde postoji sad neki novi servici, naprim. v2 paservis v3, na primer sad to je mail server, neki web service koji možda on želi da pristupi. Ono što bi koristnik morao da urati, to je da ponove celu o ušemu, zato što se u okoru prve poruke nalazi identifikator onog servisa koje on želi da pristupi. Što znači da bi kada god želi da pristupi različitom servisu, on morao ponovno da unosi svoje kredenciale. Tako da nadam se da je u ovom jednostavnom primjelu jasno što su neki problemi i sad ćemo da je vidimo u narjednom koraku na koji način su ti problemi rješili, odnosno šta sad kako bi to moglo da se rješili. Ovde sad da imamo još jednu hipotetiku šemu, akli ni ovo ovde što sad vidite nije šema koja se koristi u produkcii, dakle ovaj sad drugi korak kak i Herberosu, ali kao što možete da vidite, ovo šema sad postaje malost oženija i ovde se pojavlja jedan novij entitet. Sad ćemo da vidimo i da malo prokomentarišimo šta postoji u okiru ove šeme. Naravno tu postoji klijent C, kao i rani je postoji autentikacijonijnij server. Esad ono što postoji, to je jedan novij entitet, to je nešto što se zove TGS, to TGS je skraćenica od Ticket Granting Server, dakle server koji dodeljuje tikete. I ono što naravno sad postoji kao i rani, je to su ovi servici V, ja sad ćemo da prepostavimo da ih ima više i da ovaj klijent želi da samo jednom unese svoje kredencijale, a da u to om mogući da pristupislim ovim različitim servicima koji ovde postoje. Videćete i kot Kerbero se postoje ova dva različita servisa, t.č. postoji autentikacijonijnij server, koji omogućeva samo da se provere kredencijali koristnika i postoje Ticket Granting Server koji dodeljuje tikete. U praksi se ti servici nikada ne implementiraju na različitih mašinama, dakle nećete dovideti da postoji poseban server koji radi samo autentikaciji, poseban server koji radi Ticket Granting Server koji dodeljuje tikete. Već je ovo samo jedna logička podela koja razbrstava različite uloge onoga, što su sve dešao. Dakle u principu, u praksi se sve ove objeove funkcije nalaze unutar tog Windows Domain Controller. E sada vidimo kako funkcioniše ova razmi. U ove razmi nji kljent kao i rani je u prvi poruci obraća autentikacijonim servisu i on kaže ja sam kljent i ono što ja hoću da radim, to je da ko uniciram sa ovim Ticket Granting Serverom, zato što taj Ticket Granting, treba će mi on kasnije, zato što hoću da mi taj Ticket Granting Server dodeljuje odgovarniči tikete za ove servise dole v1, v2 i v3 kojima ja želim da pristupim. I već ovde imamo primjer nečega što je bolje praksa, dakle nešavlja se lozinka u clear textu. Već se samo šadlju identificatori, ono što se podrazumeva, to je da na kljentu i na autentikacijonim serveru je upisa na informaciju lozinki, znači autentikacijonim server drži negde lozinki poristika u nekoj formi, a što ste kljentet i tici tu koristik sam, unosi svoju lozinki. E sada ono što se dešava u drugom kora koje sledeće stvar, naravno opet kažem, ovo nije prava, da zme na imatu što što što da se zamirio.
 razmenje ali je bliža, ono me, kako funkcioniši kerepros. U drugi porutci autentikacijni server vraća poruku koja je šifrova na ključen KC i u toj porutci se nalazi ticket za pristup TGS. E sad neko može da kaže pa šta je taj ključ KC, pa to može da bude nešto što je izvedeno iz lozinke samog koristika da ne razmićam, no sad o tome kako bi se to uradilo, prosto mošte da uzmete neki trivialan primer pa da mu nađete odmah manu, a to je da će i klienti autentikacijni server kao ključ za enkrypciju ove poruke koristiti hash od lozinke. To nije dobra praksa, to mošte razmislite zašto nije dobra praksa, ali u svakom slučaju, ono što se omogućava ovakom razmenu, to je da se komunicira na siguran način, a da se ne pošalja lozinka u kliri tekstu. E sad to je manje interesantan del ove priče što radi autentikacijni server, ono što je zanenivio, je to je da vidimo što je postoji u opirutu tog ticket TGS. Ticket TGS vam je da to ovdje odnu ovog slajda i možete ja mislim da razumete iz tog kako je formirana ova poruka šta se u njoj sve nalazi, nači u njoj se nalazi ID klienta, nalazi se IP adresa klienta, nalazi se ID Ticket Granting servera i nalazi se još dva elementa, a to su Time Stamp i Lifetime. Znači za razlik od predhodne šeme u ove šemi tiketi imaju svoju rok trajanja, a ta i rok trajanje je omeđen ovim vrednostima Time Stamp i Lifetime, nači Time Stamp je vreme kada je kredan ticket, Lifetime je vreme koliko traja taj ticket, a to je da kasnije ako bi nekoh teva da ponovi tu poruku i ako se se to ponavljenje poruke dešava izvan ovog vremljenskog okvira, a onda će biti detektu da je reč o replay napadnu. Nači malo je služenija struktura ovog tiketa i što mislim da nisam rekao, to je da je ključ kriptovan k TGS-om, a k TGS je ključ koji dele autentikacijne serveri i TGS. Nači ovdje imamo taj k TGS, nešto mi ne piše baš dobro ovolovka, ali dobra, mislim da je jasno. Kada je dobio taj ticket za TGS, kljen sad da šadlja treću poruku i ta treća poruka ide prema TGS, u njoj kljen kaže sljedeći, jasnim kljen C, ja hoću da koriti servis V, u ovom slučaju možemo da kažemo servis V1, i evo da tikat koji sam dobio autentikacijne servera, koji mi je omogućava da to uradi. A tikat smo videli šta je. Ticket grantik serveri onda odgovara kljen tu porukom broj četiri i u toj poruci četiri se sada nalazi tikat V. Vam je opet datu dno ovog slijda. Tikat V je nešto što je šitro ono ključen KV, koji razumeju taj odgovarajući servis V i tikat grantik server, oni dele taj ključ i to je nešto što mora da se konfiguriše u napred. Zvaki servis takođe mora da bude konfigurisan u okurog domena. A u samom tikatu se nalazi identifikator kljenta, IP addressa kljenta, identifikator servisa i sada vremenski okvir, vremenstvo ogričenje trajnja ovog tikat. Kada je to dobio kljent, kljent šalje poruku broj PK tom odgovaraćen servisu i u toj poruci PK on kaže, ja sam kljen C i evo tikat tikat, ja želim da koristim tvoje ustugje. Ono što server mora da urodi, to je da proveri tikat, da vidi da taj identifikator C odgovaraju identifikator u C, da IP addressa te poruke odakle stiglata poruka mora da odgovaraju na IP addressi koje se nalazi u tikatu, da njegov IDV prepozna, a to će moći da prepozna u koliko je dobro dešifravu poruku, odnosno u koliko zaista dele oj tijučka V, i u koliko je tikat validan, odnosno u koliko tikat se nalazi unutar ovog vremenskog okvira koja je definisan sa ova dva broja. Ja mislim da je ovakva še ima jasno. Ne sad to treba malo prokumentarisati ove vremenske okvire i koja je posledica toga kako se oni određuju. Ako smo rekli da je ideja kod ovoj sistem, da se kljent jednom uloguje, i ako predpostojimo da je to nešto što se koristio u poslovnom okruženju, i ako predpostojimo da je taj kljent neki programmer koji dolazi svako jutro na posao i odlazi svako po podljena posao, ako predpostojimo da radi 8 sati na primjeru toku dana, onda ono što bi bilo logično to je da ovaj TGS tikat, odnosno da lifetime ovog TGS tiketa bude na primer 8 sati. Zašto nije dobro da bude kraći, pa nije dobro da bude kraći, zato što ako bi smo stavili da je lifetime tog TGS tiketa na primer 1 sat, onda svaki nakon što istekne taj tikat, kada hoći da pristupi nekom servisu, onda bi morao ponovno da prolazi kroz celu ovoj proceduru od 1 do 5 kako bi tražio novi TGS. Znači u principu lifetime za ovu prvu poruku bi bilo poželjno da se ostavi da bude 8 sati. Znamo, naravno ako ono ostane taj dan duže na poslu i uđi u 9 sat i hoći da koristi neke od ovih servisa, on će morati da uradi reautantifikaciju i da ponovi celu proceduru u svih poruk kao 1 do 5. Sa druge strane, što se tiče vremena ovog donjek tiketa, ono može da bude relativno krajtko, pošto je u pitanju samo pristup tom servisu, naravno se zalisi kako je servis organizima. Recimo ako pretpostajemo da je u pitanju print servis, neke printer i klient nakon što pošalje poruku pet, ono što radi šalje file-ove krema tom printeru i štampa svoj dokument, onda može da se kažete da ovde može da se postavi veoma kratko vreme, napr. da ovaj tiket traje 1 minut, zato što je to ono vreme koje mi je potrebno da sam klient izdoši proveru klienta. E sada ako se zahteva da tokom celokupno korišinje tog servisa koristni bude ulugovan, onda bi moglo da se razmisti da ove vreme bude eventolno duže, ali ono što je u principu bitno, to je da ovaj drugi tiket može da bude značinio praći. E sad šta nam, zašto nam je bitno da nam tiketi budu pratki? Pa to smo takvođe komentarisali na predhodnom predavanju i tada smo videli da ako ostavimo da neka poruka, odnosno neke ovakav tiketima, dugačko vreme trajenje, to vreme trajenje je zapravo prozor u to kogu može da se izvrši replay napravo. Sa ćemo ovdje da predpostavimo jednu scenariju, a to je scenariju koji sam malo prepomenuo, ovaj klient je ostavio da radi i 9 sat, znači taj danje imao jako mnogo posla, znači prvi tiket mu je isteka od 8 sati, tražio je drugi tiket koji će ponovot trajati 8 sati, mašina nije baš tako pametna da možete da birate koji će trajati tiketi, znači dobio je noviji tiket koji traje 8 sati, ali naravno on ne može da radi 16 sati i 2 sata, tog drugog trajenje tiketa odlzi kući. E, ako je postoje on napadač koji se vreme čeka da ali odlzi kući i ako je video, izvinjase nije klient, to je neki napadač, ona izli m, ako je snimio ovaj ovdje tiket koji je poslat klientu i to ovaj drugi, taj napadač ima 6 sati fore tog kojih je ovaj tiket valida i on može da kada želi da pristupi nekom servisu, znači on može da sada ako uspe da naravno dobija IP adresu klienta, on može da se porukom tri, znači replayom porukom tri, ovom ovdje, može da se obrati TGS i da dobije pristup svim onim servisima kojima može da pristupi originalni klient. Dakle, problem sa određivanjem optimalnog vreme na trajenja tiketa je neka brsta, da kažem, trgovine između fleksibilnosti za koristnika i onoga što je sigurno. Dakle da nije uvek jednostavno određiti. Ako je pitanju, sistem koji zahteva visa u nivo sigurnosti onda ćete postaviti kratko u vreme trajenje tiketa a to će koristnicima biti nekom forneleći, morate svaki čas da unose user name pasup. Dakle, pitanju neki sistem koji nije tako pretreno bitno da se strikno čuva, onda može da se ostavi duže vreme trajenje tiketa. E sad viditećemo, ovost situacij, odnosno, ovaj problem što postoji kod ove razmjenja, to je da postoji mogućnost replaya po ruke 3 i to je opasno, da kažem, veće opasnost. Replay po ruke 3, postoji mogućnost playa po ruke 5, ali kažem su komentarisali vreme trajenje tog tiketa relativno kratko, tako da na padaš nema baš mogu prostora da eksplodatiš je tu vrstu, napada, a to je replay ovog druga tiketa.
 U stiče Ripleya, prvog tiketa bremenski prozor je veći i to je nešto što je opastnije. Videćemo ko' Kerberos je taj problem reš, a zato u Kerberos su poruke služeni od ovog. Ono što sam sam još teo dok smo na ovom slide-u da prokomentarišem, to je slijevjegće stvar. Ako opretpostavimo, recimo da su tiketi dodeljeni sa ovim vrednostima, dakle 8 sati prvi i 1 minut, 5 minuta ove drugi, kako to izgleda iz perspektive koristnik. Ako opretpostavimo, koristnik radi tokom tih 8 sati, znači on će doći na posao, on će se ulogovati na sistem i tada će da unese user name i password. I ovdje prve poruke će se razmenivati jednom dnevno. I to je jedina situacija kada koristnik zaista mora da unosi svoje kredencijav. E sada, nakon 10 minuta koristniku treba file-service. Ono što će njegov računar da uradi, to je da će zahtjevati tiket za pristup file-serveru i njegov računar će u pozadini, to koristnik pošte neće znati, koristnik će samo naprimer kliknuti tamo na neku ikonu koja kaže, hoći da pristupim tom file-serveru, njegov računar će u pozadini uraditi poruke 3, 4 i 5 i on će dobiti pristup file-serveru. Nakon 30 minuta njemu treba sada da očstam pa nešto, opet njegov računar će sada zatražiti pristup drugom tom print-serveru i on će prooči kroz poruke 3, 4 i 5 konovo i to će ponovno biti u potpunosti transparentno za koristnik, odnosno koristnik neće imati pojma da se to desilo. Znači to je nešto što zaista omogućava dobro flexibilnost i to je nešto što omogućava, ovo bi mogli da nazovimo prvim tako zvanim single sign on systemom. Znači prvi sistem u kome jednom unosite lozinku, a onda ta unite lozinkam vamo mogućeva pristup većem broju servis. Vidite ćemo na drugom času ćemo uraditi web-based, način web-bazirane sisteme za single sign on, vidite ćemo koje je razdikatu. Ali u svakom sluči, znači celo od danesnih predavanja je maha poslećeno tome kako da se omogući da ljudi imaju manje digitarnih tradicijala, da ne moraju da za svaki poseban servis panti i da unose posebne lozinki. Nadam se da je ovo bilo jasno i da je jasno što su neke manje ovog sistem, ovo su prvo verline, što je ono što ovakva razmina omogućeva, a onda da je jasno i što su manje i da bi ovo trebalo neka koji još malo ojačati kako bi se dobila šema koja je zadovoljeva najviše standarde sigurnosti. E sad, sad ćemo doći do Kerberosa, ovdje je Kerberos šema, naravno moraćemo da prođemo kroz sve ove poruki posebne i kao što vidite, malo je služenija od onog što smo videli na predhodom slajdu. I ovo je nešto što može da se koristim ozbiljnim produktim i sistemima. Naravno, u zmalu ogledu Kerberos verzija 4 se danes ne koristim. U danesu je sve zastanone o Kerberos u verzija 5, ali videte, dok raj časa ću vam pokazati kako izlaje Kerberos u verzija 5, suštinske razdike nema. Ima razdike u nekim detaljima, u nekim vrstama poruka koja postoje vokvirove razmina. Dakle, ajde da trenemo poruku po poruku, mislim da će vam biti jasno da ovo zaista nije teško. Prva poruka je, naravno, ono što mora da se desi, neko je došao na posao, u kucu i uzarnevi password i njegu vracunor, šalje autentikacinu serveru, one osnovne informacije da se započne dobijenje tikete. Znači on kaže, ja sam plin C, meni treba pristup TGS-u da bi mogu da dobijem tikete za pristup servisima i ovo je trenutak kada je ovaj zaaktiv krajera. I ono što ćete vidjeti ovde to je da se u praktično svakoj poruci koriste time stampovi, odnosno da se u svakoj poruci koristi vreme, a to implicira dalje da ono što treba da se desi, to je da u tom okruženju, u tom okruženju koje se koristi za logovanja na Windows domain kada se koristi Kerbera sa autentikacija, da svira čunari i u luta tog do mena treba da budu vremenjski synchronizovan i odnosno da njihovih sistemstvji klokovih ne smiju da se mnogo razliku. Ja verujem, ovaj time stampi jedan služi za inicijelnu proveru, upravo toga, zato što ako autentikacijni server vidi da se u ovrime bitno razliku od njegovog sata, on će verovatno posunjeti ili na nešto neregularnu smislu da nešto ne funkcioniše na klijentu ili na potencijalni pokušaj napada sa manipulacijom vreme. E dobra, ako tu sve u redu autentikacijni server odgovara porukom 2, poruka 2 je šifrova na nekim ključem KC, koji je, kao što smo reklji, na neki način izveden izlozinke klijenta i u okviru te poruke postoji nekoliko delova poruke, sad ovde je ovo novo. Ovde postoji poseban ključ koji služi za komunikaciju između klijenta i ticket grantik servera, zanim postoji ID ticket grantik servera, što omogućeva klijentu da ako je dešifrovo dobro da prepozna da je pitanju njegu zahtem. Zatim postoji time stamp i lifetime ticketa i ide sam taj ticket. Ticket je naravno nešto što klijent ne može da razume. Ticket je šifrovan ključem KTGS, to je ključ koji razumeju, odnosno koji znaju autentikacijni server i TGS. U okviru tog tiketa se nalazi ovoj ključ za komunikaciju između klijenta i TGS, identifikator klijenta, IP address klijenta, identifikator TGS i vreme trajenja tiketa. Ovdje sad ista nema nikog mudrosti, znači ono što je novo u odnosnu na predhodnu šemu koji su se videli, to je da postoji sada novi poseban ključ, to je ovoj ključ koji služi za šifrovanje poruka između klijenta i TGS. Znači ono što se neće desiti, to je da se samo nako pošalje, taj tiket koji je dobijen, jer videli smo da to, ta mogućnost ostavlja prostor za replay napad unutar vremensku prozora koji je definisan vreme na trajenja ovog tiketa. E dobro, esam i to je ono što se desava jednom dnevno, znači ovo je jednom dnevno. Ovo ovde dole poruki od 3 do 6 se desavaju svaki put, kada taj kljenc želi da pristupi nekrom novom servisu i tada vam kaže, ja hoću da pristupim servisu V, to je na primjer find server, evoga tiket koji sam dobio TGS-a koji mi kaže da ja to mogu dobro dim, znači to je nešto me ne olašćuje da pristupim tomu servisu, ovo je sad novo i evoga authenticator C. Šta je taj authenticator? Authenticator je sad tu koristimo ovaj ključ između C i TGS, znači to je poruka koja je šifrava na tim ključim, koji razumaju samo klient i TGS i u toj poruci se nalazi identifikator klienta, IP addressa klienta i timestamp 3. Obratite pažnju da smo u drugej poruci imali timestamp 2, da u tiketu i da u tiketu imamo timestamp 2. Znači u ovom ovdje tiketu koji se šalje, mi imamo timestamp i lifetime koji definišu koliko traje taj tiket TGS. Rekli smo to je nešto što u principu bi trebao da traje ovaj osusad. Za razlik od toga u authenticatoru imamo novo vreme koje se zove TS3. Esad zašto je ovo uvedeno? Uprvo ovo vreme je uvedeno da bi se sprečio neki potencijalni replay napad. Znači ako pretpostavimo da su klient, autentikacini server TGS i server svi vremecki synchronizovan, to znači da se njihovi klokovi ne razlikuju više od 1 sekunde, ma da je to je previše, vremecka synchronizacija radi na nivou stotine milisekundi. Toliko mogu da se razlikuju klokovi. Znači ako pretpostavimo da su tako dobro vremecki synchronizovan satovi, ono što može da se podesi kao pravilu i što treba da se vradi na TS, to je da kada dobije poruku 3, da pogleda TimeStamp3 i da ako vidi da recimo je TimeStamp3 istekal više od 1 minuta, da tako poruku odbaci. Ovo znači da u ovom šem iz razlik od predhodne šeme može da se ostavi da ovo vreme trajanja tiketa bude 8 sati, a da napadač nema mogućnost da je izvrši replay napad zato što je dodatni nivo prover je provera ovog TimeStamp3 i ako se tu ostavi jako kratko vreme za prover, naprim. reda 10 sekundi ili 1 minuta, znači kada istekne to kratko vreme, napadač više nema mogućnost ponavljenja poruku 3 i to je jedan detalj koji treba da zapomit. Esad naravno ako je sve u redu, ako je TGS proverio sve ovo što treba, on će poslati poruku koja je šifrova na ključem koji razumije samo klienti TGS. To je poruc i se nalazi, ovaj sad vrlo slično, ono me što smo imali u poruci 2, nalazi se sad ključ za komunikaciju između klienta i servera, nalazi se identifikator servera, nalazi se novij TimeStamp4 i nalazi se novij tiket, to je tiket za pristup serveru. Taj tiket za pristup serveru opet tu on je praktično isti kao tiket za pristup TGS.
 On je šifrovan ključen koji poseduju server v i tgs, u njemu se nalazi ključ za komunikaciju kljenta i servera, identifikator kljenta i pjedresa kljenta i identifikator servera i vreme trajanja ovog drugog tiketa. Vreme trajanja ovog drugog tiketa kao i u prehodnu primjero koji smo videli može da bude kratno, znači ne mora da bude pretrenu dugačno. I naravno onda sam pristup serveru je opet kopija onoga što smo imali u poruci 3, znači to je ovaj tiket koji je dobijeno poruci 4 plus autentikator. U autentikator isto kao i gore, ono što je element to je time stamp 5, znači ako se sad recimo, e sad šta sad ovde može da bude. Mi možemo da kažemo ovde, a evo ovde, ovde hoću da ovaj gornji tiket recimo traje 1 sat. I ti meću da omogućim da pristut pom servisu ne mora da se ponovog verificuje unutar tog vremenskog intervala. Znači da taj tiket traje tih sat vremena, ali da bih sprečio rippla i napad unutar tog povećeno vremensku prozora, ja definišam ovo vreme time stamp 5, koji na isti način kao u poruci 3 ograničavam zapravo poruku 5, trajenje poruke 5, da ne bi došao do rippla i napada. Na kraju šestav poruka je samo potvrda svega, dači to je poruka koja je šifru na ključom koji razumije klienti server i u njoj se nalazi ovo, ovo ste veći vidjeli, to je recimo kao ono nonc plus 1, dakle neka funcija o time stamp 5 koji zapravo prestođa potvrdu da je sve uredno. I ovo je Kerberos verzi je 4. Dakle, ja mislim, deluje ovako dostar zapetljeno, ali u stvari nije, kada razmislite malo bolje o tome šta su sve elementi ove razmene i zašto oni postoje. Nadam se da je ovo jasno, moraćete ovo da naučite, ako pogledajte tamo neki stare rokove, kako su izgledali z ovog predneta, videte ćete da se Kerberos prilično često pojavljene na ispitima, šta više gotovo se sigurno pojavljene izpitima, zato što je sistem koji i danas ima značaj. Na ovom slajdu imate to i isto samo onako šemacki nacer, tano šta se zesava i koliko često se dešavaju ove razmene, znači koliko često se razmenjuje, odnosno, unose kredenciali, koliko često se pristupa tiki grantik server, koliko često se traži pristup samom servisu. Ono što ima još i jedan detalj u verzi sa Kerberosom, verzi 5, a to je da može da se desi jako firma velika, da postoji više domen kontrolera, pa da imate programeri imaju svoj, da imaju neke svoje servise koje koriste, a onda imate, rećimo, ako je firma velika, onda imate, rećimo, marketing i ljude koji se bave reklamiranjem proizvu, da oni imaju neki svoji don. I sada ono što se desava često, to je da imaju potrebu, naravno, da se radžuju različne oddeljenje u firmi i ono što postoji rećimo kao potreba, to je da klient direktno spusti neki svoj file, da programer, rećimo, spusti neki svoj file na file server koji se nalazi u domenu koji pripada drugom Kerberosom. U takoj situaciji postoji mogućnost da se dobije pristup i serveru koji pripada drugom domenu, minoču terminologiji Kerberos, to se zove realm, odnosno, kraljevstvo. I jedina razlika ovde je što u trećim koraku, kada umesto da traži klient od TGS'a pristup serveru, on neće tražiti pristup serveru, nego će tražiti pristup u daljenom TGS. Naravno, ono što mora da postoji, to je da ova dva Kerberose moraju da budu na neki način uvezani, odnosno moraju da i posiduju ključeve jedan drugog i to su ključevi između TGS'a 1 i TGS'a 2. Dakle, ova ovde šema koji vidite se nerazlikuje mnogo u odnosu na standardan Kerberos, jedina razlika i u tome što umesto u drugom koraku da se traži pristup u onoj drugoj faziji, da se traži pristup, odnosno, tiket za pristup servisu, ovde se traži tiket za pristup drugom TGS'u, pa se u drugog TGS'a traži tiket za pristup servisu. Nači nema neki velike razliki. Dobro, sad je, tačne dani sad, ja ću zausteliti snimanje. Každa sam na prekudnu predavanju rekao, Kerberos je nastal negde krajem osamdesti godina prošog veka i to je Kerberos verzija četri, prva verzija Kerberos'a koja je na MIT'u napravljena. Malo kasnije, neki sve om osam godina kasnije, je napravljena nova verzija, to je Kerberos 5, a u toj formi je standardizovan u okru IETF sredinom 2000 godine. Dakle, to je dalje sistem koji je mogli da kažemo dosta star izreo i u formi Kerberos sa 5 i danas koristi posebno u Microsoft opruženima. E sad ovdje imate listu svih stvari koje su promenjeni u Kerberosu od tada, naravno nije taj trenutak 2005. godine bio posljednji trenutak kada je nešto promenjenu okru Kerberosa. Naime, ako si pogleda lista IETF ceova u kojima se nešto menjelo na Kerberosu menjela posljednja promene nastala 2019. godine, a to su promene koje kažem da ne znam u Kerberosu više ne smesi koristi RC4, da ne smesi koristi DSi, tako neke stvari. Znači, protokol se menja. Kao što ste mogli da vidite u svim onim šemama razmene poruka u okru i u Kerberosu, a njegde nije specificirano eksplicitno koji se protokol za šifrovanje koristi. Mada so obziram na to da je Kerberos vrzija 4 nastala tkomo 80. godina kada je DS bio praktično jedini standard za šifrovanje u okru učunoskih sistema. Onda se nekako implicitno podrazumevovao da u Kerberosu vrzija 4 se koristi DS. I ono što je recimo u Kerberosu, što je karakteristikno za Kerberosu vrzija 4, to je da se koristio jedan poseban mod rada DS'a, koji se zove ptcebac, to je nezabišan i šta je skacinca do ptcebac. Modifikovanje SIFER block chaining u smislu da je ono ekstuzivno ili na drugom mestu postavljenu i da se inicializaciju nivek da drugačije uzima u odziru, ali nije nešto što treba da pamkite. Također Kerberosu vrzija 5 je bilo predvjičeno da se radi sa tkozvani iso adresama i ovo je nešto što također možete da zaboravite, zato što u vreme 90. godine kada su razmišljili o tome kako da se napredi Kerberos, tada još je poslojila ideja da će cednost lovini iso model komunikacije zaživeti. Nekada, ali realnosti danas da je praktično jedini sistem protokola, koji je ostava internic, sistem protokola, tako da te iso adrese mogu da se zaboravaju. Promenje na način kodovanja, malo drugačije definisane live, tajom to ćete vidjeti na narodnom slajdu, je sad ono što interesantno to je da su neke stvari napravljenje da budu fleksibilnije i da budu zgodnije za koristnike, pa je napravljena jedan ovi fić, jedan ova sposobnost sistema, a to je tako zvanje authentication forwarding. Esešta obi to bilo. To možemo na jednom primjero da razumimo. Recimo, u Kerberos u vjerozija 4, ako bi ste chceli da pristupite file sistemu i da na file sistemu preozmete neki dokument i da onda taj dokument odstampate na štampacu, pri čemu podrazumimo da su file server i štampac, servis i smislu Kerberosa, onda praktično tubu trebalo da se pristupi file serveru, da se downloade taj file, da se on edituje, da se pristupi primim serveru i da se izvrši štampanji. Kod Kerberosa vrze 5, postoji opcija authentication forwardinga gde možete iz vašeg nekog text procesora otvorite dokument koji se nalazi na file serveru, naravno, potbuno transparentno koristići do nje faze Kerberos razmene, a onda kada želite da taj file, taj tekst odstampate negde, onda file server može da forwarduje to pravo prema primim serveru, da se nekako to prenesi, da vaša čunara ne mora svaki put da se obrače TGSu kako bi dobio pristup određernom servisu. Takođe vidićete u porukama Kerberosa verziu 5, da je olaksa na interrealnom komunikacija, komunikacija između tih domena koji postoje u Kerberosu, pa ćete viditi da u opiru same poruki postoji oznaka domena u kome se poruka generisela, što nemenja suštinski način grada samog Kerberosa, nego je to to je više korizitno, da znate zašto ste vidjeti sa nene naradno slide do te neke nove delale porup. Još jedna stvar je urađena, a to je da je napravljeno da Kerberos 5 bude malo efikasnije od Kerberosa 4, ja ću se sad tu vratiti par slide-ova u nazad samo da mu kažem na to šta je bio problem, odnosno nije problem, nego prosto jedna stvar u Kerberosu verzi 4 nije bila preter noracijanom na zajamištenom. Ako pogledamo poruku 2, možemo da vidimo da je poruka 2 cela šifrava na ovim ključenim kacije. I okru te poruke se nalaze neki delavi, za koje je potpuno opravdano da bude šifravan i to su ovi ovde delavi.
 kao što je ključ identite TGS, Time Stamp i Lifetime. I da postoji još jedan del koji je šifrovan, a to je ovaj ticket TGS, koji je sam posebi nešto što je već šifrovano ključem TGS. I ne samo to. Znači, taj je ticket TGS se ovde šifrove ključen kac, da bi onda već u narodnoj poruci se ticket TGS, da bi bio postat u clear text. Znači, ono što ovde imamo, to je da su praktično ovde elementi koje su šifrovani, opiju ticketa TGS, šifrovan i duplo i to bez nekom jasnog, sigurnosnog dobitka, da tako kažem. To isto se dešava, ono što se dešava u poruci 2, dešava si u poruci 4 sa ovim ticketom V, tako da ono što ćete videti u Kerberos verzi je 5 razmjeni, sad kada vam budem pokazala, to je da je ticket izrašao izvan ove zagrede šifrovanje, odnosno, ono se šalje u clear textu, kako bi se postigla već je efikasnost same razmjeni. I evo ovde imate kako izgleda Kerberos verzi je 5 razmjena, ono što treba da primjetite ovde to je da ta razmjena ima potpunistu strukturu kao Kerberos verzi je 4, znači ono se sestvoji od ovde 3 karakteristične faze. Prvoj fazu koji klijen šalje svoje kredinicijalne kao autentikejšan serveru, druga faza koja je za klijenta transparentne i koji on ne vidi, a to je obračenji TGS i to je obračenje različitim servisim. E sad ono što sam malo prenargovestio, je ono što možete da primjetite u okru poruke 2, a to je da je ticket TGS ovde i da je on van ove zagrade, gde se nalazi je delovi poruke koji su kryptovanite učin KC. Ono što takođe možete da vidite to je nešto što sam nargovestio, to je da postoji oznaka realma, o okru koja se nalazi klijent, znači u okru oznaka tog domena. Zatim da Time Stemp se više ne zove Time Stemp, nego se sada to polje zove Times i to polje Times ima 3 elementa, to je vreme kada je generisano vreme, vreme do kada važi ta poruka, znači vreme istica nja te poruke i takođe je mogućnost da se to vreme produži, odnosno da se uredni tako zvani renew vreme na da se proširi vreme trajanja određene poruke. Dakle tu je ta logika sa vremenima malo promenjena. E ono isto što ovde možete da vidite, to je da postoji u opiru poruka nešto što nije postoji u verzii 4, to je nonz, nači dodatno je ojačana autentikat, odnosno se sprečavaju ripla i napadi u uđenjem ovih slučenih brojeva, tako zvanih nonzov, odnosno nam brjuzno li ones. Mada po momiženju i predhodna verzija, Kerberos je sa onim kratkim vreme na Time Stempa 3, Time Stempa 5 pružala veoma razvomno nivo zaštite od ripla i napada. Ovo je globalno struktura Kerberos v erzije 5, ne morate da buvate sve delove razmini Kerberos v erzije 5, a učite dobro Kerberos v erziju 4. Ono što je bitno da primitite ovde to je da je ta struktura ista i tu strukturu Kerberos razmini treba da razumete i čemu služi svaki deo poruke, i da se je odnosno tako si postiže odgovarajući servis. E dobro, to je to što se tiče Kerberos, a sada prelazimo na deo koji se zove federativno uprveni identitetima. Te sve što bi to bilo, sad ćemo da vidimo u narodnim slajdovima, federativno uprveni identitetima podrzumimo da posloje tako zvane federacije identiteta i sad ću ja malo progvoriti nešto o tome, ali u principu, i za ovoj federativno uprveni identitetima, stoji nešto jako slično onome što smo videli kod Kerberos. Šta smo videli kod Kerberos? Kod Kerberos smo videli sistem koji je omogućava da se jednom unese lozinka i koristničko ima, ali neću se jednom unese u kredincijali ili se tokom nekog remenskog perioda dobije pristup različitim servisima koji se nalaze unutr domena tog Kerberos. E sad, ono što je manek Kerberos je to, što je to sistem koji je zamišljim bio za ta neka zatvore na poslovno okluženja, akla sistem koji u principu funkcioniš u oklu jedne lokalne mreže ili oklu jedne firme, a ono što je danas stvarnost i ono što ja veren da ste i vi sami iskusili, to je da ima sve više i više servisa koji se koriste preko weba, da postoji veliki broj firmi koje svoje servise i vi se plužaju preko weba i da te firme vrlo često od vas zahtebaju da se ulogujete na njih, odnosno da napravite neki nalog da unesete svoje kredincijale i dolazi do onoga što ima malo prijatno, a to je da broj naloga koji imate na različniki servisima se povećava i da, ne znam sad kako vi, ali ja mislim da ja imam najmanje 50 različnih naloga na koje kakvim web servisima na koje sam se iz razno raznih razloga bilo privatnih i bilo postavnih registrova. I to je onda neprijatna stvar, način ono čemu ljudi teže, to je da iskopiraju suda svoju lozinku, međutnim da ono što je problem s tim pristupom je što kada jednom bude provaljen sistem neke od takvih firmi na kojima ste napravili svoj nalog i kada se provale te lozinki, bez obzira na to što ćete vi na tom sistemu promeniti lozinku ako ste ostavili lozinku negde drugde, ono što hakiri rade, oni popunjavaju rainbow tabele lozinki koje negde postoje i onda je laša lozinka ranivija. Što znači da bi trebalo da dobra praksa bi nalagala da na svakom sistemu imate različnu lozinku, e sa tu dolazimo do onoga da je to teško panpiti i onda se namjeće pitanje kako da obezbedimo taj tako zvanim single sign-on, način mogućnost da se ulugujem na veći broj web servisa, web aplikacija, korišćenjem istih kredencijal. Ono što bi neko mogla paditi na pamet, pa dobro, napraviti ćemo bazu user name-ove pasvorda i pa ćemo onda to da damo svakove tih firmi, međutim to iz mnogu razloga nije dobra praksa, nego onda nakaj dolazimo do tog rešenja i u okrog dela predavanja ćemo videti dva takva sistema za upravljivnjim tetima, jedan koji je zaslovan na protokolu koji se zove samol, a drugi koji je zaslovan na protokolu koji se zove o autoh. I to je nešto što koristite i verovatno i danas posebno ovaj drugi sistem, zato što pa čak i prvi, samo što verovatno niste znali, zato što je to, recimo, ako ste videli neki web site, koji vam daje dve opcije, jedna opcija da urodite, da napravite kredenciale na tom siteu, a druga opcija kaže login-vid-google-com, Google account ili login-vid-facebook account. I onda vi kad kliknite na to login-vid-google-account, onda vam se pojavi prozori ili već ekran, u kome treba da unesete vaš Google account, Google će vas proveriti i vi ćete dobiti pristup tom servicu. To što sam sad ispričo, nešto što radi taj oautoh metodi, to ćemo malo više raditi sljedeće njedelje, a ove njedelje ćemo se posvetiti ovom pravnjavnog delu. Da krenemo sa pričom o federacij identitetu da schvatimo šta je to od privike. Ovde imamo arhitekturu tih federacij identitetu i sad ćemo da vidimo koje su to oflunili elementi ove architekture. Jedan element koji je lako schvatiti je ono što je ovde navedeno kao principle, to je u principu klijent, odnosno korisnik, ili ako biste sad da to posmatragli i svoj Google, to ste vi kada pristupate različitim servicima. Tako, taj korisnik je onaj koji treba da posleduje korisničko ime i loziku da bi dobil pristup nekom sistemu. E sad naravno nećemo posmatrati situaciju koja taj korisnik ima za svaki o cistema kojima želi da pristupi različite i uzernemo i pasvore, da je nego ćemo posmatrati situaciju kojoj korisnik želi da ima jedan, jedne kredinacijale, odnosno da ima kredinacijale koji su imeli sami na jednom mestu, a da se ti kredinacijali koriste za različite service. Drugi identitet koji je bitan, je tako zvani Identity Provider. Identity Provider je ona organizacija koja vam krajira te kredinacijale, znači koja koristiku krajira kredinacijale i recimo jedan takav Identity Provider može da bude fakultat. Fakultat ima ulobu Identity Providera, gde vi recimo, ja mislim da to iznate, sa istim kredinacijalima možete da dobijete pristup recimo studenskim servicima, ali isto tako sa tim istim kredinacijalima možete da dobijete pristup edurom reži. To su one Wi-Fi mreže i sada ono što još interesantnije, ne samo što možete pristupiti mreži na ETF-u sa tim kredinacijalima, nego možete da odete na Oxford, Cambridge, Sorbonnu ili gde god postoji takođe taj edurom reža i da korišćem kredinacijala sa svog fakulteta, imate pristup tamo da nikutam oni ne pitate. Znači to je jedan sistem koji koristi tu vrstu manipulacije sa kredinacijalima, odnosno mogućnost da se na udajljenom mestu izvrši prover Identity Veta korišćenjem one kredinacijala koji su kreirani u matičnu instituciju. Zašto ETFs godan kao i Identity Provider, a nekoliko razloga, prvi razlog je što kada te došem ETF, vi ste tamo dobili ste indexa, dobili ste ga tako što ste odneli neka dokumenta koji potvrđaju vaš identitet, tako ETF može privešno bude siguran kada je kreiralo index sa određenim brojem i pridružio taj broj indexa nekom imenoj prezimenu da to zaista pripada to je osobi. Drugo, time što ste student, vi dobijete neko svojstvo.
 To je neki atribut, a to je da ste studenti, koji može kasnije da vam da neko pravo. Recimo jedno je jedan od karakteristicnih servise koji postoji, je da posebno je na zapadu to razrađeno, a ja ne znam, davno mi sam bio student, pa ne znam kako to, da li to postoji kod nas. A to je da recimo ako ste studenti, da neke firme hoće daju popusti studenti. Pa je onda jako zgodno da ta firma može da proveri da ste studenti. E sad, dodo što je način kako može da ste proveri da neko studenti naravno, to je da firma kaže, kad hoćeš da kupiš to i to, naprim. na čunar za IT studenti, i ako hoćeš da dobiješ 20% popust, onda mi donesi index, pa dođeš tamo, pa on uzme, pa fotokopira, pa imate taj neku dosadnu i starom odnu proceduru. Ono što je mnogo zgodnije i što se zaiste i radi, to je da putem neke poverljive digitalne razmene, ta firma može da dobije informaciju koje će da veruje, koje će potvrditi da ste vi studenti i gde vi možete onda da izvršite plaćenje, recimo i da kupiti taj uređaj preku internetu. E ta firma koja pruža neku uslugu, odnosno ta firma koja se oslanja na prover u identitetu o strana identiti provajdera, je ovaj data consumer koji se još u terminologiji tih federacij identiteta zove service provider ili resource provider. Dakle, to je firma koja vam pruža neku rastu uslugu, da se je uređa preku interneta, bilo da je to recimo, pristup Wi-Fi mreži, bilo da je to mogućnost da kupite nešto, bilo da je to na primer neka biblioteka, pa mogućnost da pristupite po datcima koji se nalaze u toj biblioteci. To je drugi deo te priče. E sad to postoje još neke, još jedna vrsta organizacija, to su tako zvaniji atribuit servicei, koji pruže jo neke atribute. I postoji jedan zgodan primer takvog servisa, koji je nedavno u se u Evropa pojavio, to je service koji se zove inakademija. I to je service koji preko weba vraća istjučuju u informaciju, da li je neko student, da li je neko inakademija. E sad to je upravo za ovaj primer koji se vam pomenuo, recimo mogućnosti da kada se oddev neku prodevnicu, da bi dobijete popust na osnovu toga što se studenti, ta firma, ako je u pitanju potpuno internetna transakcija, dakle situaciju koji bih ne idete tamo i ne nosite index i ne radi se fotokopijat od indexa, ta firma mora da dobije neku poverljivu informaciju o tome da li ste vi studenti. E sad, naravno, na zapadu je malo razvijenija svesto potrebi čuvanja podata količnosti, pa kod nas bi tamo vam sve iskopirali i znali bi i deživite i koji kast je rođen i tako dalje, tako dalje, a oni hoće da ta podela povijeta kada bude minimalna i ta i na akademijaservis on vraće servic provideru samo informaciju da to je student. I onda, ta servic provider može da vam pruživu servis sa određenim popustom, zato što je dobio informaciju od nekoga kome veruje, koja je potvrdio da ste vi studenti. I recimo, ta i servic i na akademija, za njega su za interesovan i baš tih veliki internet servic provider i poput Google'a, zato što onda oni mogu da pruže neke servici studentima, koji će biti povojljni ili koji će biti bestlotni, ali mogu da dobiju poverljiv informaciju o tome, odnosno kredibiln informaciju o tome, koje, koje, dalje ta osoba koja traže servic student. I sad ja sam ovde sva što nešto ispričo, a nisam ispričo šta je to federacijne, federacijne privete, a celo to, oletredavanje se zove federacijne privete. E sad, naravno, da bi se ovo funkcionisalo, ova dva entiteta ovde, a to su identity provider i servic provideri, moraju nekako da se dogovore, na koji način će se razmenivati te informacije i moraju da nekako potvrde mehanizme funkcionisanja svih tih stvari koji su potrebni da bi se izvršila prover identiteta. Ono što se podrazumeve ovde, to je da će baza koristnika, odnosno baza svih kredencijala, uveko ostati pod identity provider, znači, identity provider neće nikada dati servic provideru u bazu koristnika, to je neodgornu iz viša razloga, jedan od razloga je što je to ne ovoštivno deljenje nekih podataka u ličnosti i nekih svojistava nekoj drugi organizacije, drugi razlogije, što se time potencijalno kompromituje tavrsta baza. Sa druge strane, znači, to se ne dešava i to znači da se svaka prover identiteta vrši kod identity provider. Sa druge strane, servic provider pruža uslugu i ono što servic provider očekuje od identity providera, to je da postoje i neka vrsta hidijene kada se, kada reču o državanju ovih baza. Kada to kažem, mislim na to da recimo, se identity provider obavezuje, da će nalogje i kredencijale da deliti samo stvarnim osobom, da neće falsifikovati svojstva ljudi koji se nalazu u toj bazi, atribute, da neće napisati za nekog ako nije student, da je student, da neće nekome ko ne postoji kredati veštački nalog koji će imati mogušnje zdostvar i neku privilegiju u opiru servic providera. I takođe, ono što je važno da ono k triunika recimo, kada neko napusti fakultet kada više nije student, da to k triunika bude izbačenista je baza. I recimo, to ćete vi uskoro vidjeti kada budete završivi fakultet, neće proći mnogo, znači možda čak i istog dana ili narodnog dana, vaš email nalo će biti ukinut. Vi nemate više to pravo, znači da ta email nalo gizmeđu ostalo go pruža i neki drugi servise i onda nije uredu ako više niste student ovoj fakulteta da imate pravo da koristite te servise. Znači mora da postoji, mora da postoji neka vrsta dogovora i odnostu ugovora između identity provider i service providera koja koja reguliše pravila ponašanja okordu te federacijedniciteta i onda kada kažemo federacijedniciteta zapravo ona prestave skup različitih identity providera i skup različitih service providera, koji su se svi dogovorili oko nekih zajedničkih pravila kako će funkcionisti, kako bi service provideri mogli da daju pristup različitim, odnosno ljudima koji pripadaju različitim identity providerima i sa druge strane da koristnice i nekih identity provider koristir različitih servise kojod različitih service providera. I narodno sve to podrazumeva da, znači ako ovde imamo više avih data consumera, znači to su sad različitih servisi, da za sve te servise se provere identitete vršt kod ovoga identity providera, znači da postoji samo jedan skup renicijala, a da se, odnosno za svakog čovjeka po jedna uređena dvojka i uzernajima i pasup, da kogovorim o to i vrstih renicijala, a da to omogućava pri istup različitim servisima. I sad ćemo dovidimo malo kako je to tehnicky realizovan. Dakle, objastimisimo šta su federacije identiteta i sa tu postoje različite technologie koje se poriste, postoji technologie koje su zastanovanu na samlijeziku, samlijez security and social market language, to je jezik koji je zapravo izvedeni iz XML, koji je omogućava transport različitih sigurnostnih poroka i postoje dva sistema trenutno koji se koriste za web single sign-on, to su tako zvanje simple samu PHP, koji je u glavnom se koristi u Evropi, koji je razvijen od strane Evropski akadenski, mislim da su neki norveženi, ali u svakom slučaju pripadnici Evropski akadenski zajednice i postoji sistem koji se zove shibolet koji je američki. Nema sušnijski razlik je, dakle radi i istu stvar, samo se nešto razlikve prisip, kako se sluko komunicira. Ja ću vam u narodnih slajdovima pokazati kako to funkcioniše koji shibolet, a funkcioniše veoma slično i koji je simple samu PHP. Postoji drugi sistem, a to je ona i sistem koji se vam već pomenu, a to je taj tako zvanji OAuth system, a to je sistem koji koriste veliki provider i usluga na internetu poput Google, Facebook i Microsofta, koji sada za ove neke manje pružovac i usluga omubućavaju da vi možete da koristite neku uslugu kod neke firme X na websiteu X, tako što ćete se ulogovati korišćenjem Google-vih kredinciali. Oni računaju, ta mala firma X ima više razluga da napravi takam neki dogovor sa Googleom. Jedan od razluga je naravno što će biti verovatno reklamirana na Google. A drugi razlug je što Google i Facebook i Microsoft oni već imaju neke malo strožije mehanizme prover i identitetak, pa nekakova vežu vaš analog ili za broj mobilnog telefona ili za nešto drugo, dakle mogu dosta predstnog duprde koje tu, dok bi ta druga firma morala sama to nezadisno da razvija i onda koriste ovakav princip. Znači na obostranu korista. I ove tih metod podrazumeva da postoji neka vrsta dogovora, odnosno, ugovora između ove dve strane. Danas ćemo na ovom času se malo više posvetiti ovom mehanizmu koji je zasnoma na samlu, a onda naravno nelje ćemo malo detajnije priživiti nešto o auteg. E sada vidimo kako funkcijoniše šibolje. Inac je, ova priča je o federacijedentitete je opširnije od onoga što imate u knizi koja vam je preporučena. Tako da na ovim slajdovima u dunu postoje linkovi, na izvurne dokumente na kojima možete da nađete sve ovo čemu ću vam priča.
 pričemu vidićete ako odete nove linkove nisu to preterano veliki tekstove i tako da ne treba se plašiti nije to sa neka ogromna količina informacija koja tu to stoji nego prosto možda ću ja nešto do ovog izpričati konfuzno i onda će vam biti potrebno da se konsultujete s nekom referenciom koja je možda malo pouznan i odmene. Dakle, ajde da vidimo kako funkcije oni še šivole. Prvi korak je potpuno jasana, to je viste srećnik korisnik koji želite da pristupite nekom servisu preko weba, dolazite na svoj browser i ucete urlo tog servisu i to je urlo servis provider. Esat, tu postoji nekoliko različitih modela šta može da se desi. Jedan model je da taj servis provider vam predstavi i da vam da opciju da unesete kredenciale da unesete username i password, pa onda vi kada unesete svoj username, a username je tako formiran da bude u formi, na primjer, neki identificator, et.domen.com, a taj domain je zapravo adresa code identity providera, pa onda kada to unesete, onda će servis provider znati, da takav zahte treba da redirektuje prema određenom identity provideru, onom identity provideru koji pripada tom domenu.com. Druga opcija i to ću vam, znači jednu i drugu opciju ću vam pokazati, druga opcija je da imate mogućnost kada dođete na, kada postoji potreba se loguje, da imate mogućnost da izaberete vaš identity provider i da kliknite na vaš identity provider i da onda kažete, e, ja ću koristiti taj identity provider zaprover. U svakom slučaju, ono što se dješa u drugom koraku, to je da servis provider vas redirektuje na stranicu identity providera. I to ćete vidjeti, probeni će se urlj. Znači urlj više neće pripadati servis provideru, nego će urlj sad biti urlj identity providera, što znači da ćete vi svoje kredencijale uneti na web stranicu identity provider. Ako je sve u redu, znači u trećim koraku vi upišete svoje kredencijale, ako je sve u redu, onda se odgovor šalje od identity providera prema koristniku, a koristnik ga vraća ka servis provideru. Servis provider provera odgovor, ako je sve u redu koristnik može da pristupi resursima. Na narodnom slajdu imate sve ovo što sam sad izpricava obješnjenom šemacke i znači imamo po sveciti malo više pažnje jednom detalju, a što se tu treba da bude u tim porukam, odnosno kako bi ono je trebalo da budu formera. Prvi korak je da koristnik pristupa servis provideru i dobija tu stranicu. Drugi korak je da se izvrši redireksija sa servis providera na identity providera i sad tu smo rekli da postoje različiti modeli, kako se to radi i to ono kranje linji pise na ovom slajdu, način metode se razliku i detali nisu toliko bitni. Znači, sa ove stranice se odlazi na stranice o identity providera i koristnik dobija web stranice o identity providera koja moh umogućava da unese svoje kredencijava. Ono što je bitno da primetite, to je da veza između user agenta i servis providera i veza između ovog user agenta i identity providera i jedna i druga su zaštićene TLS. Znači, to se podrazumajva da ove postoji TLS. Što znači, da podaci koji se prenos izmuzi u njih su zaštićeni u prenos. I ove kredencijali koje šalje user agent prema identity provideru, oni su šifrove. E sad, ono što se deša ovom koraku, ove to je da identity provider proverala vaših kredencijale i ono formira odgовор koji će biti poslat servis provideru. Dakle, ono što identity provider treba da pošadje, to je da je u pitanju koristnik Pavle ili kako god se već zove, da i može da se pošadje nisam nekih atributa, naprimer da je to neko koja profesor na fakultet. Zašto je to bitno? To je bitno servis provideru, zato što on na osnovu tih atributa posto može da zakojući da meni, ako sam ja taj koji i pristupom servisu, može da dodeli pristupom servisu ili da ne dodeli. Dakle, atributi su potrebni za neku brsta autorizacije korišćenje određenih delova servis. I ono što identity provider radi, dakle ono formira odgовор i taj odgовор dolazi do browsera, pošto naravno u ovom ovde delu se koristi telesesija. Ovo je taj odgовор dolazi do browsera i browser ga prosleđuje ka servis provider. Ako je servis provider zadovoljano ovim odgorum, onda servis provider pruža odgoreću uslugu i koristnik je dobio pristup servisu. Dakle, to je na visokom nivogu, da tako kažem, način kako se razmenju o ovom informaciji. I sad neko može da kaže pa dobro, da se da se dači da se dobro, na visokom nivogu, da tako kažem, način kako se razmenju o ovom informaciji. I sad neko može da kaže pa dobro, ovo je jasno, a zašto nam ovo što ovde treba bilo kakva dodatnj sigurnost, pa sa jedne strane već imamo teles koji vrši inkripsiju poataka između browsera i servis provider, između browsera i identity providera, da li nam je ovde potreban bilo kakav novi nivo sigurnost. E sad ja ne znam, da li vam pada na pamet ovako na prvo slušenje, šta je ovde problematićno, gdje je ovde potrebno obezbediti sigurnost. Ali evo sad ću vam ispričati šta je to što je problematićno u okviru ove razglede, odnosno, gdje je potrebno dodatno obezbediti sigurnost. Znači u ovaj prvoj fazi nema ništa spor. Ona ne zateva nikakvog posebne sigurnostne mehanizme i to ću vam ukrenili i pokazati kada vam budemo u radio dimostraciju kako se ovo funkcioniše. Ono gdje nastaje problem, to je nakon ovo koraka, dakle nakon što je user agent dao svoje kredinicijale identity provider. User agent je predao svoje kredinicijale i identity provider je napravio svoj odgovor. I to je ovaj ovde korak. I ta je odgovor u ovom koraku 5 se šalje prema browseru i onda browser to redirektu je ksrbiz provider. Ovo je odgovor. Je odgovor koji je zapravo informacija koji ide od IDP ksrbiz provideru, od identity providera ksrbiz provideru i service provider treba da veruju ovoj poruci. A na putanji te poruke postoji neko, a to je toste vi ko bi možda želeo da promeni taj odgovor. Na primer, recimo, idemo da zamislimo s neću situaciju. Vi, je od jedan tlasečan primer napada kako bi neko mogo da pokuša da osmisli. To je sistem, recimo, service provider je neki sistem gde imamo pristup i vi kao studenti i ja kao profesor. I vi se logujete na taj sistem i vi, nakon što ste se ulogovali, vi ste dobili potvrdu, odnosno, ovaj odgovor je formirala identity provider u i kaže to je koristnik Pera i Pera je student. I sad vama se nestvije to da dobijete taj atribut student sato što znate da će ovaj ovde service provider da vam onda da neke smanjene privilegije u odnosu na to da ste profesor. I pošto ta poruka Pera je student, svakako dolazi ovde u vaš bravo zemljajte u vaš browser, vi aviste sklonnih akovanje i pisanje programa, vi kažete dobro, ja ću kad dođe ova poruka da je presretnem i ja ću ovde da u toj poruci promenim nešto, nači ja ću ovde napisati da Pera nije student, nego da je Pera profesor. Dakle, user agent je taj koji je ovde potencijalni men in the middle od kooga identity provider i service provider treba da se zaštite. I ono što ćete vidjeti u okoliku samu razmene, to je da ova ovde poruka, znači poruka pet, odnosno, sadržajte poruke o kome je reč, mora da bude potpisan, odnosno zaštitčenost strana identity provider i to na takav način da kada stigne ta poruka service provider bude siguran da tu poruku nikod nije promenim. Naravno, service provider i identity provider imaju neki ugovor, odnosno, dogovor između sebe i oni znaju kako da to provere, belu i u digitalnih certifikatima ili šta već, ali ono što je suština i zašto ovde mora da postoji dodatna sigurnost i ta sigurnost se transportuje putem samlo protokola, to je ovo što koristnik sam u svom browseru može da poželi da promeni taj odgovor kako bi izvršio manipulaciju cerim sistemom. Dakle, to je ta priča kako funkcioniše, kako funkcioniše single sign-on u web slučiji. E sad da, jedan detrih koji možete nisev na pomeno, a to ću vam takođe pokazati sad u okviru demonstracije, to je da recimo kada u nekom trenutku vaš browser dobi ovaj odgovor i ako bi sad da chceli da odvijete na lokaciju nekog drugog servic providera, onda cej ovoj proces autentikacije ne bi morao ponovno da se prolazi dok legoce browser ne restartuje, dok legoce koristi i isti proces browsera, već će taj odgovor od IDP-s.
 i entity providera biti sačuvanu browseru i onda kada bi se išlo na adresu neku drugog service providera, samo bi se taj redirekt poslao, direktno service provideru i bi ste dobili odma pristup tom drugom service provideru. I takođe nekom trećem service provideru, znači ta poruk, kad koja je me potvrđen vaš identitet, bi bilo poslata i trećem service provideru. I na taj način se ostvaruje tako zvanje taj web single sign on, odnosno mubućnost da dobijete korišnjem isti kredencijala pristup različitim service providerim. E sad, dobro, šta se tu sad razmenjuje, to sam manje više objasnio i šta su to stvari koje se razmenjuje između ovih entiteta. Naravno za sve ovo se koristi taj protok, o koji se zove samu. U okiru samla postoje malo dugačije terminologija, pa se taj identiti provider zove samu autoriti, a service provider se zove samu konzjumer, a sve poruke koje se zove samu kašalje između tih entiteta su tako zvanje samula sršini. I to ćete na vežbama se upoznotim dosta detaljni sa samim samlom i sa elementima jezika. To je nešto što, danas onako, dosta traženo kada god ako se zdarbe si da radite u neku firmi koja će se baviti tom vrstom web single sign on. E dobro, sad je vreme da uradim ku demonstraciju, ovo dva slajda su u ona i situaciji kada ja ne imam pristup internetu i ne mogu da izvršim, pa odlijat u nešto pričnosti u entima, pošto to sada nije slučaj. Saću da podelim drugi ekran, pa ću vam pokazati šta se tu deša. E dobro, nadam se da vidite browser i u ključi ću još jedno stvar, a to je alat koji se zove samul tracer. Saću vam pokazati, prvo jedan od sajtova koji pripada federaciji, to je sajt pan-eurobski akadenski mreže koji se zove žeant i kao što možete viditi, oni koriste ovaj princip koji sam vam pomenuo, a to je da ja sam izaberem svoj identity provider, to traje učitavanje, pošto je ogroman broj ovih razičnih identity providera traje neko vreme, a kao što vidite moram malo se sačekali, ono što je pojente, to je da ja bih pristupio tom internetu žeanta, evo, imamo opciju ovde da izaberem svoj identity provider. I kao što vidite, ja sam sa te lokacije, žeant.org, došao na logine tam, aj, AMRE sa AMRE, sa acereset, to je sajt naša akadenske mreže koja je meni za potreba vidimonstracija, napravila na logije koje imam mogu da pristupim i da vam pokašam kako ovo funkcioniš. Dakle, kao što ste videli za taj pristup internetu, ja treba da unesim user nemipasa. E sad ja to neću sad uraditi i da, još jedno stvar kao što vidite, ovde se koristi taj simplu samu PHP. Ja to neću sad uraditi, ja ću sad da odem na jedan drugi site, koji takođe zahteva federativni pristup, a to je site koji se zove file sender, to je usluge koja služi za to da se pošalju veliki file-ovi, nače ako imate file od 1 giga pa nemože ostane u attachment, onda pomoć ovoj file sender možete da pošaliti taj veliki file. Uzgred inače kao što ste mogli viditi u onom trenutku, kada sam došao do iamresa, tu se pojavila jedna samu poruka, ali idemo sad drugim redom pa ćemo vam da pokazati sva šta posliplo i urtog samla. Znači, ako, ja hoće pristupim file senderu, kažem logon, e sad u ovom slučaju je file sender direktno povezan na ove iamresa single sign on portal, ja tu unosim svoje kredenciale koji su mi potrebni i kažem login i, a-ha, nešto nisam dobro uputsova. Dobro, sad je sve uredu i dobio sam pristup servisu. E sad sad ćemo da vidimo šta se tu dešavalo što se samla tiče. Znači, ja sam bio, ovo ovde poruka bio sam na lokaciji file sender i file sender me je u jednom trenutku redirektovalo na login i taj iamresa ceresa i tu postoji saml poruka u kojoj se nalazi tako zvanje authentication request. Taj authentication request nema bog znašta, znači, taj authentication request ima ovde informacije o tome koje consumer, odnosno koje service provider i ima informacije o tome koje identity provider, odnosno kome se ovo šalje i ima ID ovog zahteva. Nakon što sam ja ukucala user name i password, došli smo do ove druge poruke u kojoj je formiran odgovor. Znači, u okuru ove poruke formiran odgovor i taj odgovor je moji browser kao što ovde možete da vidite redirektovalo prema service provider-u, dakle, prema ovom fideh. I sad ako se pogleda šta postoji okuru ove odgovor, kao što vidite odgovori priječu bugačak i ima koje kakvih različitih delova, nećemo ulaziti u detalje. Ono što je bitno, to je da je to odgovor na ovaj zahtem koji su malo preimali, znači, isti kod ovog taj indisponslu polje odgovara, onom kodu koji smo videli malo pre, a ovdje tako će postoje neki delovi koji objašnjavaju, šta će sve da se koristi za zaštitu ove poruki. Znači, kao što možete vidite, koristi se RSA i SH1, koristi se digitarni podpis i definisani su algoritmi kako se štiti ovo poruka, imate message digest, koji obezbeđuju da ova poruka nije menjana, nači to je neki message authentication kod, imate digitarni podpis, a digitarni podpis je formiran kao što se ovde vidi, tako što je taj message digest SH1, pa je onda na to priminjen RSA algoritm, tako je šifrovano je privatnim ključem, a šifrovano je privatnim ključem organizacije koja je napravila ovaj digitarni certifikat, je ovdje vidite da postati i X529 digitarni certifikat, ja mogu da pogledam sadržaj tog digitalnog certifikata, ovdje ovdje ovoga lata koji je dostos godan, a recimo dađemo ovdje i kažem par si rečente, i kažem par si rečente X529 certifikat i evo kao što možete vidite dole, dakle to je digitarni certifikat koji pripada, a, i amresu, dati su modulusi, da to je sve ono što je potrebno da bi se ove informacije koje su postati u opiru samu poruke proverile. I, nači ono što se konočno desilo to je da sam ja dobio pristup file sender. E sad ono što bi bilo interesantno to je da vidimo šta se sadržava, ako ja sad ovde na ona i sajt koji se zove intranet, jean.org Dakle, taj sajt je zahtajevo ako se se sečete na početku da ja unesem username i password on je ovde došao obraća se na isti način kao i malo pre mom identity provideru malo ćemo sačekati košto kao što se videli to relativno sporo radi kao što vidite takođe ovde su se pojavili neke samu poruke, da će opetio da je sada taj service provider zahtajeva potvrdu mog identiteta ja sačekam da se ovdje seipa da vidimo šta tu dalje ima problem, nežalost je u tom, u pravu e, veraši u from stranici ako ja sad kliknimo ovde na moj service provider kao što ste videli, dobil sem pristup intranet to da nisa morao da unesem svoje kredinicijale da je toga magija single sign ona se desila mogli bi smo ovdje da prostudiramo šta imamo ovih samlja poruka ali ajde da ne gnjavim više sa tim to je princip single sign ona kada se koristi saml a kao što rekao, fićete u okuru vežbi malo više i malo detajnije su poznati sa samlom kako bi ste videli na kraju kako bi to mogli da si skoristi kako bi se mogli da se dobro napraviti na našem kanal dobro, samo da se vratim tamo da smo stali dakle ovde smo stali e sad ono što je naše sledeća tema a to nećemo otići to je ovaj autoche mehanizam odnosno ne mehanizam koji koriste veliki provideri servicea kao što sam rekao, google microsoft facebook koje vam mogućavaju da se na neki drugi service logujete korišnjem njihovih kredinicijala otom, odnosno otom sledeće nje vidi dobro, ništa ja ću sad zaustviti s njihovim
