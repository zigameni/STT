 Na predkodnim predavanjima ste čuli kako funkcijaniš RS algoritm i videli ste osnovne koncepte rada RS algoritma. Danas ćemo zaključiti ove delo predavanja RS algoritmu. Jednom pričom o tome koji su potnice linapadi na RS algoritm i šta je ono, odnosno u čemu se nalazi snaga da tako kažem toga algoritma, odnosno šta je ono što obezbeđuje sigurnosti o algoritm. Nešto od toga smo pro komentari se li na prošnj času da ćemo to malo ponoviti, a vidjet ćemo neke nove interesantne vrste napada koji se se pojavilo i koji imaju utica i na to kako se radi sa RS algoritm. Dakle u okviru ovoj predavanji ima 5 mogućih napada od koji ćemo 3 malo detaljni proučiti. Prvi je naravno Brute Force napada, odnosno pretraga sih mogućih tijučeva. M.g. videli smo da se ovde sa RS algoritmom radi se mnogo većim brojvima, kod simetričnih algoritama gde su veličine ključeva reda između 128 i 256 bita. Za razdiko toga, kod RS algoritma imamo veličinu modula koja ima na primjer 2408 biti što je danas da kažem minimum, a ima nekih sajtuva i nekih primjena da se koriste i 3072 ili 4096 biti. Dakle još veći brojevi, samim tim i ovih brojevi, da je i koji se koristiti potencijalni ključevi su veći i prostor pretrage grubom silom je veći nego kod simetričnih algoritama, tako da je to prosto način, na koji s tijuguna padač neće probati da napadne ove algoritme. A mi ćemo vidjeti ove neke druge načine koji su ovde navedeni i malo ćemo više pažnje posvetiti, kako se reko, od napada napadima. Prvo vrste napada su matematički napadi, pošto sama algoritam je matematički da tako kažem, način krije se jedna matematička operacija. Onda, ono što smo rekli na prošom času to jedavanje, to je da je jedan od, da se pokuša faktorizacija broja n. Videli smo da se n dobijeno zapravo kao proizvod da prosto broja, to su broje pk, odnosno to su brojevi koji su pseuda prosti, ne možemo da kažemo da su prosti, zadoša su dobijeni nekim algoritmom, kao što je Mila Rabinov algoritm koji daje, taj test daje određeno verovat poću da je broj prost, ali nije ne možemo nikad biti 100% sigurni da su prosti. U svakom slučaju, ono što bi neko mogu da probat urodit, to je da urodi faktorizaciju broja n, ako to uspe da urodi i pronađe brojeve p i q, onda od atle je pronašao i Euleru u funciju 1, kao 5-1 puta q-1, a onda pošto zna E kao javnit ljuč, može da pronađe D koja je multiplikativni invers za D po modulu FIOD. I to je ono što je direktan napad na ove algoritme. E sad kako se, da je se krije sigurno samo algoritma, pa sigurno samo algoritma se krije u tome da je u neko normalno vreme, ili da kažemo u neko polinomijalno vreme, ne moguće faktorizati tako velike brojeve koji danas imaju 2448 bita i više. E sad da bih vas u to uverio, odimete primere nečekaj što je firma, RSA Labs uradila, to je da je napravila taj tako zvanim factorizaciju challenge. Na njihovom sajtu možete da, ko ostavite Google da vićite i taj sajt, možete da pronađete, oni su ostavili brojeve koje treba faktorizati, koji su dobijeni kao proizod dva velika proste broja i koje treba faktorizati, a za faktorizaciju tih brojevo, odnosno za pronađenje brojeva pk. koji se se stoji to n, se deli nagrada i ta nagrada, te nagrade kao što možete vidite nisu male, znači ako uspete da faktorišete broj, sa njihovog sajta koji ima 826 bita, nagrada je 75.000 dolara, za 1.24 bita je 100.000 dolara i za 2.482.000 dolara. Dakle, to su nagrade, mišim, mogao bi čovit nekako da iskoristi te pare i ja vjerojno da postoje ljudi koji pokušao i to do vrede i ono što se dešava, naravno to nisu prvi brojevi koji su postavljeni da se faktorišu, odnosno da se pronađu njihovu činjavci, već su postojali i rani brojevi i oni su resedi. I poslednji tako broji koji je resedi, odnosno koji je uspešno faktorizam, to je broj tako zvan i RSA 250 koji je faktoriš sam predno godino dana i on je imao 829 bita, što je negde oko 250 decimalnih cifara, znači to je broji koji je reda 10-250. Kao što vidite, taj broj je ješu veki ispod onog 1024, ali se bažno toga što su ti brojevi dostapri bližili ovoj granicu 1024, u posljednjih nekoliko godina su praktično si prestali da koriste RSA algoritm koji ima veličinu modula od 1024, nego se prešlo na 2048 kao minimum uled. Zdake smatra se da je još uvek teško i praktično u nekoj normalno vreme, način, na kažemo za jedan ljudski život, da je sa sadrašnjim razvojem računara teško ili nemogući faktoriši TV-lbitnih. I nače ono što se desilo, kako je nastavo RS algoritm, to je da su se pojavili neki malo napredni algoritmi za faktorizaciju brojeva, pa su oni malo ubrzali celo taj proces i kada se pogleda kako su ljudi rešavali u početku, način, kako je ta brzina rešavanja, problema faktorizacije veliki brojeva, raste vide se ti discontinuituje, tvoj je u smislu da se ubrzalo pronalženje faktora, neko prirodnog broja. Međutim, generalno, to je još uvek težak problem i uš uvek ne postoji dobro rješenje za problem faktorizacije. E sad, ono što sam vam takođe pomeno na predkodnom predavanju, a zašto ste možda čuli ako neko pomene post-quantno pitografije u i tako stvari, ili neko pomene kvantne računare kao nešto što će pomeniti način, na koji će se neke stvari raditi u računarstvu. Jedno tako je stvari je upravo problem asimetričnih algoritama, zato što je napravljen taj tako zvanih šorov algoritem koji podrezumeva postojanje kvant pod računara, koji može u polinom i elnom vremenu da izloši faktorizaciju brojeva i ono što je u praksi primenjenu, a to je ovaj šorov algoritem sa 2 kubita koji je uspešno faktori sa obroji koji je reda 4 miljon. Dakle, to je, kako što mošte vidite, daleko manji broj od ovih broja koji ima 250 decimali cifara, ali u svakom stučaju, način, postoji pokazane da taj algoritam radi, i sada ono što ne dostaje da bi neko rekao da RS algoritam više nevalja, to je dovoljno veliki da tako kažem kvantni računar koji će moći da, koji će imati više kubita i koji će moći da faktoriše velike brojeve. Dakle, sa danošnim danom si još uvek smatra da RS algoritam siguran, ali ono na čemu se radi, to su tako zvanje postoantni algoritmi koji imaju ulogu ili digitalnoj potpisivanje ili asimetrične hipografije koji neće biti zasnovani na matematickom modelu koji podrazumeva napad koji je faktorizacija brojeva, nego to su sad neki drugi metematicki modeli koji postojeva. I nažalost, mislim, nećemo uopiru ovog predmeta moći da se udobimo više u tu neku drugu vrstu matematike, prosto nema vremena i drugo, to je nešto što je bliže da tako žem nekim izvčavanjima primjene matematike, nego našoj struci koje je računarstv i softarske žinjestu. Dobro, oddaj imate neke komentare kako bi trebali zabrati ako se bira 1024 obitno n, kako treba i zabrati brojeve p i q, da i kuda, ali oni treba da budu veliki brojevi, ali ajde to, nije pretrenolažno. Drugi interesant na vrsta napada na RS algoritm su tako zvanji vremenski napad. I sad ajde, opat ću se vratiti na ovaj jedan slide, malo prije da bih vam pokazal ilustrovo šta je to i kako može da se eksplatiše vreme u RS algoritmu. Uprvom je ovaj primer koji smo pomenuli prečasa zgodan, zato što učete moći da razumete šta je problem. Evo ovdje možete pogledati, recimo operacija kryptovanja ovog ovdje prvog bloka. To je operacija u koje se broj 3340 diržana 11, po modulu 11.023. A pogledajemo samo ovu operaciju deshifrovanja tog istog bloka. Operacija deshifrovanja istog bloka podrozumila vadizanje neku broja, to je broj 10.260, ali da kažemo da su brojevi 3300 i broji 10.000 približno slično vreda veličine. Ali ono što nipribližno slično vreda veličine to je eksponenta koji se diža ovaj broj, nače ovaj broj se diža na eksponent koji je 5.891, to je jedan jako veliki broj. I ono što iz ovoga možete makar intuitivno da skvatite, to je da će ovo operacija šifrovanja trajati kraće od operacije deshifrovanja. Jednostavno matematicka operacija, odnosno brojevi su manji, to je samim tim i lakša izračunavanje. Odnosno ako bi smo otišli jedan slajd dalje, ili dva slajde dalje, pa vas ja poceti ovog ovdje algoritma koji predstavlja jedan algoritm koji im se ubrzava izračunavanje eksponenciacije po modulu.
 Ovde ima jedan ključni deo ovog, odnosna da kažemo, dva bitno dela ovog algoritma. Prvi je koliko bita ima u samom eksponentu, a to je ovaj ovde broje k. Dakle što je eksponente veći, on ima više bitate, će sam im ti mova for pet da više puta da se izvršava. A z druge strane ajde ako prepostajimo da oba broja imaju isti broje bita. Ima još jedna razlika, a to je ovde je deo koji se izvršava samo za one bite u eksponentu koji imaju vrednost 1. E, u slučaju kada imamo one bite koji imaju vrednost 1, tu će biti izvršavan još jedno dodatno množenje koje najviše doprinosi vremenu izvršavanja ovog algoritma. Dakle, ono što radi vremenski napad, taj napad koji je predložen bio, to je da se prati vreme koje potrebno za izvršavanje određeni eksponenciacije po modulu i da se onda na osnovu tog vremena koje potrašeno zaključi da ali je taj broj veći ili je taj broj manji, odnosno čakim pleću to može se zaključi koliki broje bita u eksponentu ima vrednost 1. Što onda značajno skraćuje potnicijanom napadaču prostor pretrege tih potnicijanih eksponentata i značajnom, značajno, više ne mora da radi potpunit brute force napadnego, može da radi napadne jedan ograničen i brojeva koji se uklapaju u taj model. Kako on može da zna koliko je vrema izvršavanja operacije? Na osnovu toga što ako pretpostavimo da se neke poruke šalju koje se šifruju rasimetričnim algoritmom, s RS-algoritmom i one se na primer pakuju u pakete, on može da prati vremena i trenutke u kojima tipa kjeti izlze izračunara. Ne mora čak da budem i na tovra čunaru, nego može da vidi da snima trenutke u kojima tipa kjeti izlze i da onda na osnovu vremena izlaza paketa da implicatno zakliči da je za neki od tih paketa bilo potrebno više vremena, da je za neki drugi paket bilo potrebno manje vremena i na osnovu toga da zakliči kakvi su projevi koji se nalazi u tom izračunavanje. E sad to je prepoznato kao relativno ozbiljan napad i onda su predložene neke protiv mere. Prva protiv mera je bilo da recimo ako imamo tako situaciju da se neka poruka izbacuje šalje se preko interneta na drugu stranu, da bez obziram na to koliko je trajalo izračunavanje da se ta poruka izbac i u tačno određeni vremeneski intervalima. Na primer kažemo da znamo da nam je za poruke potrebno da se izračunaju između 0,3, 0,7 sekundi, a mi ćemo te poruk izbacivati recimo svake 1 sekunda. E sad to nije dobro, mislim to jeste dobro s jedne strane zato što se na ta i način potpuno brishe ta informacija o tome koliko je trajala eksponenciacija po modulu, ali sa drugi strane to je loše zato što se ime u sporala slanje poruka odnosno smanjuje se protiv, smanjuje se performance samog sistemu. Ono što je takođe bilo predloženo to je da se dodaju slučajne zakasnjenja, pa sad imamo te blokove koji izlaze kojima zakasnjenje variraj između 0,3, 0,7 sekundi, a onda neko uzme i na te vrednosti dodaje sad slučajno između 0,1, 0,2, 0,3, tako neke vrednosti, pokvario taj užit ako ono meko posmatra ove pakete i kako bi go ne mogućio da može da zaključi koliko je trajala izračunavanje eksponenciacije po modulu. Takođe ono što se zove blinding, to je ove treći modela, to je da se sama šifra pomnoži nekom slučajnom vrednošću, i to naravno tu slučajno vrednost moraju da imaju jedna i druga strana, kako bi se opet na taj način nekako zamagli, ilo šta je stvar na poruke koje se nalazi ispada. I taj blinding je nešto što, recimo, RSA labz ima u nekim svojim kriptografkim proizodima. Dakle, to je jedna interesanta vrsta napada na RSA algoritm koji je prepoznit kao napad koji to su tako zoni side channel napad, i tako nije napad direktu na sam algoritm, nego posrednim posmatranjem nečega što taj algoritm radi, znači pronažem nekom potpuno drugom kanala napadan algoritm se nekako implicitno pokušava da se zaključi koje su vrednosti tih parametara u okrpidu kriptogoskog algoritmu koje potrebno odkriti. Treba će vrsta napada i njuću preskočiti, to su napadi na hardware koji nisu pretravo interesanti, oni su više od nekog istraživačku, značaja da ti u nekoj pokazao da time što će da snizi napon na procesoru ili time što će da ubaci neke greške i da promeni određene bite prilikom rada procesora, da ćemo će da zaključi neki stvari, kako se dašavaju sa tamo algoritmu. Ovo nije interesantno zato što onaj koji ima pristup, računaru, ima mnogo, da kažem, inteligentni način je kako će doći za sami ključeva, na kajom što bi trebalo da uradi, to je nekako da uradi Dant memory, ili ono što bi mogalo da uradi, to je da pokuša da pronađe negde u memory, na disku i tako nešto da pronađe sami ključeva, dakle ovo vrsta napada nije pretravo interesantno. Većete mi ima jedna vrsta napada koja je meni jako interesantna, a to su tako zvoni chosen ciphertext napadi, odnosno napadi na izabranu šifru, koji koriste jednu interesantnu osobinu eres algoritma. A ta interesantna osobina gdje možete da vidite o ovde. Ona kaže sledaći, ako uzmem i dobijem dva šifruva na tekste, gleda ovo je šifruvanj tekst C1 i ovo ovde je šifruvanj tekst C2 i ta dva broja pomnožim. Ukranilini to su se brojevi. I ta dva broja pomnožim, ono što ću dobiti, je isto kao da sam šifroval pomnožen, osnovni tekst te dve poruke M1 i M2. Ovo ovde što vidite, to je tako zvana osobina homomorphnosti koja kaže sledaći, ja mogu da izvršim operaciju umnoženja nad šifrovanim podacima, koja je ekivolentna kao da sam izvršio operaciju umnoženja nad osnovnim podacima. E ta osobina homomorphnost je nešto što je danas predmjet istraživanja i nešto da danas ima, pojavljuju se, mnogje firme rade na tome i pojavljuju se biblioteki koje imaju različite primene homomorphne ikritsije, odostanekih algoritama homomorphne ikritsije, a zašto je ovo značajno? Ovo je značajno, recimo, kad je imate ono što je veliki problem danas, to je bilo poslovanje i drženje nekih privatnih podataka na cloudima. Tako i cloud pripada nekoj firmi i ta firma ako stavite podatki u osnovnom obliku, ona htela nehtela, te podatke ima na svojim diskovima, pa onda ona ako radi backup i će te podatki iskopirati na neke svoje druge diskove, dakle pikao vlastnih tih podataka, nemate više kontrolu na gvi. E ono što je zgodno kod homomorphne ikritsije, je to što te podatki možete da držete na cloudu u šifrovano mobiliku, a onda ne samo to, nego ako hoćete napraviti neku aplikaciju koja će raditi sa tim podacima, manipulacija na podacima može da se vrši tako što će se vršiti izrečunavanje direktno nad enkryptovanim podacim. Tako da taj vlastni cloud, ako ne posledo ključeva, prepostavit ćemo da ne posleduje, on će vam pružiti uslugu u koji ćete vi moćete da vršite operacije na njegovom cloudu, na njegovom racunaru, na dvašom podacima, a da pri tom niju jednom trenutku tih podacima neće preći u ostom i ovom. E upravo je to razlog zašta se jako mnogo radi na homomorphne ikritsiji, pojawili su poslnjih par godima start-up-ovi koji su dobili velika investiranja, koji već imaju neka rešenja u ovom pracu. E sad sam RSA algoritam nije pogodin za to, isp. dva razloga, jedan je što je spor, a drug je što je s algoritam parcijalno homomorphan, odnosno ovo osobina homomorphnosti upravo važi samo za ovo množenje. E sad, tu ćemo da napustimo homomorphne ikritsije, ovo je ovako više jedna mala ekskurzija, sam u tu temu da ako neka čuvete ovako nešto, da znate o čemu se radi i da srešete sa tim evrovatno, kad budete počili da raditi za to što se dosta uleže u to da se pojave proizvodi koji podržavaju homomorphno ikritsiju. E tako, ovo osobina homomorphnosti, odnosno ta činjenica da možete da pomnožete dve poruke, koje su šifrovanje i da naprijete equivalent šifrovanju pomnožene dve osobene poruke, je nešto što se koristi za tako zvanje i čouzan sa ifrtex napad. E sad, što radi čouzan sa ifrtex napad? Možemo da pretpostavimo da postoje neka tri entiteta, naprimer postoji entitet to su oni čuveni likovi iz knjigio zaštiti pojata, kad to su Alisa i Bob i neki napadač M, ači uzme taj Bob i pošadje Alisa i poruku koja je ovakva, koja je šifrovana. Naravno tu postoje neke pet postavke pod kojima ovaj napad može da radi, ja sad ćemo da vidimo šta je to. Bob pošadja li si šifrovnu poruku i ovde imamo nekod napadača M, koji bi voleo da vidi šta je ta poruka M, on ne zna šta je poruka M, i hoće nekako da dođi do nje. E sad, ono što ovaj M može da uvradi, pošto on zna javni deoključa, a javni deoključa se se stoi od to znate E i N, ta dva broja, znači on zna E i N, i ono što on može da vidi to je poruka C, koja je otišla od...
 Boba Kaliisi, znači on vidi ovu poruku C. Taj napadač kreira poruku X koja je ovakva. X puta 2 na E po modulu N. I pošred je to Alice. Znači on pošred je poruku X. A sad naravno Alice kada vidi taku poruku, pošto ta poruka nije nešto sto za nju ima smisla, znači kad ne dešifrujete nešto, neko poruku, gde je neko modifikova šifrovanj tekst, verovatno ćete dobiti prilikom procesu dešifruvanja neku glupost. Alice će dodobi je tu poruku i neće znaći šta je. E ono što će Alice tada da odgovor, i ona će da kaže, i to je taj preduslov koji bi trebalo da bude ispunjem, da bi ovakav napad mogu da funkcioniš. Znači ono što Alice kaže, šta je brevovo, ja nema pojma šta si mi poslala, i Alice pošred je poruku koja je dešifruva na poruku X. Odnosno poruka X koja je pomrožena sa X na D, znači to je ovo ovde poruka Y. E sad ono što, a šta je tada, šta je zapravo tada je šifrovanja poruka, to možete da vidite ovde. Znači ako sad ovu poruku X koja je C puta 2 na E, napišemo u razvijenom obliku, to je C po modulu 1 puta 2 na E po modulu 1, a ovo C to je M na E po modulu 1 puta 2 na E po modulu 1, onda zapravo ta poruka X nije ništa drugo, nego poruka M pomožena sa 2 pana E po modulu 1. Odnosno praktično to noženje poruke sa dvojkom, znači sa omošitovanjem, za jednom mesto u levo, prema tome ovo Y koji će vratiti Alice, znači to je poruka Y ona će biti jednaka 2 na M po modulu 1. E sad pošto ovaj znaš, taj u radio na koji način je modifikovo poruku X, da je on zapravo tima je uticao da to imaju kvalent poruci 2M po modulu 1, onda će ovaj ovde napadač M umeti da iz ovakvju poruki izvuče tu poruku M i da dođe do originaru. Ono što je potrebno tu da se nedasi, to je da Alice ako dobije pogrešnu poruku, ne kaže šta si mi ovo poslovo, vidi šta sam dobila, zato što je to taj preduslov da bi sam napad moglo da funkcioniše, ali u svakom slučaju, ovih napada i izabranu šifru je su bitni i ono što postoje i što je takođe razvijeno, to su neki mehanizmi kojima se originalna poruka nasumićno dopunjava prešifrovanja, kako bi se sprečilo da može da se izdoši ovakav napad, zato što napadač neći znati na koji način je poruka dopunjena. I tu postoje jedan protokol, mi ga nećemo raditi, ali prosto da znate da se are s algoritem najčešće neprimenju je onom najnajosnovni mobnik, zato što postoje različite vrste napada koje mogu da se primene da tako kažem na ovaj algorit. E dobro, to bi bili ti osnovni napadi na are s algoritem i to bi trebalo malo da provučite. Ono što ćemo samo još da ovde pokažemo do kraja ovog pedavanja, što je, što je problem? Ono što ste videli do sada, to je da postoje simetrične algoritmi i ja stavno pričam kako se dana skoristi algoritm, koji ima izdneću 128256 bita. Sa druge strane tu su asimetrični algoritmi, za koje sam ja rekao da se dana skoristi modul koji ima najmanje 2400 bita. Sad nekog mi mogu da kaže i ono što jeste zaista važno pitanje, to je kako je sigurnost i jednih uporvijednjem sa drugim. Deluje na prvi pogled da su ove algoritmi koji imaju 2400 bita mnogo sigurnije od onih koji imaju 128 bita. Međutim to nije baš tako, zato što napadi na ove algoritme koji su sa velikim ključevima nasimetrični algoritme, odustno pokretno na are s algoritem, su matematički napad. I tu postoje neki algoritmi, či je kompleksnost je iskazana ovako nekako sa ovim logaritvima, nećemo ulaziti u te detalje. I ovu ovdje što vidljite, ova formula, to je formula koja nekako pokušava da izračuna kompleksnost, da uporedi kompleksnost napada na, brute force napada na simetrični algoritm i najbržeg mogućeg napada na simetrični algoritm. Naravno, ne morate da znate kako su ljudi došli do ovoga, svodi se sve na kompleksnost izvršavanja određenih algoritama i na izvršavanja tih algoritama najnodernih algoritama za faktorizaciju brojeva. U svaku slučaju, ono što je dobijeno kada se primeni ta formula, to je nešto što je ovako. Nešto što kaže da recimo, ako koristite simetrični algoritm koji ima ključ či je veličina 100 bita, odnosno, prostor pretrag i ključeva je 12, onda bi trebalo da koristite veličinu RSA modula koje je 1926 bita. To znači da bi smo mogli da kažemo, madal nije sa simtačnom, da ako koristimo simetričnom ključu od 128 bita, da bi trebalo da koristimo veličinu modula, asimetričnu ključu koje je tu negde između 1026, 1575, madal malo bliže 41575, ja mislim kad bi se ovo izračno nekako ekstrakuliralo da se dobija da recimo 128 bita odgovora 3072 bita modula asimetričnu ključa. Što znači da ako koristimo simetrični algoritm koji ima 128 bita s jedne strane i koristimo z druge strane RSA algoritm koji ima 2488 bita modul, da je RSA algoritm koji ima 2488 bita modul slabiji, odmustno da je potrebno manje vremena da se on razbije, nego da se razbije simetričnu algoritm u 128 biti. Zašto je to važno? Pa to je važno zada što napadač neće nikada napadne, ono da je mene teže, on će uvek napasti, ono da je mene lakše. I ona koji ima da bira, a svaki kryptosistem se obovezno se stovio od simetričnom i od asimetričnom dela. Recimo kada vi pristupite Google-vom sajtu Gmailu, ono što se desi, to je da se u fazi handshaker, dakle u faziji uspostavljanje veze, pomoću asimetričnih algoritama se razmeni ključ. Tu se koristi modul velečini 2488 bita, a onda je nakon toga se kreirao ključ i tu se koristi neki IS. Između se zavisi, ne znam tačno šta Google koristi, to može i s to se vidi, ali u zvaku sluči koristi se neki IS algoritem. I sad kada bii neko tako posmatrao šta vi koristite, on bi gledao, aha, ovde koristi IS 256, ovde koristi RS 2488, pa bolje mi je da napadnjem RS 2488, zato što mi manje vremeno treba za to. Znači u principu dobro praksa je da nekako ti algoritmi budu izbalansirani, odnosno da težina napada na svaki u tih algoritima bude približno isto. Ovo takođe bi treba da vam kaže, recimo, da kod vidite neko, reko i da koristi recimo IS 256, a če ono što bi trebalo dočekujete, to je da si koristi sa ti IS 256 RS, samodul koji imač 14.000 db, a to je prilišno veliko i to dosna opterećuje servere. I zato danas nikode koristi tako velike module i to znači da su danas u praksiji, ono što sam ja videl, mnogo češće asimetričnih algoritmi i oni koji su slabije zaštićenji od simetričnih algoritama, odnosno manje vremena potrebno da se oni napadnujem, i ako bi neko hteva da napadne same algoritme, da je tu prava linija napada preko asimetričnog algoritma, kao algoritma koji je otrebno manje vremena da se razbijem. Dobro, to je ovako više jedna, da kažem dobra praksa, o kojoj bi trebalo da vodite računa sutra kad vas neko bude pitao kako da napravi neki sistem. Ti bi smo praktično završili ovu oblast RS-A, ovde u ovaj prezentaciju imate do kraja ono isti primer, koji je dat na predkodnim slajduvima, kada je objašnjeno kako funkcioniša RS-algoritam, u kome postoji brojeli PQ koji su 11-17, i brojen koji je 187, dakle to je urađeno napred. Jedina je razlika što ovde možete da isprotite ovaj algoritam za brzu izračunavanje ekspomenciacije po modulo kako funkcioniše, i ovde imate korak po korak na narjednim slajduvima objašnjeno, šta se dešava u svakom od ovih koraka sa ovim parametrimama B, I i C, i gde na kraju možete da dobijete kolika je vrednost tog rezultata, odnosno šifrovano teksta, a onda na kraju imate i u kontrasmeru, dakle dešifrovanje broje 132 na 23, pa opet taj 23 je ovde prikazan u binarno obliku, i ceo algoritam je prikazano kako funkcioniše, pa to možete da isprotite. Ja sam rekao, neće u tražitji od vas da znate ovaj algoritm napomet, ali možete da nekom bude to lakše, da pan ti nego da razmišla kako će dinći 132 na 23 i razmišljajući u onim kvadratima četetnim stepenima i 8 stepenima i tako dadje, tako dadje. Dakle, kad budete dobili zlatek iz RS-a, potpunom mi je sve jedno kako ćete ga resiti, samo je bitno da ga resite tačno. Dobro, to bi bilo to što se tiče RS algoritma, da ti oddajemo ništo, ovoj prezentacije je samo taj primjer urađen do kraja. Ja ću sada zaustaviti deljenje ove prezentacije i prečiću na deljenje naredne prezentacije. Naradne prezentacije je prezentacija koja se bavi upravljenim ključevima. E sad, mi smo videli kako rade asimetrične algoritmi i jedna od svari koje se dače,
 ja vam opomenu o nekih na početku te priče o asimetričnim algoritmima, je da se asimetrični algoritmi koriste između ostalog za upravljenje ključevi. Da bi smo razumeli kako sve to radi, a to je tema ove prezentacije, što znači upravljenje ključevi, kad se kaže upravljenje ključevi, me si se preje svega na ključeve za simetrični algoritm. Jer jedno stvari koji sam također rekao, to je da su simetrični algoritmi, da su performanse njihove u šifrovanju neke poruki mnogo bolje nego performanse asimetričnih algoritama, te se simetrični algoritmi uvek koriste kada je potrebno zaštititi veću količinu podatom. E sad ono što je problem koci simetričnih algoritama, to je kako stvoriti isti ključ na dve strane, da kako stvoriti da na jednom računara koji se nazi u Belgradeu i da na jednom računara koji se nalazi u nekde u San Josev, da ta dva računara imaju isti ključ, da ti ključevi budu transportovanje na neki bezgledan način. E, upravo je to tema ove prezentacije, dakle prezentacije koje se zove upravljenje ključevima i danas ćemo početi da se bavimo time i doći ćemo do nekada i nećemo stići da uradimo sve, to ćemo ostaviti za narodnu medelju, a sad prenego što dođemo na to kako se danas vrši upravljenje ključevima, ono što je interesantno i ono što je bitno, to je da vam malo pokažem kako je sve tizgledao pre nego što su pronadženi asimetrični algoritm. Dakle u vremenu pre1970 i neke godine, kada su se zvanično pojavili asimetrični algoritmi, sve što su ljudi znali su bili samo simetrični algoritm. I sad ako treba nekako da razmenimo ključeve za simetrični algoritme korišljen simetričnih algoritama, onda vam je jasno da tu nekako postoje o nej problem kokoške i jajet. Ače ako ja imam simetrični algoritm za koji treba da razmenim ključ, a na raspolaganju mi je neki drugi simetrični algoritm, pa ja sad kažem pa dobra, ali ja ću taj ključ, šifrovati ključem ovog drugog simetričnog algoritma, a onda se postavio pitanje, odakle mi ključ za ovaj drugi simetrični algoritm. Dakle to je bio priličan problem koji je dosta činio nesrećnim ljude, koji su se bavili kriptografijom i ja verujem duboko da se nije desila ta revolucija 70-ih godina da bi danas svet izgledao bitno drugačije pitanje, da li bi smo imali ovolik usluga koje funkcionišu preko interneti, da li bi smo ovo što je mogli toliko stvari da prevacimo, da se koriste i da se posluje preko interneta u toj mere. E sad u remenu prenego što su postojali asimetrični algoritmi, postojali su dve strategije kako može da se izdaši razmenu tajnog ključa. Jedna strategija je da se unapred podeli neki ključ ili da se koristi neka vrsta offline metode. Ka kažem offline metoda, mislim na to da recimo se nađemo mi ka fiću nekom, udoznam papiriće i da na papiriće napišemo lozinke i da onda to nosimo i upucam u računare. E sad složišete se da to može da funkcioniše takav način, da je u napred podeljeni ključ, može da funkcioniše u nekim relativno malim okruženima, mali broj aktera, gde se i ključevi ne menjaju previše često. Dakle, to je mehanizem koji nije previše fleksidivan. Zato što zamisti situaciju, a još jedna stvari koja mora da se radi, to je da se ključevi periodično menjaju. Ključevi se menjaju, mogu da se postoje dva mehanizma kako se ključevi menjaju. Jedan mehanizem je periodično, a drugi mehanizem je da se kaže da će se ključ promeniti recimo nakon prene tih 5 gigabajta podata ka tim ključe. Prostu da se nebi na podaču ostavilo dovoljno materijala da može da analizira šta je šifrovano tim ključe. I sad recimo ako mi imamo 5 gigabajta podata ka dnevno, to bi značilo da bi trebalo simetrične ključ menjati jednog dneva. I sad zamistite mi se nađemo u kafiću i ja vam opodelim te papiriće, a vi onda odete na druge krajeve sveta i mi se dopisujemo jedan dan i onda posliprvog dana mi imamo problem. Kako ćemo dalje razmeniti ključevi? Dakle, ta vrsta offline razmene nije zgodno. I li možete dozmiti drugi primer, a to je Gmail. Kako bi Gmail funkcijao niso da nema tog digitalnoj sertifikata samog servera, a to ćemo vidjeti kako radi kada dođe vreme, nego da postoje samo simetrične algoritmi. Onda bi verovatno taj Gmail morao da ima neku kancelariu u Belgrade, da je biste vi je otješli kao u banku, pa vam banka da, karticu i pin, da uzmete neki papirić na kome se nalaze taj simetrični ključ. Dakle, sama usluga ne bi bila vaš tako zgodna i flexibilna kao što je jeste danas, a drugo otvara se milion drugih problema kao to što, ako vi izgubite taj ključ, tako neku ukrade, taj ključ, kako ga menjate i tako dalje tako, dakle jedna vrako birokratska formalizacija. To je jedna vrsta razmene. Druga vrsta razmene je razmene u kojoj bi se napravio neki centar za distribuciju ključa, odnosno taj tako zanek key distribution center, to je ovo KDC što vam stoji na slide. To je druga strategija, da je sad postoji neko telo koje može da izvrši distribuciju tih ključeva. I to je isto na ešto što nije činilo srećnim ljude, dakle to može da radi i može da se napravio automatizacija celog procesa korišnjem key distribution centera. Već u ti mano što je problem sa key distribution centerom je što je sad to neko telo koje posleduje vaše ključeva. Ali ajde da ovaj nepričam više ovako abstract, imamo ovde nekoliko primera pa ćemo kroz te primere u potpunnosti objasniti šta su, šta su tačno problemi. Dakle ovde imate neke četri variante razmene ključeva koje su se koristila i koje su bila osmišljene u periodu pre nego što su nastali asimetrišne lguri. Znači prva varianta to je kada neka dva aktera A i B se nađu i nekim nemrežnim kanala, naprimer telefonom ovaj mu izdiktira ključa. I to smo rekli to može da funkcioniš u tako neki malim okruženima i nije pretrno feksibilno, ali može da radi. Druga varianta je da postoji sada neki tako slanje key distribution center. Kako bi ste mogli to da svatite šta je key distribution center? Rećimo možete prepostavite sljedeću situaciju da postoji firma i da ta firma, rećimo ova situacija u koje smo mi svi radi od kuće i ako hoćete da radite od kuće, treba da se nekom virtuo na privotnom režu, naprimer povežete sa vašeg laptopa do centralne lokacije vaše firme i firma hoći to da vam obezbedi. Naravno da biste pošto razmenjajte poverljive postavne podatki sa svom firmom, treba da zašljite te podatke, tako treba nekako ih šifrovati. I ono što firma može da uroditi, to je da vam podeli ključeve koji imaćete pristupiti tom key distribution centeru, a onda će key distribution center da vam omogući da imate ključeve za medžu sobnu komunikaciju svih zaposlednih. Vida ćemo kako te šem funkcionišu. E se do ta varianta broj 2 na on slideu, ona kaže da kad ECE daje ključeve nekim nemrežnjim kanalom, a to znači da biste vi morali da odvijete čak i u dobot pandemije do tamo neke kancelarije, da tamo dođete do neku vaše kolegje koji se bavite i madnitrativnim poslovima, da tražite od njega da vam odkucati sve te ključeve lozinke i da ih preoznate, što je opet neflexibimo vešenje. E sada onda su ljudi razmišljili pa dobra, ako već imam neki način komunikacija, hoću da se bude automatizovan i hoću da ne moraju ljudi da dolaze na to mesto, kako to može da se radi, e pa to može da se radi ovom variantom 3, a to je recimo da smo prvi ključ podelili offline i to se onda zove master ključ, a da onda taj master ključ koristimo za šifrovanje narednih, tako zvanih sesijskih ključeva. Pa onda to znači mi se dogovorimo ove taj ključ koji smo podelili, njim nećemo kryptovati sa ovrađe, nego ćemo tim ključem kryptovati naredne ključeve. Pa onda se dogovorimo svakog dana u ponoć, znači tačmo ćemo da pošaljemo pomoću tog master ključa šifrova novi sesijski ključ i tako ćemo svaki dan menjati ključeve. I to je metod koji može da funkcioniša, ali taj metod ima jedan fundamentalni problem, a taj fundamentalni problem je sljedeći, svi sesijski ključevi su šifrovani master ključ. I recimo ako sada taj A i B su se našli danas i sljedeći put planiraju da se nađu za dve godine, to znači da će naredne dve godine da se koristi isti master ključ za šifrovanje sesijski ključ. E to znači da neki napadač na tu komunikaciju bi mogalo da probat okom cele te dve godine, da radi brute force napad na master ključ i ako uspe da pronođe odgovarit ći master ključ, ne samo što je pronošao master ključ, nego ako je snimala su pretkodnu komunikaciju, on je onda mogalo da dođe do svih sesijskih ključeva u nazad i mogo je dođe do kompletne komunikacije s tih aktera u nazad, a naravno i u napred. I to je ono što je nezgodno, tako je nešto što znači da takav sistem nema obezbećenog nešto svoj pfs, odnosno perfect forward citrusi, a to je osobina da ključevi koji se koriste nisu izvedeni iz pretkodnih ključeva, zato što ako postoji ta vrsta veze od pretkodnu ključa ka narednom ključu, onda neko koju uspe da provali taj pretkodni ključ, on će uspeti da provali i naredni ključeva. I to je onda što čini da sistem u nazad može da bude u potpunosti rekonstruvisom kompletna komunikacija. E sa sličnotome, sa master ključevima, postoje še ima u ključima taj kidis i ukljušan centar, ima master ključeve sa svakim udučestnikom komunikaciji.
 A onda to ćemo vidjeti kako te šeme izgledaju, automatkim putem jednim distribuira sesiske ključeva. Dobro, sad je 2 minuta do pet, ja ću zavustaviti sad snima... Dakle, čuli smo na redkodnom času, šta su neke problemi koji su bili u vreme prenego što su postojeali, ja simetrično, gudite mi, sad ćemo vidjeti neke dobih šeme, kako funkcionišu. Tako je te probleme koji su izvizili stani ovde na ovom slajdu sam pomeno, i jednostvar samu sam propustio da kažemo, to je problem ako postoji ki distribušan centar, koji treba da podeli ključeve za n nekih učestnika komunikacije, naprimer n zaposlednijih u nekoj firmi i ako treba da se obezbedi da svako može se svakim da komunicira, onda će taj KDC morati da creira nešto što je s razmira sa n na kvadratki ključeva, što u nekim situacijama koji imate veliko multinacionalnu firmu, koja ima 10.000 zaposlednih, može da bude veliki broje, ali već je problem od tog broja ključeva, mislim smestiti milijon ključeva danas ili 10 milijona ili slob milijona ključeva, može bilo koji računar, da se smestiti to nije potrebno baš tako veliki prostor, takle mnogo veći broj, mnogo veći problem od samo broja ključeva i skalabilnosti sistema je, je to što taj KDC vidi sve te ključeva, to ćemo još malo videti šta je problem. I sad ćemo da vidimo neki od tih šema kako su izgledale, ovo prva šema koji vidite, to je šema u koji imamo dva učistnika u komunikaciji, koji su se dogovorili nekom offline metodom da podjelaj taj tako zvanim master ključ, kojem će kasnije biti šifrovani drugi ključevi. I sad ćemo da vidimo kak vi sledava šema i ovo je nešto našto vi trebala se naviknete, zato što će ovakva nekakva notacija kao što je vidite na ovom slajdu, da se koristi od sada po praktičnom dokraje ovog kursa, a ona opisuje kako te poruki izgledaju. I ono što je karakteristično, to je da nikada razminu nije jednostavna i vidite ćete danas neki dostat loženje šemu koji ima, recimo, ovde imate tri poruki koji se razmenjaju, vidite ćete šemu koji ima sedam poruka i svak od tih poruka ima neki smis, pa ćemo sada da prođemo kroz ovaj scenarii, da razumite šta se ovde dešala, a naravno i da vidimo što je mana ovakve šeme. Dakle, ovde predpostavljamo da su ovo dvojica A i B u nekom trenutku podelili master ključ i da je sad došao trenutek da oni počutni da komuniciraju sigurom način, odnosno da treba da naprave sesijski ključ KS. I sad, naravno, cela razmina ključeva počinja, tako što neko od njih dvojice inicira samu razmenu. Dakle, ovaj A uzme i pošalje ovaku poruku, u kojoj on pošalje dve stvari. Ovoj znak ovde će oznočavati konkatenaciju. To je prvi poruc i poslal dve informacije. Prva informacija IDA u kome ono ovome B kaže ja sam Pi A, neki njegu identifikator, na osnovu kok će ovaj B znati s kim razgovara. A druga stvara je ovo ovdje vrednost N. To je sa ovim N ćemo vrlo često oznočavati neke slučajne vrednosti. Te slučajne vrednosti si često zovu ili session tokeni, ili se zovu tako zva, to su nonsevi, tako zvani, vidite ćete na jednom najdvim slajdu, opiša se nonce na engleskom, a to je skraćinice od number used only once. Uloga ovih nonseva je najčešće da praktišo oznočavaju tu sesiju, da bi se spreće neke vrste napada kao što su replay napadi. Šta su replay napadi, vidite ćemo danes za nekoliko slajdova, tako da za sad neka to ostane malo nepoznite. I zvokom slučaju ove prve poruci, A kaže ovome B, ja sam taj i taj, i ovo je naša sesija zvana N1. Šta sad radi B? B je dobio poruku, prepoznal identifikator od A i kaže, aha ja sa ovim A imam uspostavljen master ključ, i ja ću se ovo da tim master ključem, kriptovati ključ sesije kojim ćemo da šifrujemo dalje našu komunikaciju, vrati ćemo ovo IDA da on zna da sam ga prepoznao, poslaćemo moj identitet da on zna ko sam ja, poslaćemo neku funkciju od N1, to kad se kaže neka funkciju od N1, može ovo bude neka trivijana operacija na primer da pošal je N1 plus 1, i to ću islo pro komentari se tima jednog kastnog ševa zašto se takve stvari vade i poslaći ove drugi slučaj broj. U lovo ove slučajnih brojva je kada što je učili recimo u rečunoskim režama handshake kod TCP, a dakle u toj faziji uspostavljanja, razmenjaju se neki brojvi koji zapravo prestali identifikatore te sesije i ovi brojvi N1 i N2 su identifikatori ove sesije, a vidite ćemo, kažemo, glasniće, malo koji kastnije, zašto oni postoje pa će i to da vam bude jasno. Suštinski ono što ovom je a, treba, to je sam sesijski ključ, to je ključna informacija koja njemu treba da bio mogao da šifruje podatke, međutim prenego što zaista počnila da šifruje podatke, on će vratiti ovu poruku 3, kojem će, u kojoj će, sesijskim ključem, šifruva ti funkciju o N2. Ova treća poruka je potvrda da je na isprava način, znači, ono ovom trećem poruku nekoliko stvari potvrđuje. Prvo, ako je izveo FDM2 i ako je dobio sesijski ključ, to znači da je a baš taj koji posledu je ovaj master ključ, a to je ono što bio čekuje. Dakle, slanja ove poruke 3 zapravo znači da je upravo a, koji je iniciralo komunikaciju, dobio sesijski ključ i da je taj sesijski ključ dešifroval master ključem koji su a i b razmenili u napredu. I takođe, ne samo to, nego a se ponoša logično, ponoša su usladu sa nekim u napredu ogovorišanim protokolom i on je ovdje vrednost N2 koji sam u ja poslalo modifikovo, odgovači način i šifruvo je ključem koji je s što ovaj b može da proveri. I ovo je jedna varijanta razmene u kojeće, dakle, kada godi imaju potrebu da komuniciraju a i b, pomoće ove 3 poruke, naravno, nakon toga, ide razmena podataka između a i b u kojima imate sesijski ključem, šifrovane neke podatke koji se razmenuju. Ali to je izvan ovog, ovej šemi nam je fokus samo na razmeni ključe. I ovo je jedna od varijanti te razmene. Kažem, nekako, za sad ostanu, ne poznati ovi nonzbrojevi što je njihovo tačno uloga i to će on odkrypiti za koji slide. E sad, ovo je varijanta u kojoj imamo dva učestnika u komunikaciji. Ako imamo više učestnika u komunikaciji, odnosno, ako imamo taj tako zvaniji ki distribušan centar, onda ova šema može da bude ovakva i može da bude malost loženija, ali videte šta i ta šema nije pretreno komplikovan, zato što jasna je ideja, videte šta je, kako ovde funkcioniš. Ajde sad samo da uvedemo neke pretpostavke, odnosno što je to što ovi učestnici u komunikaciji znaju i što je preduslov da bi smo došli do ove razmene koje se vidi na ovo slide. Ači preduslov da bi se došli do ove razmene koji smo videli na ovo slide, to je da ove KDC ima niz master ključeva, to su ključevi K, A, KB, KC i tako dalje, i tako dalje. Znači za svakog od ovojih učestnika koji su registrovani na tom kid distribušenu centru, on ima po jedan ključ, a naravno, ti ključevi, taj ključ K, A i ključ KB i ključ KC se nalaze koji samih entiteta A, B i C, i to su simetrečni ključevi koji su unapred na neki način podeljeni, može da bude nekom offlane metodo, može da bude tako što su A i B došli tamo ko se registrovali koja dobili na papiriću, u svakom slučaju to je preduslov da ova šema može da funkcioniš, da ti ključevi prosto je unapred podelje. A ja sad kada je to tako, ti ključevi koji postoju KDC centru, to su ove ove ključevi, to su master ključevi pomoću koje oveh će se ostvariti sada razmina ključeva koje potrebna da bi mogli recimo da komuniciraju među sobno A i B. Znači cilj ove ove ove razmine je da se stvori sesijski ključ između A i B da bi A i B mogli direkno da komuniciraju. I avo kako ona izgleda. Znači prva poruka je ovoj A se setio da bih tjela da pošelja neku poruku prema B. I on formira poruku koji kaže ja sam A, koji ću da pričam sa B i ovo je moj identifikator sesiji N1. I tu poruku pošelja prema Kidysriblišnj centru. Kidysriblišnj centru pogleda ove identitete i kaže A, OK, i A i B su moje korisnici. Ja sa A imam uspostavljen ključ K, A sa B imam uspostavljen ključ KD. I onda ovoj KDC je uspostavi sledeću poruku koja je sastavljena iz dva dela. Prvi del poruke je ovaj ovdje gore, a drugi del poruke je ovaj ovdje dole. U prvom delu poruke, prvi del poruke se šifruje ključem Ka. Znači to je del poruke koji mogu da otvore samo KDC i A. I dakle tim ključem Ka je šifrovan sesijski ključ. I šifrovan je su identiteti o njih koji treba da učestili u toj komunikaciji. I šifrovan je ova vrednost E1 koja predstavlja oznaku te sesije. To je prvi del poruke. Drugi del poruke je šifrovan ključem Ka B i u njemu se nalazi takođe ovoj sesijski ključ i identite tonoga koja iniciralo ovu komunikaciju. Ovej drugi del poruke, obratite pažne se poruka 2 šadje prema A, znači njih će dobiti A. Drugi del poruke A ne može da pročita.
 a ne može da ga pročite zado što a ne poseduje ključ kb. Šta radi a sa tom korukom? A, naravno otvori prvi del po ruke, dešifruje, otvori i snimi sesistijki ključ i to je trenutka kada a ima sesistijki ključ. A, ovaj drugi del po ruke, dakle obratite pažnjenu to, ovaj ovdje drugi del po ruke u potkornu neizmenjenom obliku se prosleđuje prema ovome b. Zašto se prosleđuje prema b? Pa prosleđuje se prema b, zato što je to poruke u koji prvo a ne može da pročita, a drugu, u toj poruci je dovojšna informacija da b može sada da odredi svoj del postav. Či šifrovano ključem kb, koji može b da dešifruje, tu se nalazi sesistijski ključ i nalaziš informacija s kim treba da se priča pomoći u tog sesistijsku ključ. Ako je sve u redu, ako je u redu ključ kb, b će dešifrujati ovu poruku i onda će u ove poslednje dve poruke, znači u poruci 4b će vratiti prema a poruku u preklipceva na ključem sesistijskim ključem, u kome se nalazi neka slučajna vrednost, a onda u poruci 5a, tako će tim sesistijskim ključem, draće nešto što je funkcija od n2. Praklično ove poruke 4 i 5 služi za potvrdu da i a i b znaju koji je ključ Ks i da umaju da dešifruju na dekvate način podatki i da ih modifikuju i da ih vrate u šifrovani oblik i da to sve razumiju jedan i drug. Zašto u poruci 5, zašto poruka 5 ne bi mogla da izgleda ovako, recimo e od Ks pa n2, znači da ne posloju funkcija od n2, ta poruka ne bi smela da bude takva, zato što je ta poruka identična kao poruka 4, i onda bi mogao, dakle ako bi se vratila ovako poruke to poruka 5, to bi bilo zapravo replay iste poruke, znači to bi bilo slanje iste poruke nazad, to bi mogu da uradi bilo ko, čak i ona i ko ne posleduje ključ Ks, dakle to ne bi bilo nikakva potvrdda da se bilo šta koristno besilo, je uprovo zbog toga, znači ono što a mora da uradi da bi dokaze o da posleduje ključ Ks, on mora da dešifruje poruku da otvori n2, da napravi neku manipulaciju sa n2, ta manipulacija može da bude na primjer, funkcija koja je prosta na primjer kao n2 plus 1 da uradi, ali opet mora da bude nešto smislano, i da to šifruje i da vrati prema b. Evo je jedna standardna šema, da je se koriste isključivo simetrični ključevi, znači svi ključevi koji su ove šemi simetrični ključevi, ako je služi za to da se razmene, da se razmene sessiski ključevi. Znači ono što će se destina kraje ove razmene, znači ono će ove a i b imati ključ kaes i kaes, i oni će međusobno moći da razmenjuje poruke i da njihovi podaci budu šifrovani ključem kaes, znači neki podaci će biti šifrovani pomoć ovo ključa kaes. Šta je ono što nije dobro ove šemi, ono što nije dobro ove šemi, je što taj ključ kaes ne posleduju samo a i b, zašto zato što taj ključ kaes je generisa ove i kdc i taj kdc je mogao i da ga snimi i u krajini nimi u nekom trgnutku je prošao kroz kdc. Zašto ovo nije dobro, pa dobro, prvo nije dobro, zato što a i b moraju da veruju u tom kdc odat neće zlokotrebiti to posledovanje ključa kaes i da neće zlokotrebiti njihova privatna komunikaciju. Druga stvar koja je tu nezgodna to je činjenica, recimo da sada ako dođe da nekog spora između a i b kaže a mi je poslo tako i tako poruku i ta poruka je bila šifrovana ključem kaes, a uvek ima mogućen s da urodi poridzanju toga i da kaže ne ja to nisam u radio, to je možda u radio kdc, jer ja nisam jedini koji posledujem taj ključ. Prema tome kao što vidite te čak i sa ovim šemama koje su onako malo sofisticirani i koje o mogućavaju automatizaciju razmene ključeva pomoću isključivo simetričnih algoritama i dalje ostaju oni problemi koje smo chvomenuli za simetričnih algoritmima, to je problem poridzanja i to je problem toga da još neko zapravo ima taj ključ. Dobro, slično šema ovoj, odnosno varijanta te šeme je ovo ove, nećemo ulaziti previšo detalje, ona se se stoi, znači razdika je u sledaćem. Prva poruka ostaje ista, to je ovo ovde poruku u kojoj je host koji inicira komunikaciju se obroče KDC-o i kaže, ja hoću da razgola na se neki drugim hostom. Esen za razlik od predhodne šeme u kojoj u ovoj narodnoj poruti KDC odgovara tom hostu pa host taj prosledžuje ovo poruku. Ovde imamo varijantu da poruku 3, odnosno, ovo poruku koje se stvoje iz dva dela da tu poruku del koji pripada prvom hostu pošadje se prvom hostu, a del koji pripada drugom hostu pošadje direktno KDC drugom hostu. Tako da to je jedan detalj da se napraviš tema koja je malo ekonomičnija. I sad sam ja vama toliko napljua o šeme koje je korista i sklučio osimetrične algoritme kao o šeme koje imaju niz problema i sad imam isto, sad ću preći narodno na asimetrično razmenu ključeva, već u tim videćete u drugom segmentu kursa ćemo se babiti Kerberosom, to je sistem za autentikaciju kod windowsa koje se i dan danas koristi, a to je šeme koja koristi i sklučio osimetričnu algoritmu. Tako da i da je s ostale neke takve šeme, ali otom potom kada dođemo do Kerberos i onda ćemo se pozabaviti, timi videte kako on funkcioniš. Elem, onda je došla sredina 70. godina, pojavili su se asimetrične algoritmi i onda je počero da se razmišljio tome kako oni mogu da si skoriste za razmenu ključeva i tu se pojavila prva ova šema, to je najtrivialnija moguća šema koji je ostmispio Ralph Merkle, taj američki naučnik koji je praklično prvi i predložio asimetričnu kljupografiju, ali nije imao sreći da mi taj rad bude objevljen početkom 70. godina. Kako izgleda njegova šema? Njegova šema je potpunu trivielna, znači ovo je ovdje a, dođe i posljelje poruku u koje posljelje ove dve stvari. On kaže, ja sam a, a ovo je moj javni ključ, p u a, i to dođe do b. Kada b vidi taku poruku, on kaže, a, to je a, koji poče da razgovorat sa mnom i poslavam mi svoj javni ključ, ja ću uzeti i njegovim javnim ključem i ću šifrova ti sesijski ključ. Ajde samo da se poceti imamo malo, ovaj posledni put, koj da si metričnih algoritama, ako se poruka šifru je privatnim ključem, onda je njoj njoj njoj ne je obezbeđeno tajno, zato što ono što je šifrova na privatnim ključe, će videti svi oni koji vide javni ključ. Među, da ti druge strana ako je poruka šifrova na javnim ključem, nju možete pročita zato, dakle, ovo ovde je iz te perspektive potpunno ispravna šema, a je poslao svoji javni ključ i svoj identitet i rekao ja sam a, evo ti moj javni ključ, b je rekao u redu ja ti šaljem kryptovan sesijski ključ, svojim javnim ključem ovaj a će desifraviti poruku, dobit će sesijski ključ, i a i b će imati sesijski ključ. I ova šema delu je da je odlična, znači u dve poruke smo resili problem, tamo smo imali niz nekih poruka i delova, međutim, ovako šema nažalost nije baš savršena i to je ono što padi sreću s imanama koji inženjerima, a vama koji stvarniti ma zato što će se kasne i pojaviti i vidićete neke šema koje su dosta služenije, koje moraju da resi neke probleme. A šta je problem uvešeniji? Pa ostavni problem uvešeniji je ovdje poruka, apah, zvinjom se, je ovdje poruka u kome se nalazi identificator od a i javni ključ o da. A te poruke, naravno, moraju da se pošalju u osnovnom obliku ako bi smo ih šifrovali nečim, postavlja se pitanje čime smo mi to onda šifrovali odaklenan taj ključ i tako da, i tako da. I ovako slučujem mora da postoji neki trenuta kad ne se nešto šalju u otvorenom obliku. I sada vi to uzmete i pošaljete u otvore na obliku nekom paketu, a ono što ako ne znate, da je to intuytivno možete da osvacite, svaki taj paket je niz neki bita i neko može da uzme i da promeni njegov sadržaj i da će pošalje daj. A to znači da neko može da promeni ili identificator ili da može da promeni ključ. Ak je prosto te poruke nisu nina koji znači zaštićene i podložne su tome da ih neko promeni. A gali ovaj B može da detektuje da je došlo do promeni tako poruke, pa ne može. Vide ćemo u drugom segmentu kurse koji su mehanizmi koji ima može da se detektuje promena poruk i kako se poruke štite od promena. U svakom stučaju, ova poruka ovako kako je napisana, ona ne može da se detektuje da je neko menja. E, pošto je to tako, oslaćemo da vidimo primjer nečegro što se zove men in the middle mapad koji je posledica upravo te loše provere identiteta odnosno tko što ovaj mehanizem ovakav kakav je ne obezbeđuje adekvatnu povezanost između identiteta i javno pjuč. Na sljedečem slajdu je primjer tog meni the middle mapada i u okviru menim the middle mapada imamo dva legiti na učestniku komunikaciji, to su Alisa i to je Bob. A tu je i ovaj treći učestnik, to je taj čovek u sredini koji ima mogućnost da presretne poruke koje putuju između ovo dvoje. Znači ovaj može da bude neko ko, vi recimo, znači ovaj može da bude neko ko, vi recimo, vi recimo, vi recimo, vi recimo, vi recimo, vi recimo, vi recimo, vi recimo, vi recimo, vi recimo, vi recimo, vi recimo, vi recimo, vi recimo, vi recimo, vi recimo, vi recimo, vi recimo, vi recimo, vi recimo, vi recimo, vi recimo, vi recimo, vi recimo, vi recimo,
 povezano nekim režnih uređaj i može da preusmeri koruke da prolaze kroz njegov racunar. I sada što se dešava? Alisa šalje on koruku kako je ova trivljelna mertla vašema rekla. Znači šalje se identificator od A Alise i šalje svoj javni kljuž. I naravno očekuje da ta poruka stigne do Boba i ono što očekuje da je Bob vrati, to je ova ovde dole poruka da je će sesijski kljuž biti kryptovan njenim javni kljuž. E sada ovaj ovde dart u sredini on preuzme ovu poruku i modifikuje je i to je modifikuje na taj način da pošalje isti identificator od A, ali da kažu da u sta identificator od A pošalje svoj javni kljuž. Znači ovde imate puD ako vidite. Znači ono što je ono u radi, on je ovaj puA iz prve poruke zamenio sa puD, a ajde da budemo skroz jastni, puA ima Alisa a puD ima ovaj dart. E sada Bob dobija identificator od A i on zaključuje u ovih poruci, pošto je poruka takva kakve, on zaključuje da je ovaj ključ koji je dobio da je to javni ključ od A i ako to nije javni ključ od A. Pošto je dobio poruku koja lici na nešto što ima smisla, a to je poruka koja se stoji od javno ključa i identificatora, a uzima tu poruku, šifru je sesijski ključ javnim ključem koji je dobio, a to je javni ključ ovog napadača, i šaljega. Napadaš, presreće tu poruku, pošto on ima privatni ključ od D, on D šifru je tu poruku, on snima sesijski ključ KS ko CB, a onda pravi novu poruku u kojoj pomoću javnu ključa od A koje je dobio u prvom i poruci, šifru je taj isti sesijski ključ. I sada kada posmatramo iz perspektive alise, sve je uredno. Ona je poslala poruku u koje se nalazi javni ključ od A i identite od A, ona je dobila na kraju poruku koja je šifrova na javni ključemo da i dobila je sesijski ključ. Z druge strane, ovaj ovde Bob dobio je neku poruku sa identitetom A, poslala je poruku koja je šifrova o ključem koje je dobio u te poruke njemu sve deluje norman. Bob je zabeležio ključ KS, alise je zabeležila ključ KS, ali ono što je problem to je što je i ovaj ovde u sredini zabeležio to je ključ KS. I sada ne samo što iz perspektive razmene ključeva sve deluje normalno za alisu i za Boba, nego i oni sada, recimo, hoće da komuniciraju. I alisa recimo da je aplikacija koja oni koriste Skype. Znači razmenili su ključ kako bi šifrovali svoju Skype komunikaciju ili neku video komunikacija. I svaki paket u okviru te komunikacije se šifruje o inklučenom KS. I sada alise uzme u ključe aplikaciju, pošadite pakete koje su šifrovani sa KS i alisa je sigurna da su svi njeni paketi kriptovanih ključem KS. Ti takvi kriptovanih paketi ključem KS dolaze do Boba. Bobi gde šifruje i Bob vidi alisu i čuje alisu i zna da svi paketik koji su došli do njega su šifrovani ključem KS. Znači alisa zna da šifroje svoju komunikaciju, Bob zna da šifroje svoju komunikaciju i potpunos obaj sigurni da to rade istim ključem KS. I misli da su sigurni. Međutim kao što ste mogli da vidite, opirove razmine se umeša ovoj dart i on posleduje ta isti ključ KS. To znači da svi paketi, odnosno svojkom unikacija izm. alisa i Boba koje šifrova na ključem KS, može da bude kompromitovano strane ovog čoveka u sredini odnosno ovog data zato što i on posleduje ključ KS. E to je problem. Očigledno da je problem. Zato što ta sigurnost u koju veruju alise i Bobi samo prividna i oni ne mogu, zapravo je njihova sva komunikacija kompromitua. E ono što je problem ovde i zašto u stvari dolazi do ovog ovde problema, ključno stvari je sledaća. A to je da ova ovde veza između nekog javnu ključa, znači između javnu ključa i nečih identiteta nije nekako čvršće napravljen. Dakle svako može da zamene ili identitet ili javni ključ i da modifikuje ovu poruku bez mogućnosti da se ta vrsta promene detektu. Znači ono što mora da postoji da bi ovakve šeime funkcionisale, mora da postoji neka vrsta povezanosti između javnu ključa i identiteta neke osobe koja mora da bude potpunosti nedvosmislena. E sad ćemo da vidimo kako se to radi i prakli ćemo se time baviti do kraja ovog časa predavanja i to su ovo dosta bitne stvari zato što sad ćemo na pa i način dotaći malo i temu digitalnu identiteta koja je jedno od jaku bitnih tema i jedno stvari o koje se jako mnogo govori, neko se jako mnogo radi, da bi ošte bilo kakve servisi na internetu mogli da funkcionišu. Znači, pitanje digitalnu identiteta je daleko od trivijalnu. Previm što pređemo na te šeme kako utvrditi, povezati odrećen javnu ključ sa nečim identitetom da se pozabavimo samo još jednom vrstom napada zato što sam pominjao te nonse i zašto se nam oni bitni a ta vrsta napada su tita pozvaniji replay napadi, odnosno napadi ponavljanja. Kako funkcioniš napad ponavljanja možete viditi ovde sa leve strane. Znači u ovom ovde primjeru napad ponavljanja se najče koristi u onim situacijama kada se proverava neći identitet. Prover identiteta, to vam je najlakše da znate to, kada se povezavite na studenski servise, kada se povezavite na Gmail, znate za svaki taj servis, neko traži proveru vašeg identiteta tako što traži proveru user name i password. Prima tome ovaj ovde B je taj server na koji se ti povezavete koji vas suštinski pita KOSITY. Znači on vas ne pita baš KOSITY nego ono ostavi polja u koje ćete uneti user name i password ali suština postavljanja tih polja je da vas pita KOSITY. I onda vi unesete ta polja vaši user name i password. I sad naravno danas je ako govorimo o webu komunikaciji u gotovo 100% slučeva ta vrsta komunikacija je šifrovan. Znači sadržaj samih poruka, sadržaj ovde poruke ne može da se vidi. Odnosno kada upišete user name i password, kada putuju po mreži, ovo će biti na neki način šifrovan. Znači biće zamagljeno tako da ne može da se vidi vaši user name i password. Vide ćemo konkretno u oklirog predmenta kako se to dešalo. Međutim, neko može da kaže sledeći, čekaj čekaj, kada je ovaj A, se povezivao na neki server. Ja sam posmatrao njegu u komunikaciju i sad prvo su poslata bila dva paketa od strane BKA. To je bilo ta stranica, web stranica koja se učitala. Nakon toga je ovaj A odgovorio jednim paketu. Ajde da ja da snimim ovaj paket. Ja pojma nemoš što se ovde nalazi, ali ajde ja da snimim taj paket. I onda ja, kao napada čem, odlazim na tu web stranicu, posmatram komunikaciju. Ja opet u dva paketa dobijem sadržite stranice. U njenu mene pit, tako sam ja. I sad da ja umesto da ukucam user name i password, ja uzimam i ponavljam ovu poruku i šaljam je kb. E, u koliko to prođe i u koliko ja na taj način uspjem da dobijem pristup servisu B i da se na taj način predstavim kao A, onda sam ja uspešno izvršio napad za ponavljenje. Zašto zadošno sam ponovio poruku kojem je A ostvario neku pogodnu za sebe, odnosno uspevo je da uđe u servis B. Znači to je napad za ponavljenje. E sad, kako se sprečavaju ti napade za ponavljenje? Napade za ponavljenje se sprečavaju, tako što se ubacuju ti tako zvanim session token, odnosno svaka sesija ima neki svoj identifikator. I onda u okuru ima neki token, ima neki kuki i ima nešto, ovaj u svakom stuču svaka sesija mora da ima različit broji i brojevi najbolje je da budu potpunost luka. I recimo, što se sad udešalo kada A dođe na tu stranicu, on će dobiti stranicu u koje će biti KOS-i tih i ta stranica će imati ovakav neki broj, pridruženo sebe. E sada će A odgovoriti, ja sam taj i taj, ali će u tom odgovoru biti i taj broj. I sada ako bi neku uze, opet naravno, on ne vidi sadrža ove poruke, kao i malo prešifrovana, ali znao da je u nekom paketu A poslalo poruku KKB i dobio pristup servisu. Ako bi neko snimio tu poruku, onda bi, on morao da, i ako bih tev da je ponovit, znači, obi morao da napravio i otvori novu sesiju, međutno ta sesija bi imala drugi broj. I ako bih tev da ponovit, taj isti paket, ovaj broj ne bi odgovarao onom broju iz predhodne sesije. E to je jedan od razloga zašto se uvode ti slučenih brojevi, znači koji se zove u sešnjom tokeni ili nonsovi, number used only once, kako bi svaka sesija bila jedinstavno identifikovanja i kako bih se sprečili napadi sa ponavljenjem. I to ćemo vidjeti u masi sad nekih razmena i nekih šema koje ćemo učiti na ovom i na narednim časovima, da će se pojavljivati ti slučenih brojevi, a to je između ostalo z razlog zašto pospoje slučenih brojevi i u ovim predhodnim razmenama koje sam vam pokazal. Ovde sad imamo jednu variantu koja predstavlja mehanizam za razmenu tajnih ključeva, koje se obezbeđuje i tajnost i autentikacija, ali obratite
 Pažnju da i ova šema podrazumeva da su sigurno razmenjeni javni ključevi. Odnosno, ova ovde šema koja ima četri poruke važi i valja, samo pod uslovom da ovo je ovde B ima uređenu dvojku pua i id a. Nešto mi ne piše dobro. Dakle, pred uslov da bi ovo funkcionisalo je da ovaj B tačno zna koji ključ odgovora inicijatoru a. Ako je to tako i naravno da a ima to i isto samo sa drugi stvara. E sad ako je to tako, evo sačem vidimo kako ova šema funkcioniske, znači prvo što će a da uradi, on će iskoristiti javni ključ od B koji poseduje i napravit će poruku u kojoj kaže ja sam a i a šaljem ovaj slučaj broj koji je identifikator naše sensije. B će svojim privatnim ključem deshifravati ovu poruku otvoriće n1 i otvoriće id a. Pošto zna z kim razgovora i ima ovaj ovde par id a i pua, onda će on javnim ključem a šifravati poruku koji će da stavio ovaj n1 koji treba ovo me a da služi kao potvrda da je pitanju del i ste razmene i dodat će svoji slučaj broj, a onda tako poruka će doći do a, a će deshifravati svojim privatnim ključem, da bi dokaza ovo me B da je sve uredu, on će javnim ključem od B šifravati poruku n2 zato što praktično, ovo je nonset n2, zato što praktično jedini on mogao da ga pročita zato što jedini on ima privatni ključ o da. I pomoći ovog handshake u prve 3 poruke je zapravo sloni proverili jedan identitet jedan drug. A onda četvrta poruka, opiru četvrte poruke a koji inicira komunikaciju će javnim ključem od B šifravati poruku u koji je privatnim ključem od A šifrovan cesijski ključ. Šta će B mogi da uroditi? Naravno, on će deshifravati poruku svojim privatnim ključem pa onda javnim ključem od A, on će biti siguran da je ovo poruka kao je da je nju generisa obaš A, zato što je šifrova na privatnim ključem o da, odnosno on je deshifrova o javnim ključem o da i biti će siguran da je ta poruka bezbedno stigla zato što je šifrova na njegovim javnim ključem koji samo on može da pročita privatnim ključem. Dakle, ovo je jedna složenija razmena ključevo koje se detaljno vodi račun o tome da se proveri identite da A i B detaljno proveri identitet jedan drug, ali ova šema i dalje pruža sigurnost isključivo ako A i B pre toga, pre same razmene, imaju ustanovljenove parove javnih ključeva i identiteta i to je problem koji u ovoj šemi kakve nije reši. Znači to ćemo sad vidjeti u nadnih par slide-ova kako može da se reši. Znači jedan od bičnih problema koji postoji kod javnih ključeva to je kada dobijete neki javnih ključ, a javnih ključ je prosto file, nijegih slova i brojeva, nešto što niliči, nije prirodnih jeziknih, nije zbita. Znači, ono što je bitno da možete da ustanovite čiji je to javnih ključ i kako da to povežete sa njegovim identitetom to je ključni problem kod bilo kakve razmene i bilo kakve korišće na asi metričnih algoritama. Tu postoji nekoliko strategija kako to može da se uredi i mi ćemo danas samo načeti ove prve 3 variante a onda ćemo ostaviti ovo ostalo za narodno predavanje. Znači, jedna varianta je javno objevljivanje. Što bi bilo javno objevljenje? Prvo javno objevljenje jeste nešto što se koristio ali se koristio u nekim specificnim situacijama. Recimo, javno objevljivanje bi bilo da ja sad uzmem i da tamo na site etf, da je se nalazi informacija o meni na katedrize RTI, da na to mestu ja kažemo ovima u uračskom centru evo vam stavite link na ovo i kada vi kliknite na taj link, vi preuzmete moji javnih eresaključ. I to deluje onaku kao solidno resenje, zato što možete da predpostavite da ne može baš bilo ko, da je omogući da se stavi nešto na site etf, da to mora da bude neko koja je autorizovan strana etf i možete u prviče meri da verujete tomu. Mi ću ti takođe bi trebalo da znate da se web site-u bi relativno lako hakuju i da se dosta hakuju i da neko može da hakuje web site i da neko može da promeni taj ključ. I da neko može da izmješamo ključ, da može moje ključ da stavi na mesto da je kolega žarko i da obrgne te ključeve, da napravi čitav cirkust. Prema tome, javno objavljivanje jeste jedno resenje, ali javno objavljivanje je problematijno, zato što to mesto gde se nešto javno objavljuje, ako je to mesto na internetu je podložno napadimo. I prosto nije nešto što pruža veliki nivosiburnost. U nekim situacijemu to može da bude ok. Možete bude ok, recimo da vam ja kažem, e, sta ću da vam pošelje mail u kome moja javniki u, či vi dobijete mail u roko 3 minuta i možete da budete prilično sigurni da sam vam ja taj mail postovo. Ali opet u nekim situacijama, ako je pitanje u neka, jako vi se tnivo bezvednost, ako su pitanje ogromne pare, koje treba da stoje za toga, onda ovo je to ne bi bio adekvata način. Drugi način je da postoji neki javno dostępan direktorijum, odnosno adresar, recimo, može da bude neki ludab direktorijum ili može da bude aktivni direktorijum, u kome bi bili, recimo, u neku firmi izlistani svi zaposleni, pa njihova imena, neke generalije, adrese i tako dalje i da onda jedno od polja u opiru tog direktorijama bude javnitljuč. I da onda postoje neki standardni protokol i tako može da si pristupiti tim direktorijomima i da, ovaj neko može da pristupiti tom direktorijom, i da preozmima, i da kaže, aha, za osobu koja se zove Pavle Buletić, ovo je javniki ušt. Opet, ono što je problematićno, to je činjenica da i takav direktoriju može da se napadne, da može da se hakuje i praktično nije mnogo različito iz perspektive bezbednosti u odnosno na ovo prethodno, dakle, spuku javno objavljivanje, jedino što je to, taj direktoriju mi može da nešto, što neko održava malo profesionalnije i može malo više da vodi račun na osiburnisti. Dakle, i to nije baš ide vam reše. E onda su rodi, ljudi razmišlili šta da urade, i onda su došli do zaključka da kada se vrši provera nećeg identiteta, čak i kada se to radi u realnom svetu, nikada u toj proveri identiteta ne učistuje samo dve osobe, ona koja daje svoj identitet i ona koja ga proverala. Uvek postoji implicitno učešće trećeg identiteta. Da bih vam to ilustrovalo, vam drlo prost primer, a taj prost primer je, recimo, kad odeti u banku, imate tamo račun i hoćete da skinete neke pare. Da biste to uradili, nosite karticu na koje se nalazi broji vašeg računa, ime i prezime i ono što će vam tamo tražiti, traži će vam liću kartu. Kada vam proverava identitet, pogledaće ime i prezime, treba odgovara imeno i prezime na bankovnoj kartici. Tamo ima sličica, pogledaće vas i zaključite da ste to vi, kao dodatna provera ako se potpisete tamo na neki nalau za isplatu, možete da proveri sa onim potpisom koji stoji na vašu ličnu karti zato što ste bili u obovezi da se potpisete kada ste dobilili ličnu kartu. E, i sad na izgled u toj proveri identiteta učistuje dve osobe, međutim to nije tašno, zašto? Zato što će ta osoba koja proverava vaš identitet uroditi još jednu stvaru. A to je pogledaći ličnu kartu. Videće da li ta ličnu kartu deluje verodostojno, a da je verodostojno, znači da li ima one holograme, da li, da li, na dodni izgleda kao prava ličnu kartu, da li je napisano da je ličnu kartu izdal o ministrarstvu u nutrečnih poslova. Dakle, to treće telo koje učestvu je u proveri identiteta je ministrarstvu u nutrečnih poslova Srbije i to je zapravo telo u našoj zemlji koje garantuje neči identitet. Znači to je ono telo koje vas prati praklično kast i sve rodili, znači kosmatične knjige, padu trenutka kad dobijete ličnu kartu i koje je ovlašćeno da vam izda identitet bilo za upotrebu unutar zemlje, bilo za upotrebu kad da putujete u ministrarstvo tako što dobijete pasušno. E, znači u toj proveri identiteta učestvu je zapravo implicitno imu zato što kroz tulipčom kartu koji je on izdal, koji ima određenje nivosigurnosti u sebi, kroz štampu i kroz načina koje je pravljen koje napravljena tako da ne može baš svako da falsificu. Koje ima da znamo da postoje primer i uvek da dolazi do te vrste zlovupotrebe, postoji to treće telo koje zapravo izdaje potvrdu šta je neči identitet. E, onda su ljudi uzeli i rešili da naprave analogiju tog sistema i zapravo ono što imamo danas u digitalnom svjetu i potpuno analogija tog takog sistema da je postoji neki autoritet koji odgovara za digitalne identitete. Prvi stepen toga je autoritet za javne tiju čeve, a ono što se zapravo koristi to su digitalne certifikati i tako zana sertifikacija na tela, to nećemo s lići danas pa ćemo uraditi na ardenim četvrk. Evo sačemo da vidimo jedan primer toga kako bi to izgledalo sa nekim autoritetom za javne tiju čeve, odnosno sa tim autoritetom koji je zadužen da izdaje neči identitete. Ono što se predpostavlja ode, to je naravno da ovaj autorit...
 za javni ključeve, oni ima neki svoj privatni ključ i ima svoj javni ključ. I ono što se takođe prepostavlja, to je da ovoj javni ključ su i jedan i drugi i ovoj A i ovoj B mogli da preozbun na siguran način. Oni su to mogli da preozbun, recimo, preko sajta, pri čemu sada taj public i atoriti, ako razmišlamo u kontislu toga da to može da bude MUP. Public i atoriti može, ako bi došli do kompromitacije njihovo ključe, da objavi preko svih mogućih televizija sa nacimimim frekvencijom, je danas je došli do kompromitacije mojih ključeva, ovaj sistem biš enerati. Značim da se obavezti da nešto njihovo u redu, a taj javni ključ može da bude objavljeno na sajtu i da možete bude prijučno sigurni, da je to baš javni ključ tog autoritetu. E sada, kada A hoće da priča sa B i kada A hoće da dobije sesijski ključ sa B, to je cilj svega ovoga, odnosno da se proveri njihov identitet. Šta on kaže? On pošalja jedan zahte da ovde, u kome kaže ja sam A i hoći da pričam sa B, znači praktično u okviroga što piša ovdere quest mi imamo identitet od A, imamo identitet od B. I pošalja vreme. Ovo ćemo svih ovom osvijevu žbaviti. Jedan od načina, kako može da se napravi da svaka sesija bude jedinstvena, jeste da se koriste slučenih brojevi drugi način, da se koriste time stampovi. O tom potom diskusi o time stampovima kada dođe vremi za to. Nije bitno, da će i ovo vreme ovde doživite kao nešto što i jedinstveno određuje ovaj zahte. Znači, taj zahtevi je se desi u tačnom to vreme. Autorite za javna tela kaže dobro, obratio mi se A, hoći da priča sa B i ja ću svojim privatnim ključem poslati ovaj njegov zahtev i vreme, to ću mu vratiti da bude siguran da je to deo njehove iste transakcije i poslaću mu javni ključ od B. E sada, ako je to tela kome svih verujemo, onda će ovaj A, ovom porukom 2, zapravo dobiti tačno ispravantar identitet od B i javni ključ od B. I može da bude u potom siguran da je ovaj ključ od B, ovaj javni ključ od B, da je to sigurno javni ključ od B, zato što on je autoritet ko me on veruje, ko me svih veruju, mu je izdal takvu poruku. E sada, kad je dobio takvu poruku, onda ovaj A, kriptuvići poruku javnim ključemo B, javljamo se i kaže, ja sam A i ovo je identificator moje sesije. E sada, B pošto mu se javio A, hoći da bude siguran i hoći da dobije javni ključ od A, onda on u poruci 4 šalje odpunno isušto u poruci 1, na to je zahte, u koj me kaže ja sam B, ovo je neko vreme 2, javio mi se ja hoći da priče sa mnom, u poruci 5 koja je istakao poruka 2, kriptovan privatnim ključem autoriteta za javni ključeve, on šalje javni ključ od A i vraća u poruku iz poruke 4, kao potvrda da je u pitanju isprav transakcija. E sada, kada je dobijena odgovarit će javni ključ, u poruci 6 javnim ključem od A, se vraća, ovo je ovdje nonc, iz prve poruke kao potvrda da je ovo odgovor na tvoj zahte iz ove transakcije broj 3, dopisuje se nova vrednost N2 i kao finalna potvrda kompletne razmene javnim ključem od B se šifruje drugi N2, kako bi sad jedine drugi bili sigurni, da su ispravno razmenili javni ključeve. Ovo ovdje što vidite, ovih sedan poruka, su služili samo za to da se prakčno razmene javni ključevi i da A i B budu sigurni da je P u A ključ o da A i da je P u B ključ od B. Ovde nema razmene simetrično ključe. Ako bi smo chceli da napravimo razmeno simetrično ključe, sad abi mogli da se napravi i Merkleova razmena, zato što sada i A i B znaju, koji su javni ključevi ovog suprotne strana. Dakle, kao što vidite še ima je dosta služena, ima dosta poruka, ali to je posledica toga da je potrebno izvršiti dobru i kvalitetnu proveru identiteta onih strana koja učestvu u razmini ključeva. I to je ono da je postoji konplikovan pošto na internetu kada komuniciraju uređe i teško neki stvari uraditi.
