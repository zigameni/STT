 da je manje ottern od jot. Aha, šta sam tu sad rekao? Ako sam ja došao pre ja ne čekam suseda. Aha, dobro. Aj, ponovu još jednom. Kada smem da preskočim nekog od procesa koji postoje, znači ovaj algoritm zaktiva poznavanje kompletno svega što postoje. Znači moramo da znamo sve procese šta rada u kom stanju se nalaze. Odem i uporedim se s svakim procesom pojedinačnom. Neki drugi proces smem da preteknem. Ako taj drugi ne želi da koristi, ako želi da koristi, a došao je posla mene. Kada su ustanovi da ja imam najmanji broj, ja mogu pristupiti kritični sekciji. Kada sam u kritičnih sekciji, ja sam jedini. Kada završim taj savoj posao u kritičnih sekciji, ja kažem da je trnodiji jednaku nula. Trnodiji jednaku nula kažem. Ja ne koristi više kritičnu sekciju. I ako vidite, ovde nigde nemo. A one dve promenjive koje smo koristili kod stick-it algoritma. Jednu promenjivu koja nam je bila na one mašini, koji udaramo koje kaže number, koji je sledeći, nema to koje je sledeći i nema naredni. Pustamo naredno, nema toga. To smo se uspili ovde da realizujemo samo kroz promenjivu trn. Kako smo to realizowali? Pa u ovom ovde prvom redu rekli smo trn odija jednako max. Daj mi maksimum od svih oni koji tu postoje. Daj mi maksimum ju veći za jedan. Kada smo našli, maksimum mi uvećali za jedan. Kada ja mogu da uvoditi kritičnu sekciju, imam najmanje od svih brojeva, u ovnih procesu tu koji postoje, a da je ta brojeva veći od nole. Znači, ja mogu da pretektam nekog suseda, ako je dnego brojeva jednako nulli, to znači on nečeka red. Iako je taj boj sused došao poslomelj. I ovu sad što smo napisali, kors grain rešenje. Ja želim da se ovako nešto desi. Ja pojma nevam kako ću ovako nešto napraviti. To su dve odvijene stvari. Kors grain kažem šta želim da se desi. Fine grain kako to da uspemo da napravimo. Da imamo daljećimo moći, to uopšte na ovaj ovdje način da napravimo. I hajde da probamo. Ovo ovde da rešimo samo za dva procesa. Znači nećemo za en suviše komplikovanu, nego hajde da probamo da napravimo fine grain rešenje za dva procesa. Želim od dva procesa na neki način da synchronizujemo. I šta smo rekli? Treba da nađemo maksimu od onoga, koliko ima moj sused. Dobro, prvi proces kaži trn od 1, jednako trn od 2 plus 1. I šta onda radim? Vile trn od 2 različito od nula i trn od 1 već je trn od 2 skip. Apo novu šta tu piše? Ako drugi ima različito od nule i ja sam došao posled drugog, ja moram da čekam. A šta ovaj drugi radi? Trn od 2 je jednako trn od 1. Uvećam, ja uzvim index onog tamog moga suseda i uvećam za 1. To je valj da ono max plus 1. I nakon toga kažem, while, trn od i, trn od 1 različito od nula, ako moj sused želi da uđe, onda mora da je došao posled mene i način ja moram da čekam. Ako je trn od 1 jednako nula, moj sused ne želi da uđe u kritičnu sekciju, ja mogu dođe u kritičnu sekciju. En, ovo ne vađa. Ovako rješenje nije ispravno, jer se može desiti sledeca situacija. Na početku smo rekli da su ove promenive jednake nuli. Trn 1 je jednako nuli i trn 2. Šta sad može da se desi? Dođe ovaj ovdje, trn 1 i kaže pročita i čemu je jednako trn 2. Trn 2 je jednako nuli. Uveće nula plus 1 je jednako 1. Ali to još uvek nismo smestili u promenivu trn 1, to smo izračunili, to se nalazi ko od nas u akumulatoru. Tek treba da smestimo u promenivu trn 1 i zamislite tu nas za ustavitko. I zamislite tu nas za ustavi scheduler. I onda ovaj proces 2 šta odredi? Pročite čemu je jednako trn 1. Trn 1 je jednako nula. Trn 1 je jednako nula. Dobro, nula plus 1 je jednako 1. Tu se smesti 1 i taj postane jednako 1. I taj postane jednako 1. I sad gledamo što ovde piše. Dali je trn 1 različito od nule? Trn 1 je različito od nule. Dobro, dali je trn 2? Već je od trn 1. Šta smo rekli? Trn 2 je jednako 1. Nije. 1 nije već je od 1. To je false. Ovo je ovde može da uđi u kritičnu sekciju. Da imamo šta se desi ovde gore? Dali je trn 2 različito od nule? Yes, trn 2 je jednako 1. Dobro. And, dali je 1 već je od 1? Nije 1 već je od 1. Ovo je da će biti false. I ovaj ulazi u kritičnu sekciju. Tako da ovde sad što sam napisao. Nije... Prvo nije resenje. Znači, ovo ovde zašto nije resenje? Zato što ovo ovde trn od i je jednako... Trn od 1 je jednako trn od 2 plus 1. Nije atomski skup akcija. Tu imamo load at istor. Imojmo 3 instrukcije. 3 atomski instrukcija. Ali skup 3 u atomskih operacija. Nemora biti atomska operacija. Mi zato i pravimo synchronizaciju. Kad to znamo sigurno da jeste atomską operacija. Pa ako je ispunjenu ono atmost once property. Ali ovde vidite, trn je jedan, postavlja onaj drugi. Trn 2 postavlja onaj drugi. A čita je jedan, tako da ovde imamo ukrštenu referenciu. Ovde nije ispunjenu da imamo atmost once property. Pa dobro. Ovo nevalja. A što sam ja biš rekao maločas? A ako se desi slučaj, ovo je blesam slučaj. Da su oba tu prošla. A zašto mi ne bi smo možda kod jednog stavili veće, a drugog stavili veće ili jednako. Jer maločas ste videli, prošli smo oba ovaj deo. A onda jedan bi prošla ovaj deo. Što ne bi smo u drugu stranu. Neku drugu stranu, jedno od ove dve strane blokirali. Pa da se ne desi, da ove strane uđu u kritičnu sekciju. I ovo ovde prepravili smo naše rešenje. Ovo ovde smo napisali. Turn 2 veće ili jednako od turn 1. Hoćemo da vidimo i dali ovo ovde sada radi. Znači, hoćemo da vidimo, dali ovo ovde jeste rešenje. Ili ni ovo nije možda rešenje. Kako ćemo to da vidimo, pa odemo, pa prođemo kroz kombinacije. Mogu da napisamo, da smo imali malo čas. Turn 1 je jednako nula. Turn 2 je jednako nula. Ajde da vidimo, šta će da se desi. Zamislimo sledaći scenariu. Dođe turn 1. Ovo je ovde krene da se izvršava. Odradi operaciju load, pročita turn 2. Čemu je jednako turn 2 jednako nula? Izvrši operaciju add. Iz računa da je ovo ovde jednako 1, ali nesmesti još uvek rezultat u turn 1. Preagine ga tu scheduler. Zato što smo rekli, ovo ovde turn 2 plus 1 je jednako nešto. To ima barem 3 instrukcija. Nemamo instrukciju fetch and add, jer smo chceli da naprajimo naš ticket algoritm, a da nema tih fence instrukcija. Scheduler ga je zaustavio tu. Ništa se još nije promenila. Dođe proces broj 2. Koji vrednost ima turn 1? Pošto se ovo gore nija odradila atomski, turn 1 ima vrednost nula. Nula plus 1 je jednako 1. Ok, turn 2 je jednako 1. Šta se sad ešava? Dalje turn 1 je različit od nule? Čekaj da vidim. Turn 1 je jednako nuli i ovaj ovde će proći ušu kritičnu sekciju. Sad zamislite scheduler od bru, odbudi ovog ovdje. Probudiga. I on kaže, turn 1 je postalo jednako 1. Dobro. Dalje turn 2 različi od nule?