 da se nešto neko nov ne pojavi. Šta još Berberin treba doodradi? Berberin treba da naplati u suštini mušteriji i da isprati mušteriju do izlaza. Ove problem koji mi sada posmatramo je u suštini abstrakcija nečega što se naziva kljen server architektura. Imamo veći broj procesa koji mogu da upute svoj zaaktev koji treba da se odradi, to su ove mušterije. Imamo Berberina, jedan jedini proces koji uzima taj zaaktev po zaaktev, odrađuje posao po posao i obaveštava proces da je posao završen. Tek kada ta mušterija koja je trenutno obsluživa na napustiradnju, onosno napusti tu Berbersku stolicu, a Berberin može da pusti narednu mušteriju. Znači postoji deo synchronizacije, gde mušterija treba dobavesiti Berberina da je došla, da Berberin treba dobavesiti mušteriju da je posao završena, ne može mušterija da ode tek tako i da ostavi glavu tamu unutra, nego mora ipak da sačeka da posao bude završen. Mušterija može da napusti Berbernicu, tek kada Berberin kaže da je posao završen. Oldne postoji, kao dodatna sitna synchronizacija koji poten celom mogla da postoji, a mušterija nešto plaće Berberinu i onda izlazi, ali to je suštini, viditećemo kako možda se realizuje u Tai Ping Pong, kako jedna strana, drugu stranu obaveštavaju šta treba da se dešava, jer tu neće biti prevelik broj procesa koji imeđu sobno interaguju, a tu će biti samo dva procesa koja imeđu sobno interaguju, to su Berberin i mušterija koja je došla na red. Sve ostale mušterije čekaju u nekom drugom redu. Imatimo veći broj nekih redova čekanja, a jedan red čekanja će biti za mušterije koji su došla koji nisu na redu, imatimo informacije o mušteriji koja je na redu, znači da li ona trenutno radi nešto, ne radi nešto da se brije kuda ide šta već. Imamo Berberina koji kaže, ja čekam ako nikog ne obrađu trenutno. I kažem, ove dve procesa to je mušterija koja je trenutno na redu i Berberini mogu da interaguju i dopisuju neke promenjive, ako je potrebno plati sačeka i zađe i isprati i ruku i se šta govod veći da postoji tu od koraka koja ova dva procesa treba da realizuju, ali to je pa synchronizacija između ta dva procesa i ni jednog više, ni jedan drugi ne učestvoje tu synchronizacije, svi ostali su zablokirani i nisu mogli da dođu tu na redu. Ovo je Slipping Barber, postoji jedan Berberin, ovo ovde odgovara nekoj jednostavnoj kljen server architekturi. Na vežmovoj ćete viditi da postoji jedna malo drugačije varijanta od problema, ta malo drugačije varijanta problema je Hillsers Barber Shop Problem. To je postoj Berbernica u kojeg postoj više zaposlanih Berberina i ako uzmete gledate ispitni zadatke, ona ćešće se nalazi dvojica Berberina, aci i braca. Tako su imenovani i oni treba da obslužuju mušterija. U čemu je tu razlika u odnosu na to kad postoji dva Berberina i kad postoji jedan Berberin. Kad postoji jedan Berberin imamo jednu mušteriju, kada taj Berberin i ta mušterija komuniciraju, tako znamo kojeg s kim komuniciram, ali kad ima dva, treba da nam javi, da mi možemo da napustimo Berbernicu, ona i Berberin, kod kojog smo došli da se šišamo, a ne ona i drugi, on je javi o nekom drugom. Tako da tu treba isto voditi račun, imamo. A ovdje postoji možete da se prebacit u problem vožnji autobusom, gde ima puno autobusa koji mogu da dođu u niste stajilište, gde mi hoćemo da siđemo. Samo mi treba da siđemo, onda kad naš autobus dođe na stanicu, ono su stajilište gde mi hoćemo da izadžemo. Ne bilo koji je autobus, nego naš autobus. Tako da ovo ovde možete posmatrati kao neku malo i jednostavniju varijantu tog problema. Šta smo rekli? Šta mi imamo od metoda? Da vidimo, kako ćemo da ih rasporedimo? Šta ćemo imati u dusnunih promenjivih? Imojmo frizer skoradnju koji će biti jedan monitor. Ima ćemo dva procesa, a to će biti proces brica i proces klient. Imaćemo ukupno dva procesa, jedan monitor. Imaćemo tri metode. Jedna metoda je metoda koju poziva mušterija, get her cut. Ošišajme, možete staviti tu neke parametri, kako želite da bude to ošišani i čekajte da se to završi. Imojmo dve metode koji su potrebne berberinu. Jedna je danima mušteriju i završen posao. A što imamo ovo jednu metodu, ovo imamo dve. Samošišanje. Se ne obavlja u monitoru, obavlja se izvan monitora. A zbog toga, ovo treba da imamo dve metode. Gde u jednoj, šaljemu informaciju dao je. Potremu nešto sodradi, a drugom put da je nešto završeno. Potencijalom bi smo mi mogli i ovde naprajimo dve metode. Jedno je donesi nešto da sodradi i posleda preuzmi to nešto. To ćemo imati kod problema popravke automobila. Gde dovezimo automobil, pa možemo dostajimo automobil, pa da dođemo nekad posleda da ga preuzmo i da sačekamo, dok se to ne završi. Ali ovo je baš tamerno stavljeno da je hjerkat, jer kad dođe mušterija ona mora i da ostane tu. Ne može da izadje od atle, mora da sačekaj da se posao završi. Zbog toga i ovdje imamo samo jednu jedinu metodu. Kod problema popravke automobila dovedemo ili kod problema ovo ga, rada s decom u kog su zove u vrtiću, kod childcare problema dovedete decu i odvedete decu. Ovdje imamo samo jednu metodu, zato moramo da dovedemo i dođemo i da odvijemo. OK, što smo rekli? Brica prvo pozove, da ima i sveču mušteriju. Tu može da dobije ona informacija o tome kako izgleda ta mušterija, koja je oblig lave, koja je zaakte za frizurom i šta godeći? Da može da prosledi ona gore metodu. Ove serverska metoda, koga treba da vrati te informacije berberinu, berberinu i sad treba pozove tu svoje metodu, koji će dodrade neki posao i da kaže završen. Tu može da se pojavio na cena ili šta godeć, kao argument, s kojim sad nešto dalje treba ta mušterija da rati. Teknika koji će u mi ovde raditi će u suštini biti zasnovana tu kada komuniciraju berberin i mušterija koja došla na red a nešto što se naziva rendezvous. To je barijera sa dva procesa, to je brica ili bilo koji drugi klient. Brica i suštini klient koji došla na red koji došla za šešenje. Vi vidićemo kako se to pravi rendezvous, kako jedna strana drugu stranu obaveštava, kod rendezvousa imamo synchronizaciju na barijeri za dva procesa. Koju treba nekako realizovati, možda ćemo promoviti da pravimo time ping pong. Pošao sam, završio sam, platio sam i zašao sam. Vi vidićemo koliko tih nivoga možemo da stajimo, ali posao je uveki isti kako se prolazi između tih rendezvousu tačaka. Neko kaže da je nešto odradio, drugi mora da sačeka i da rese to je tu promenjivu, da bi mogli lepo da prolazimo kroz ta ping pong odnosno kroz tu barijeru. Nekomora kaže ja oddošao, prihvatio i di dalje. Moramo da imamo tu razminu informacije kod može da pređe na koji korak. Šta su koraci kroz koje prolazi Berberin? Brica, rpostane raspoloživ, obavljašišanje i poziva napuštanje. Što se klijenta tiče, sedam u stolicu čekam dok se ne završi, nakon toga je napostimo ove sve. E sad, kako ćemo ovo realizovati? Odgvor je poima nemam. Možemo da pravimo nekšto što će opisivati ovoj monitorsku invariantu koje opisuje kako, koliko, gde, kada to se našliće realizuje koristići brojače. Ali u suštini kad se bude Berberin, ako postoji jedan koji čeka. Kada se zablokira? Neko? Ako postoji nekoko se bria ili nekoko čeka? Znači baš mi briga koliko ih ima dovoljno da postoji barem jedan koji se bila pre. I tu bi smo mi mogli sada da ovde zjongliramo izmidlju stanja to je klient je Se u stolicu klient je napustio stolicu to je u suštini ono što je bitno Berberin znači neko je Se o nekoji otišao. Možemo da pratimo koliko puta Berberin šišao bio raspoloživ ili isprati o nekoj. U suštini ako imamo to kao brojač i tačno na osnovu odvrednosti toga možemo da znamo u kom od ova ovde tri stanja Se neko nalazi čeka da dođe neko i alšiša nekog ili ispraća nekog da i zađe. Mora ovako se realizuje? Nemora. Mi smo videli šta su tri. Videli smo šta su tri naše metoade. Tako da možemo da napravimo to i možda malo druga čija. Aha, znači da smo rekli da mogu da sednimo stolicu mogu da napostim stolicu da li je Berberin slobodan, da li je Berberin zauzet i da li je Berberin završio svoj posled.