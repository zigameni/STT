Ove iste zbirke, knjige, "Konkurentno programiranje, rešeni zadaci" od Kodinovića i Ivanovića iz 2004. godine. Znači, ono tamo iz 2018. godine ima možda nekih 500 strana, a ovo iz 2004. godine ima nekih 200 strana. Na prezentaciji predmeta bi trebalo da se nalaze skripte za predavanja i za vežbe. Za predavanja je radio profesor Ivanović, za vežbe sam nekada ja napravio, mislim da su sada koleginice Sanja i Taša to dopunile, tako da bi verovatno trebalo ovde da se napišu njihova imena. Pored ovih knjiga na srpskom jeziku, imate i dva dobra udžbenika na engleskom jeziku. Prvi, koga se mi u suštini dosta držimo, "Foundations of Multithreaded, Parallel, and Distributed Programming" od Gregora R. Andrewsa, je knjiga koja je izvanredno napisana što se tiče ovoga što mi obrađujemo na ovom predmetu. Knjiga je malo obimnija, obuhvata više stvari nego što mi radimo na ovom predmetu, obuhvata i neke stvari koje su vezane za predmet, na primer, paralelno ili multiprocesorsko programiranje, što nama neće biti fokus na ovom predmetu, to je neki drugi deo. Nama će biti cilj na sinhronizaciji, na semaforima, monitorima, distribuiranom programiranju i različitim paradigmama koje postoje u pozadini da bi to moglo da funkcioniše. Tako da možete naći tu knjigu na internetu, dosta je korisno da vidite kako je to tamo opisano, ako vam nešto nije jasno, a ne možete se možda snaći u "Konkurentnom i distribuiranom programiranju", onda slobodno potražite i ovu knjigu na internetu. I za ovaj prvi deo našeg kursa imate jednu zanimljivu knjigu sa lepo rešenim sinhronizacionim problemima, "The Little Book of Semaphores", tako da i to možete potražiti da vidite kako mogu neki sinhronizacioni problemi lepo da se reše koristeći semafore. Lista će biti napravljena kad se završi biranje predmeta, znači to je negde naredne nedelje, sredinom ili krajem naredne nedelje biće formirane liste za ovaj ovde predmet. Ja mislim da je to sve što se tiče ovog uvoda...

Dobar dan, dobro došli na predavanje na predmetu Konkurentno i distribuirano programiranje. Ja sam Zaharija Radivojević, a tema ovog današnjeg časa su koncepti bitni za konkurentno i distribuirano programiranje. Sada ćemo videti šta je to konkurentno programiranje. Da se samo upoznamo sa ključnim rečima, da kada nešto negde pročitate, znate šta ste pročitali, da razumete šta to negde piše, šta je to neko opisivao, šta je to konkurentno. Autor ove prezentacije je profesor Seriju Ivanović, koji je držao ovaj predmet pre mene, ja sam to nešto dopunio, tako da se ovde pojavljuju i neki algoritmi koji nisu bili pre. Krećemo sa delom koji se zove konkurentno programiranje, za koje je predviđeno da ga mi obrađujemo nekih sedam nedelja, ja mislim. Možda čak osam nedelja, videćemo osnovne pojmove šta je to konkurentno programiranje. Kako se radi konkurentno programiranje, koji su to steći deljeni nepromenljivi? Videćemo šta su to semafori, verovatno ste se s njima upoznali, regioni... Pa, s njima ste se upoznali, ali možda ne znate da su to regioni. I sa konceptom monitora. Nećemo sve koncepte obrađivati i na predavanjima i na vežbama. Na predavanjima i na vežbama ćemo proći kroz semafore i monitore, a dok ćemo na predavanjima videti kako može da se radi sinhronizacija, a da nam ne pomaže operativni sistem uopšte, dok ćete na vežbama videti kako može da se radi sinhronizacija, ako imamo koncept regiona. Na predavanjima ćemo se samo dotaći šta je to, ali nećemo praviti nikakvu sinhronizaciju, već ćete to videti detaljno na vežbama kako može da se odradi sinhronizacija koristeći taj koncept. Doći će sve, dosta slično.

Nije teško. Ako se fokusirate da vidite šta je to što može da se desi. Videćemo šta je to što može da se desi sad na ovom predmetu, a upoznaćemo se i sa tim ključnim rečima, šta je deadlock, šta je livelock, šta je izgladnjivanje (starvation). Tako da kad budete pisali rešenja, treba da se fokusirate da se to ne desi. Da se nikada ne desi da imate neku od ovih stvari koje sam sad nabrojao. Videćemo da taj spisak tih stvari o kojima treba voditi računa će malo rasti tokom vremena. I da vidimo sada malo šta su te ključne reči koje mi obrađujemo na ovom predmetu. Ostavimo pojam. Sekvencijalno izvršavanje je takvo izvršavanje gde se sledeća računska operacija ili programska naredba izvršava tek nakon što je prethodna završena, u skladu s redosledom koji je zadat programom. Ovako nešto više nikad nemate. Ovako nešto više nikad nemate. Ako ste slušali predmet Arhitektura i organizacija računara 1, videli ste da sada savremeni procesori imaju nešto što se zove protočna obrada (pipelining). Više instrukcija se izvršava istovremeno. Tamo smo radili na procesoru koji ima 5 nekih instrukcija istovremeno. Vaši savremeni računari koje imate, kućni računari, mogu 15-20 instrukcija istovremeno da izvršavaju. Tako da je ovaj koncept sekvencijalnog izvršavanja malo još uprošćen. Ono što nam daje naš procesor nije ono što smo mi napisali. Ono što je bitno je da je identičan rezultat kao ono što smo mi napisali. Ali ne znači da će se instrukcije na našem procesoru izvršiti u redosledu kako smo ih mi napisali. Čisto da znate da to postoji. Ali sekvencijalni program je ono što bi moglo da se izvršava i na mašini gde ide instrukcija po instrukcija. Sekvencijalni program je program koji ima samo jedan sekvencijalni tok izvršavanja u vremenu. I to su obično bili oni programi koje ste do sada pisali. Sortiraj nešto, pretraži nešto, odradi neki posao.

Do sada ste pisali uglavnom sekvencijalne programe. Pisanje sekvencijalnih programa nije baš toliko poželjno što se korisničkog iskustva tiče. Jer se može desiti da, na primer, hoćete nešto da upišete na disk ili da pročitate sa interneta. Može se desiti da pošto je pristup ulazno-izlaznom uređaju spor, da taj ulazno-izlazni uređaj ne radi, ne, možda se tako zove neko vreme. Korisničko iskustvo koje bi gledalo taj vaš program ne bi bilo na zadovoljavajućem nivou. Zbog toga su sada svi programi imaju više tokova kontrole. Snimi nešto na disk. Vi pokrenete novu nit koja će da odradi taj posao. Dovuci nešto sa interneta. To će biti nova nit ili neka od niti koje imate u nekom bazenu. Samo da se recikliraju, to jest ponovo iskoriste. Sad već zavisi od toga kako je neko nešto napravio. Ali je to nešto što sada svi koriste. Sekvencijalno izvršavanje vrlo retko kao na nivou gotovo kompletnog programa ćete sada imati. Morate voditi računa o tom korisničkom iskustvu. Da se aplikacija ne "zakuca" 5 sekundi, 10 sekundi, neko vreme, jer onda možda neće više raditi. Kod mobilnih uređaja imate ograničenje. Pojavi se neki izuzetak da nakon 5 sekundi aplikacija nije reagovala. U tom slučaju morate da pravite aplikacije koje imaju više niti. Ako se neko zablokira duže od 5 sekundi, aplikacija prestaje s radom. Videli smo šta je sekvencijalno. Sledeći koncept. Paralelno izvršavanje označava istovremeno izvršavanje više računarskih operacija, sekvenci operacija programa ili delova jednog programa. Ovo je novo, dosta široko. Naši savremeni računari su sada u suštini paralelni. U paraleli rade neki posao. Bez obzira da li je to za mobilne uređaje, da li je to neki server. Više instrukcija se izvršava istovremeno. Ne samo taj proces garantuje da će to biti možda istovremeno. Ono što smo pisali za sekvencijalno. Paralelni program je svaki program koji koristi posebnu sintaksu za označavanje delova koda koji se mogu izvršavati u paraleli. E, ali sada imamo samo jedan mali dodatak. To što hardver podržava neki nivo paralelizma, ne znači da je naš program paralelan, nego da se samo to izvršava paralelno na nekom računaru. Da bi program bio paralelan, mora da postoji neki nivo paralelizma gde ste vi rekli: "Ja želim da se sledeći deo koda izvršava u paraleli." Ono što radi redovno procesor nije to. Ovde vi jednostavno kažete: "Ja želim da se ova, ova, ova i ova operacija izvršava u paraleli." Kad budete pratili multiprocesorske sisteme, pa budete slušali, igrali se s CUDA-om i onda tamo imate hiljadu jezgara.