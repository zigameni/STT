 Učinajte, da se učinajte, da se učinajte, da se učinajte, da se učinajte, da se učinajte, da se učinajte. Učinajte, da se učinajte, da se učinajte. Dobro jutro još jednom. Dobro došli na predavanje na predmetu konkurentno i distribuirano programiranjem. Tema ovog današnjeg časa je mala promena u paradigmi Rada sa konkurentnim programimam. Predhodni put na predavanjima i na vežnjima videli ste da Rad sa semaforima baš i nije tako jednostavan. Dosta je teško, lepo isprogramirati sve. Ne samo što je konkurentno programiranje teško, ajde nego nije to presudan možda faktor, nego to što su ljudima koji programiraju. Izmješane promenjive koje služe zasinkronizaciju i promenjive koje treba da rade neku obradu. To je nešto što može da načinimali problem kod razumevanja šta neko parče ko je odarati. Teško je nekome da se snađe da vidi dali to što je napisano, služe zasinkronizaciju ili obavlja neki konkretom posao. I onda su ljudi na počet kuze li da razmišljuju, ok, dali to možda nekako da se grupiša. I napravili su koncept regiona. Mi ćemo s ovin konceptom regiona baviti dosta kratko. U suštini, ste se već susreli sa konceptom regiona na ovom predmetu, samo što to tada nismo zvali region. A svojim konceptom ćete se znatno više susretati na vežbima na ovom predmetu, ali ćete se susretati u praksi. Jer postoje neke implementacije regiona, sa kojima ste se vi već susreli do sada dok ste programirali na predmetu objeknu orientisanu programiranje. Šta želimo mi dovedemo sa konceptom regiona? Znači, želimo da obezbedimo jednostavan pristup kritičnoj sekciji. Želimo da eksplicitno označimo, e, ovo ovde je kritična sekcija, i to se obavlja koristić jedan poseban objekat. Struktur u podataka koja se naziva region. I tu struktur u podataka ljudi ubacuju promenjive koje se odnose na synchronizaciju. Ovo vam je verovatno već poznato. A s ovim konceptom ste se već susreli na do sadašnjem radu sa konkurentima aplikacijama. Već ste videli da možete koristiti objekat za synchronizaciju. I da kažete, ovo ovde je sada kritično mešto. Niko ne sme da me prekine dok ja pristupam datom kritičnom bloku regionu. Ovde je to označeno kao region. Region možete smatrati za nešto nalik na struktur u podataka koji nisu objekt norijentisani. Če to su objekti koji imaju polja, jedan rekord, jedan zapis koji ima veći broj polja, koji imaju neku strukturu i gde se čuvaju podaci koji su potrebni da bi nešto mogu da sodrati. To nešto što može da sodrati je treba da obezvedimo. Međusobno isključivanje i usnovnu synchronizaciju. To su dva najbitnija faktora koji su nam potrebno. Bez toga nema konkurentnog programiranja, bez međusobno isključivanja i usnovne synchronizacije nema konkurentnog programiranja. Iamo nezavisne tohove koji se izmršavo, jedan potpuno nezavistan u drugom. Tako da to su nezavisne aplikacije. Nekoj uzor učnu podelio posao na veći broj delova i dao svakom od njih nezavisno da radi. Nemožemo, neprajemo mi našu tormu poslova, nemožemo da synchronizujemo radnike koji ću uzimati nešto iz te torme poslova. Nema synchronizacije. Jednostavno ručno je neko statički podelio šta ko treba da radi i taj neko sad radi nezavisno od ostatka sveta. Mogu da se i tako programirati. Možemo opraviti programje koji rade nezavisno od ostatka sveta, ali će onda osoba, onaj i što ih pokreće, morati da vodi računa ko me šta dodelio da radi i taj će u suštini praviti synchronizacije. Aha, deset poslova su završeni. Ajde ja sad da pustim na aradnu iteraciju. Neam beg of task koji će sam to da mi radi, nego ću ja to da trpam što godam je došlo u različnim filoima što je smešteno. I da je smešteno u jedan filo koji ću opet deliti nekako ručno i proslidživati sledaćo iteraciji i date obrade. Tu znači o synchronizaciju obavlja čovek. Ali mi ne želimo baš da čovek toliko mora manuelog rada da ima dok se program izvršo, želimo da pustimo da to naše konkurentno programirani radi. I vrlo jednostav način kako možda se napravi syntaxerigiona je, kažemo, region i onda kažemo objekat nad kojom želimo da odredimo synchronizaciju, to je ovdje region res, do, beg, ili ako biste koristili neku ceavsku interpretaciju, mez tog ovo ga ovdje do beg, region otvorena-zatvorena zagradica, kažemo kako nam se zove taj naše region, onda dođe vitičasta zagrada koja kaže radimo sa regionom. Čekaj, ovo ste već videli, samo sklučno rečne je bila region, nego nekako malo druga čije. Da, to ste već videli u programom skom jeziku java. A ono što ste do sad zvali, ne znam kako ste zvali, synchronizacije nad objektom, da je ste rekti synchronizaciju pa neka referenza. Nije ništa drugo, nego osnovni oblik regiona. Ovo ovde sada što mi pravimo, a ste već videli, synchronizaciju nad objektom je region. Kada uđete u dati blokove 3 tačkice, imate ekskluzivno pravo, a ako ste ubezbedeli ekskluzivno pravo, imate međusobno isključivanje ovde. Napravili ste da postoji međusobno isključivanje. Sami mojim zaključavanjem objekta. Je ste vi prelaskom na ovaj ovde, da je ovo vitičasta u zagradimcu, odnosno, ovaj ovde tri tačke dobil ekskluzivno pravo, pristupa datom objektu. A u suštini, ovo ovde nije ništa drugo, nego ono što smo mi do sada već radili. Zatvorena ovde već je manje znak. Gde smo mi reklili, hoću ekskluzivno pravo. Samo što smo ovde stavili jedan dodatak, a to je da možemo da imamo veći broj tih objekata i da tačno kažemo, ok, koo s kim treba da se synchronizuje, ko ko me može da može tu da smet. Šta su oni koji smeju u paraleli da se izvršavaju, šta su oni koji ne smiju u paraleli, ako traže ekskluzivno pravo? A on traže ekskluzivno pravo nad objektom nad kojim ima kontrol. Tako da vidite, sa regionom smo se mi i susreli u suštini već dva puta. Prvih put na ovom ovde predmetu je kada smo vidili nešto što se nazivilo chorus grain rešenje. Drugi put ste se vidili u suštini već susreli sa ovim regionom na predmetu objektno-orientisanu programiranje 2, gdje ste dobili referenciu i synchronizu nad nekim objektom, nije ništa drugo region, obječen region tuši. E, ali to je jedan korak. U tom jednom koraku mi smo napravili međusomni skličivanje. Ne dostajemo nej drugi korak, to je kako napraviti usnovno synchronizaciju. A usnovno synchronizacije se može da napraviti tako što umesno obječeno je regiona, a postoje nešto što se naziva usnovni kritični region. U regionu možete da stavite neki usnov. Možete da stavite neki await. Čekam da se nešto desi, povdne nešto radim. Čekaj, to smo već imali. Tako da, ono što smo mi preimali kao chorus grain na naše rešenje, gdje smo pisali await. Neko x, radim neki posao, neko s. Ovo ove nije ništa drugo, nego usnovni kritični region. Imamo međusomni skličivanje, to je oveći manje. To je osnovno stvar koja postoji koja da regiona, samo što koja da regiona imamo i objekat na koji smo to sve odradili, značno zapis na koji smo to sve odradili, koji smo zaključali. U tom zapisu bi trebalo da se nalaze sve ove naše promenjive, koje treba da nam prave synchronizaciju. Dalje je obavezno da se tu nalaze? Nije obavezno, ali mi smo ovo podsetim što se malo čas reko. Zašto smo napravili region? Da bi mogli u region da stavimo promenjive koje nam služe za synchronizaciju. Tako da, nemojte promenjive koje služe za synchronizaciju, stavljati vana regiona. Onda ste potpuno ulište ili koncept regiona na čemu treba da radite synchronizaciju. Opet imate potpuno raštrka na promenjive i opet programmer neće moći da se snađe šta mi je za synchronizaciju, šta mi je za posao. Neće moći da se snađe, to je veliki problem ko do vakvih konkurentnih aplikacija barem. Šta mi onda hoćemo da radimo? Anče, hoćemo da postajemo ovaj ovde await. A await je, čekam, dok lego od uslov ne postane zadovoljene. Kad je uslov zadovoljene, ja jedan jedini, opet imam eksklusivno pravo, ja i nikodrugi da pristupi datom objektu. Ako uslov nije ispunja, ne imam eksklusivno pravo i ja prepuštam pravo nekom drugom, pa će taj nekodrugi moći da kažem, ja imam...